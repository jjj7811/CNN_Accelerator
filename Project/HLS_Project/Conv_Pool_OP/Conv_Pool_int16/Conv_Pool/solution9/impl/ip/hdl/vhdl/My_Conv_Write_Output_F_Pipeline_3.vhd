-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity My_Conv_Write_Output_F_Pipeline_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_OUT3_AWVALID : OUT STD_LOGIC;
    m_axi_OUT3_AWREADY : IN STD_LOGIC;
    m_axi_OUT3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_OUT3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUT3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_OUT3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUT3_WVALID : OUT STD_LOGIC;
    m_axi_OUT3_WREADY : IN STD_LOGIC;
    m_axi_OUT3_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_OUT3_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT3_WLAST : OUT STD_LOGIC;
    m_axi_OUT3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUT3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUT3_ARVALID : OUT STD_LOGIC;
    m_axi_OUT3_ARREADY : IN STD_LOGIC;
    m_axi_OUT3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_OUT3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUT3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_OUT3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUT3_RVALID : IN STD_LOGIC;
    m_axi_OUT3_RREADY : OUT STD_LOGIC;
    m_axi_OUT3_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_OUT3_RLAST : IN STD_LOGIC;
    m_axi_OUT3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUT3_RFIFONUM : IN STD_LOGIC_VECTOR (13 downto 0);
    m_axi_OUT3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUT3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT3_BVALID : IN STD_LOGIC;
    m_axi_OUT3_BREADY : OUT STD_LOGIC;
    m_axi_OUT3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUT3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    p_cast15_cast : IN STD_LOGIC_VECTOR (62 downto 0);
    empty : IN STD_LOGIC_VECTOR (8 downto 0);
    output_buffer_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_buffer_2_ce0 : OUT STD_LOGIC;
    output_buffer_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_buffer_6_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_buffer_6_ce0 : OUT STD_LOGIC;
    output_buffer_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_buffer_10_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_buffer_10_ce0 : OUT STD_LOGIC;
    output_buffer_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_buffer_14_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_buffer_14_ce0 : OUT STD_LOGIC;
    output_buffer_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_buffer_18_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_buffer_18_ce0 : OUT STD_LOGIC;
    output_buffer_18_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_buffer_22_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_buffer_22_ce0 : OUT STD_LOGIC;
    output_buffer_22_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_buffer_26_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_buffer_26_ce0 : OUT STD_LOGIC;
    output_buffer_26_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_buffer_30_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_buffer_30_ce0 : OUT STD_LOGIC;
    output_buffer_30_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shl_ln3 : IN STD_LOGIC_VECTOR (33 downto 0);
    Out_Tc_Min_cast_cast_cast : IN STD_LOGIC_VECTOR (30 downto 0) );
end;


architecture behav of My_Conv_Write_Output_F_Pipeline_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal exitcond28_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal OUT3_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal Out_Tc_Min_cast_cast_cast_cast_cast_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal Out_Tc_Min_cast_cast_cast_cast_cast_reg_496 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_297_fu_252_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_297_reg_506 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_301_fu_316_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_301_reg_555 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_304_fu_330_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_304_reg_560 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_307_fu_344_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_307_reg_565 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_310_fu_358_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_310_reg_570 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_313_fu_372_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_313_reg_575 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_316_fu_386_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_316_reg_580 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_319_fu_400_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_319_reg_585 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_322_fu_414_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_322_reg_590 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_418_p31 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_595 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal loop_index109_fu_92 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_323_fu_283_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal Out_Tc_Min_cast_cast_cast_cast_fu_232_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_3_fu_256_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_298_fu_266_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_299_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_299_fu_306_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_300_fu_310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_302_fu_320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_303_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_305_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_306_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_308_fu_348_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_309_fu_352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_311_fu_362_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_312_fu_366_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_314_fu_376_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_315_fu_380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_317_fu_390_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_318_fu_394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_320_fu_404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_321_fu_408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component My_Conv_mux_2934_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (33 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component My_Conv_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_2934_16_1_1_U904 : component My_Conv_mux_2934_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 34,
        dout_WIDTH => 16)
    port map (
        din0 => empty_301_reg_555,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => empty_304_reg_560,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => empty_307_reg_565,
        din9 => ap_const_lv16_0,
        din10 => ap_const_lv16_0,
        din11 => ap_const_lv16_0,
        din12 => empty_310_reg_570,
        din13 => ap_const_lv16_0,
        din14 => ap_const_lv16_0,
        din15 => ap_const_lv16_0,
        din16 => empty_313_reg_575,
        din17 => ap_const_lv16_0,
        din18 => ap_const_lv16_0,
        din19 => ap_const_lv16_0,
        din20 => empty_316_reg_580,
        din21 => ap_const_lv16_0,
        din22 => ap_const_lv16_0,
        din23 => ap_const_lv16_0,
        din24 => empty_319_reg_585,
        din25 => ap_const_lv16_0,
        din26 => ap_const_lv16_0,
        din27 => ap_const_lv16_0,
        din28 => empty_322_reg_590,
        din29 => shl_ln3,
        dout => tmp_4_fu_418_p31);

    flow_control_loop_pipe_sequential_init_U : component My_Conv_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    loop_index109_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    loop_index109_fu_92 <= ap_const_lv64_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond28_fu_289_p2 = ap_const_lv1_0))) then 
                    loop_index109_fu_92 <= empty_323_fu_283_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    Out_Tc_Min_cast_cast_cast_cast_cast_reg_496(62 downto 0) <= Out_Tc_Min_cast_cast_cast_cast_cast_fu_236_p1(62 downto 0);
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                empty_297_reg_506 <= empty_297_fu_252_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                empty_301_reg_555 <= empty_301_fu_316_p1;
                empty_304_reg_560 <= empty_304_fu_330_p1;
                empty_307_reg_565 <= empty_307_fu_344_p1;
                empty_310_reg_570 <= empty_310_fu_358_p1;
                empty_313_reg_575 <= empty_313_fu_372_p1;
                empty_316_reg_580 <= empty_316_fu_386_p1;
                empty_319_reg_585 <= empty_319_fu_400_p1;
                empty_322_reg_590 <= empty_322_fu_414_p1;
                tmp_4_reg_595 <= tmp_4_fu_418_p31;
            end if;
        end if;
    end process;
    Out_Tc_Min_cast_cast_cast_cast_cast_reg_496(63) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    OUT3_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_OUT3_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            OUT3_blk_n_W <= m_axi_OUT3_WREADY;
        else 
            OUT3_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    Out_Tc_Min_cast_cast_cast_cast_cast_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Out_Tc_Min_cast_cast_cast_cast_fu_232_p1),64));
        Out_Tc_Min_cast_cast_cast_cast_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Out_Tc_Min_cast_cast_cast),63));

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_OUT3_WREADY)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_OUT3_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_OUT3_WREADY)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_OUT3_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, exitcond28_fu_289_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond28_fu_289_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_297_fu_252_p1 <= loop_index109_fu_92(1 - 1 downto 0);
    empty_298_fu_266_p2 <= std_logic_vector(unsigned(empty) + unsigned(tmp_3_fu_256_p4));
    empty_299_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_299_p3),32));
    empty_300_fu_310_p2 <= std_logic_vector(shift_right(unsigned(output_buffer_2_q0),to_integer(unsigned('0' & empty_299_fu_306_p1(31-1 downto 0)))));
    empty_301_fu_316_p1 <= empty_300_fu_310_p2(16 - 1 downto 0);
    empty_302_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_299_p3),32));
    empty_303_fu_324_p2 <= std_logic_vector(shift_right(unsigned(output_buffer_6_q0),to_integer(unsigned('0' & empty_302_fu_320_p1(31-1 downto 0)))));
    empty_304_fu_330_p1 <= empty_303_fu_324_p2(16 - 1 downto 0);
    empty_305_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_299_p3),32));
    empty_306_fu_338_p2 <= std_logic_vector(shift_right(unsigned(output_buffer_10_q0),to_integer(unsigned('0' & empty_305_fu_334_p1(31-1 downto 0)))));
    empty_307_fu_344_p1 <= empty_306_fu_338_p2(16 - 1 downto 0);
    empty_308_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_299_p3),32));
    empty_309_fu_352_p2 <= std_logic_vector(shift_right(unsigned(output_buffer_14_q0),to_integer(unsigned('0' & empty_308_fu_348_p1(31-1 downto 0)))));
    empty_310_fu_358_p1 <= empty_309_fu_352_p2(16 - 1 downto 0);
    empty_311_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_299_p3),32));
    empty_312_fu_366_p2 <= std_logic_vector(shift_right(unsigned(output_buffer_18_q0),to_integer(unsigned('0' & empty_311_fu_362_p1(31-1 downto 0)))));
    empty_313_fu_372_p1 <= empty_312_fu_366_p2(16 - 1 downto 0);
    empty_314_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_299_p3),32));
    empty_315_fu_380_p2 <= std_logic_vector(shift_right(unsigned(output_buffer_22_q0),to_integer(unsigned('0' & empty_314_fu_376_p1(31-1 downto 0)))));
    empty_316_fu_386_p1 <= empty_315_fu_380_p2(16 - 1 downto 0);
    empty_317_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_299_p3),32));
    empty_318_fu_394_p2 <= std_logic_vector(shift_right(unsigned(output_buffer_26_q0),to_integer(unsigned('0' & empty_317_fu_390_p1(31-1 downto 0)))));
    empty_319_fu_400_p1 <= empty_318_fu_394_p2(16 - 1 downto 0);
    empty_320_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_299_p3),32));
    empty_321_fu_408_p2 <= std_logic_vector(shift_right(unsigned(output_buffer_30_q0),to_integer(unsigned('0' & empty_320_fu_404_p1(31-1 downto 0)))));
    empty_322_fu_414_p1 <= empty_321_fu_408_p2(16 - 1 downto 0);
    empty_323_fu_283_p2 <= std_logic_vector(unsigned(loop_index109_fu_92) + unsigned(ap_const_lv64_1));
    exitcond28_fu_289_p2 <= "1" when (empty_323_fu_283_p2 = Out_Tc_Min_cast_cast_cast_cast_cast_reg_496) else "0";
    m_axi_OUT3_ARADDR <= ap_const_lv64_0;
    m_axi_OUT3_ARBURST <= ap_const_lv2_0;
    m_axi_OUT3_ARCACHE <= ap_const_lv4_0;
    m_axi_OUT3_ARID <= ap_const_lv1_0;
    m_axi_OUT3_ARLEN <= ap_const_lv32_0;
    m_axi_OUT3_ARLOCK <= ap_const_lv2_0;
    m_axi_OUT3_ARPROT <= ap_const_lv3_0;
    m_axi_OUT3_ARQOS <= ap_const_lv4_0;
    m_axi_OUT3_ARREGION <= ap_const_lv4_0;
    m_axi_OUT3_ARSIZE <= ap_const_lv3_0;
    m_axi_OUT3_ARUSER <= ap_const_lv1_0;
    m_axi_OUT3_ARVALID <= ap_const_logic_0;
    m_axi_OUT3_AWADDR <= ap_const_lv64_0;
    m_axi_OUT3_AWBURST <= ap_const_lv2_0;
    m_axi_OUT3_AWCACHE <= ap_const_lv4_0;
    m_axi_OUT3_AWID <= ap_const_lv1_0;
    m_axi_OUT3_AWLEN <= ap_const_lv32_0;
    m_axi_OUT3_AWLOCK <= ap_const_lv2_0;
    m_axi_OUT3_AWPROT <= ap_const_lv3_0;
    m_axi_OUT3_AWQOS <= ap_const_lv4_0;
    m_axi_OUT3_AWREGION <= ap_const_lv4_0;
    m_axi_OUT3_AWSIZE <= ap_const_lv3_0;
    m_axi_OUT3_AWUSER <= ap_const_lv1_0;
    m_axi_OUT3_AWVALID <= ap_const_logic_0;
    m_axi_OUT3_BREADY <= ap_const_logic_0;
    m_axi_OUT3_RREADY <= ap_const_logic_0;
    m_axi_OUT3_WDATA <= tmp_4_reg_595;
    m_axi_OUT3_WID <= ap_const_lv1_0;
    m_axi_OUT3_WLAST <= ap_const_logic_0;
    m_axi_OUT3_WSTRB <= ap_const_lv2_3;
    m_axi_OUT3_WUSER <= ap_const_lv1_0;

    m_axi_OUT3_WVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_OUT3_WVALID <= ap_const_logic_1;
        else 
            m_axi_OUT3_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    output_buffer_10_address0 <= p_cast_fu_271_p1(9 - 1 downto 0);

    output_buffer_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_buffer_10_ce0 <= ap_const_logic_1;
        else 
            output_buffer_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_buffer_14_address0 <= p_cast_fu_271_p1(9 - 1 downto 0);

    output_buffer_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_buffer_14_ce0 <= ap_const_logic_1;
        else 
            output_buffer_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_buffer_18_address0 <= p_cast_fu_271_p1(9 - 1 downto 0);

    output_buffer_18_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_buffer_18_ce0 <= ap_const_logic_1;
        else 
            output_buffer_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_buffer_22_address0 <= p_cast_fu_271_p1(9 - 1 downto 0);

    output_buffer_22_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_buffer_22_ce0 <= ap_const_logic_1;
        else 
            output_buffer_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_buffer_26_address0 <= p_cast_fu_271_p1(9 - 1 downto 0);

    output_buffer_26_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_buffer_26_ce0 <= ap_const_logic_1;
        else 
            output_buffer_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_buffer_2_address0 <= p_cast_fu_271_p1(9 - 1 downto 0);

    output_buffer_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_buffer_2_ce0 <= ap_const_logic_1;
        else 
            output_buffer_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_buffer_30_address0 <= p_cast_fu_271_p1(9 - 1 downto 0);

    output_buffer_30_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_buffer_30_ce0 <= ap_const_logic_1;
        else 
            output_buffer_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_buffer_6_address0 <= p_cast_fu_271_p1(9 - 1 downto 0);

    output_buffer_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_buffer_6_ce0 <= ap_const_logic_1;
        else 
            output_buffer_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_298_fu_266_p2),64));
    tmp_3_fu_256_p4 <= loop_index109_fu_92(9 downto 1);
    tmp_s_fu_299_p3 <= (empty_297_reg_506 & ap_const_lv4_0);
end behav;
