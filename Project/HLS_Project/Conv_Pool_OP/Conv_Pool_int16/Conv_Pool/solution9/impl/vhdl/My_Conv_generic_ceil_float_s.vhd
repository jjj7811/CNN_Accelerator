-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity My_Conv_generic_ceil_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of My_Conv_generic_ceil_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv23_7FFFFF : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111111111";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mask_table_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mask_table_ce0 : STD_LOGIC;
    signal mask_table_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal data_V_fu_69_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_313 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_V_2_fu_81_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xs_exp_V_2_reg_321 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln21_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_328 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln368_fu_140_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln368_reg_338 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln541_fu_135_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln21_fu_91_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_101_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln21_fu_95_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_111_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal index_fu_125_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_Result_1_fu_158_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln30_fu_154_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_fu_169_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_1_fu_176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln779_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_exp_V_fu_182_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln779_fu_211_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln779_1_fu_214_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal xs_sig_V_fu_218_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal xor_ln1497_fu_225_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal xs_sign_V_1_fu_197_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_V_3_fu_205_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xs_sig_V_2_fu_231_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_3_fu_237_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1035_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_1_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln21_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln356_fu_165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1035_1_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1035_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_fu_261_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln356_1_fu_247_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln1035_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1035_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1035_fu_275_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1035_1_fu_295_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component My_Conv_generic_ceil_float_s_mask_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;



begin
    mask_table_U : component My_Conv_generic_ceil_float_s_mask_table_ROM_AUTO_1R
    generic map (
        DataWidth => 23,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_table_address0,
        ce0 => mask_table_ce0,
        q0 => mask_table_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_preg <= select_ln1035_1_fu_295_p3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                data_V_reg_307 <= data_V_fu_69_p1;
                icmp_ln21_reg_328 <= icmp_ln21_fu_119_p2;
                p_Result_s_reg_313 <= data_V_fu_69_p1(31 downto 31);
                trunc_ln368_reg_338 <= trunc_ln368_fu_140_p1;
                xs_exp_V_2_reg_321 <= data_V_fu_69_p1(30 downto 23);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    and_ln1035_fu_289_p2 <= (xor_ln1035_fu_283_p2 and icmp_ln1035_1_fu_149_p2);
    and_ln21_fu_255_p2 <= (or_ln21_1_fu_251_p2 and icmp_ln1035_fu_144_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, select_ln1035_1_fu_295_p3, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return <= select_ln1035_1_fu_295_p3;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln356_1_fu_247_p1 <= p_Result_3_fu_237_p4;
    bitcast_ln356_fu_165_p1 <= p_Result_1_fu_158_p3;
    data_V_1_fu_176_p2 <= std_logic_vector(unsigned(zext_ln30_fu_154_p1) + unsigned(p_Result_2_fu_169_p3));
    data_V_fu_69_p1 <= x;
    icmp_ln1035_1_fu_149_p2 <= "1" when (unsigned(xs_exp_V_2_reg_321) > unsigned(ap_const_lv8_96)) else "0";
    icmp_ln1035_fu_144_p2 <= "1" when (unsigned(xs_exp_V_2_reg_321) < unsigned(ap_const_lv8_7F)) else "0";
    icmp_ln21_fu_119_p2 <= "1" when (tmp_2_fu_111_p3 = ap_const_lv23_0) else "0";
    index_fu_125_p4 <= data_V_fu_69_p1(27 downto 23);
    mask_table_address0 <= zext_ln541_fu_135_p1(5 - 1 downto 0);

    mask_table_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mask_table_ce0 <= ap_const_logic_1;
        else 
            mask_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1035_fu_269_p2 <= (icmp_ln1035_fu_144_p2 or icmp_ln1035_1_fu_149_p2);
    or_ln21_1_fu_251_p2 <= (p_Result_s_reg_313 or icmp_ln21_reg_328);
    or_ln21_fu_95_p2 <= (xs_exp_V_2_fu_81_p4 or trunc_ln21_fu_91_p1);
    or_ln779_fu_192_p2 <= (data_V_reg_307 or data_V_1_fu_176_p2);
    p_Result_1_fu_158_p3 <= (p_Result_s_reg_313 & ap_const_lv31_0);
    p_Result_2_fu_169_p3 <= (ap_const_lv1_0 & trunc_ln368_reg_338);
    p_Result_3_fu_237_p4 <= ((xs_sign_V_1_fu_197_p3 & xs_exp_V_3_fu_205_p3) & xs_sig_V_2_fu_231_p2);
    select_ln1035_1_fu_295_p3 <= 
        x when (and_ln1035_fu_289_p2(0) = '1') else 
        select_ln1035_fu_275_p3;
    select_ln1035_fu_275_p3 <= 
        select_ln21_fu_261_p3 when (or_ln1035_fu_269_p2(0) = '1') else 
        bitcast_ln356_1_fu_247_p1;
    select_ln21_fu_261_p3 <= 
        bitcast_ln356_fu_165_p1 when (and_ln21_fu_255_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    tmp_1_fu_101_p4 <= data_V_fu_69_p1(22 downto 8);
    tmp_2_fu_111_p3 <= (tmp_1_fu_101_p4 & or_ln21_fu_95_p2);
    trunc_ln21_fu_91_p1 <= data_V_fu_69_p1(8 - 1 downto 0);
    trunc_ln368_fu_140_p1 <= data_V_fu_69_p1(31 - 1 downto 0);
    trunc_ln779_1_fu_214_p1 <= data_V_1_fu_176_p2(23 - 1 downto 0);
    trunc_ln779_fu_211_p1 <= data_V_reg_307(23 - 1 downto 0);
    xor_ln1035_fu_283_p2 <= (icmp_ln1035_fu_144_p2 xor ap_const_lv1_1);
    xor_ln1497_fu_225_p2 <= (mask_table_q0 xor ap_const_lv23_7FFFFF);
    xs_exp_V_2_fu_81_p4 <= data_V_fu_69_p1(30 downto 23);
    xs_exp_V_3_fu_205_p3 <= 
        xs_exp_V_2_reg_321 when (p_Result_s_reg_313(0) = '1') else 
        xs_exp_V_fu_182_p4;
    xs_exp_V_fu_182_p4 <= data_V_1_fu_176_p2(30 downto 23);
    xs_sig_V_2_fu_231_p2 <= (xs_sig_V_fu_218_p3 and xor_ln1497_fu_225_p2);
    xs_sig_V_fu_218_p3 <= 
        trunc_ln779_fu_211_p1 when (p_Result_s_reg_313(0) = '1') else 
        trunc_ln779_1_fu_214_p1;
    xs_sign_V_1_fu_197_p3 <= or_ln779_fu_192_p2(31 downto 31);
    zext_ln30_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mask_table_q0),32));
    zext_ln541_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_125_p4),64));
end behav;
