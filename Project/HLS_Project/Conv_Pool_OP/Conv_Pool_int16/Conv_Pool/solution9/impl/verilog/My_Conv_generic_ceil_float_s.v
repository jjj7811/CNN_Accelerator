// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module My_Conv_generic_ceil_float_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] mask_table_address0;
reg    mask_table_ce0;
wire   [22:0] mask_table_q0;
wire   [31:0] data_V_fu_69_p1;
reg   [31:0] data_V_reg_307;
reg   [0:0] p_Result_s_reg_313;
wire   [7:0] xs_exp_V_2_fu_81_p4;
reg   [7:0] xs_exp_V_2_reg_321;
wire   [0:0] icmp_ln21_fu_119_p2;
reg   [0:0] icmp_ln21_reg_328;
wire   [30:0] trunc_ln368_fu_140_p1;
reg   [30:0] trunc_ln368_reg_338;
wire   [63:0] zext_ln541_fu_135_p1;
wire   [7:0] trunc_ln21_fu_91_p1;
wire   [14:0] tmp_1_fu_101_p4;
wire   [7:0] or_ln21_fu_95_p2;
wire   [22:0] tmp_2_fu_111_p3;
wire   [4:0] index_fu_125_p4;
wire    ap_CS_fsm_state2;
wire   [31:0] p_Result_1_fu_158_p3;
wire   [31:0] zext_ln30_fu_154_p1;
wire   [31:0] p_Result_2_fu_169_p3;
wire   [31:0] data_V_1_fu_176_p2;
wire   [31:0] or_ln779_fu_192_p2;
wire   [7:0] xs_exp_V_fu_182_p4;
wire   [22:0] trunc_ln779_fu_211_p1;
wire   [22:0] trunc_ln779_1_fu_214_p1;
wire   [22:0] xs_sig_V_fu_218_p3;
wire   [22:0] xor_ln1497_fu_225_p2;
wire   [0:0] xs_sign_V_1_fu_197_p3;
wire   [7:0] xs_exp_V_3_fu_205_p3;
wire   [22:0] xs_sig_V_2_fu_231_p2;
wire   [31:0] p_Result_3_fu_237_p4;
wire   [0:0] icmp_ln1035_fu_144_p2;
wire   [0:0] or_ln21_1_fu_251_p2;
wire   [0:0] and_ln21_fu_255_p2;
wire   [31:0] bitcast_ln356_fu_165_p1;
wire   [0:0] icmp_ln1035_1_fu_149_p2;
wire   [0:0] or_ln1035_fu_269_p2;
wire   [31:0] select_ln21_fu_261_p3;
wire   [31:0] bitcast_ln356_1_fu_247_p1;
wire   [0:0] xor_ln1035_fu_283_p2;
wire   [0:0] and_ln1035_fu_289_p2;
wire   [31:0] select_ln1035_fu_275_p3;
wire   [31:0] select_ln1035_1_fu_295_p3;
reg   [31:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 32'd0;
end

My_Conv_generic_ceil_float_s_mask_table_ROM_AUTO_1R #(
    .DataWidth( 23 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
mask_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mask_table_address0),
    .ce0(mask_table_ce0),
    .q0(mask_table_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_preg <= select_ln1035_1_fu_295_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        data_V_reg_307 <= data_V_fu_69_p1;
        icmp_ln21_reg_328 <= icmp_ln21_fu_119_p2;
        p_Result_s_reg_313 <= data_V_fu_69_p1[32'd31];
        trunc_ln368_reg_338 <= trunc_ln368_fu_140_p1;
        xs_exp_V_2_reg_321 <= {{data_V_fu_69_p1[30:23]}};
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return = select_ln1035_1_fu_295_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mask_table_ce0 = 1'b1;
    end else begin
        mask_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln1035_fu_289_p2 = (xor_ln1035_fu_283_p2 & icmp_ln1035_1_fu_149_p2);

assign and_ln21_fu_255_p2 = (or_ln21_1_fu_251_p2 & icmp_ln1035_fu_144_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign bitcast_ln356_1_fu_247_p1 = p_Result_3_fu_237_p4;

assign bitcast_ln356_fu_165_p1 = p_Result_1_fu_158_p3;

assign data_V_1_fu_176_p2 = (zext_ln30_fu_154_p1 + p_Result_2_fu_169_p3);

assign data_V_fu_69_p1 = x;

assign icmp_ln1035_1_fu_149_p2 = ((xs_exp_V_2_reg_321 > 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln1035_fu_144_p2 = ((xs_exp_V_2_reg_321 < 8'd127) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_119_p2 = ((tmp_2_fu_111_p3 == 23'd0) ? 1'b1 : 1'b0);

assign index_fu_125_p4 = {{data_V_fu_69_p1[27:23]}};

assign mask_table_address0 = zext_ln541_fu_135_p1;

assign or_ln1035_fu_269_p2 = (icmp_ln1035_fu_144_p2 | icmp_ln1035_1_fu_149_p2);

assign or_ln21_1_fu_251_p2 = (p_Result_s_reg_313 | icmp_ln21_reg_328);

assign or_ln21_fu_95_p2 = (xs_exp_V_2_fu_81_p4 | trunc_ln21_fu_91_p1);

assign or_ln779_fu_192_p2 = (data_V_reg_307 | data_V_1_fu_176_p2);

assign p_Result_1_fu_158_p3 = {{p_Result_s_reg_313}, {31'd0}};

assign p_Result_2_fu_169_p3 = {{1'd0}, {trunc_ln368_reg_338}};

assign p_Result_3_fu_237_p4 = {{{xs_sign_V_1_fu_197_p3}, {xs_exp_V_3_fu_205_p3}}, {xs_sig_V_2_fu_231_p2}};

assign select_ln1035_1_fu_295_p3 = ((and_ln1035_fu_289_p2[0:0] == 1'b1) ? x : select_ln1035_fu_275_p3);

assign select_ln1035_fu_275_p3 = ((or_ln1035_fu_269_p2[0:0] == 1'b1) ? select_ln21_fu_261_p3 : bitcast_ln356_1_fu_247_p1);

assign select_ln21_fu_261_p3 = ((and_ln21_fu_255_p2[0:0] == 1'b1) ? bitcast_ln356_fu_165_p1 : 32'd1065353216);

assign tmp_1_fu_101_p4 = {{data_V_fu_69_p1[22:8]}};

assign tmp_2_fu_111_p3 = {{tmp_1_fu_101_p4}, {or_ln21_fu_95_p2}};

assign trunc_ln21_fu_91_p1 = data_V_fu_69_p1[7:0];

assign trunc_ln368_fu_140_p1 = data_V_fu_69_p1[30:0];

assign trunc_ln779_1_fu_214_p1 = data_V_1_fu_176_p2[22:0];

assign trunc_ln779_fu_211_p1 = data_V_reg_307[22:0];

assign xor_ln1035_fu_283_p2 = (icmp_ln1035_fu_144_p2 ^ 1'd1);

assign xor_ln1497_fu_225_p2 = (mask_table_q0 ^ 23'd8388607);

assign xs_exp_V_2_fu_81_p4 = {{data_V_fu_69_p1[30:23]}};

assign xs_exp_V_3_fu_205_p3 = ((p_Result_s_reg_313[0:0] == 1'b1) ? xs_exp_V_2_reg_321 : xs_exp_V_fu_182_p4);

assign xs_exp_V_fu_182_p4 = {{data_V_1_fu_176_p2[30:23]}};

assign xs_sig_V_2_fu_231_p2 = (xs_sig_V_fu_218_p3 & xor_ln1497_fu_225_p2);

assign xs_sig_V_fu_218_p3 = ((p_Result_s_reg_313[0:0] == 1'b1) ? trunc_ln779_fu_211_p1 : trunc_ln779_1_fu_214_p1);

assign xs_sign_V_1_fu_197_p3 = or_ln779_fu_192_p2[32'd31];

assign zext_ln30_fu_154_p1 = mask_table_q0;

assign zext_ln541_fu_135_p1 = index_fu_125_p4;

endmodule //My_Conv_generic_ceil_float_s
