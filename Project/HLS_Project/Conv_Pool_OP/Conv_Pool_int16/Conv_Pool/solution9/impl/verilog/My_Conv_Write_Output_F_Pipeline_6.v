// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module My_Conv_Write_Output_F_Pipeline_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        empty_83,
        output_buffer_1_address1,
        output_buffer_1_ce1,
        output_buffer_1_we1,
        output_buffer_1_d1,
        output_buffer_5_address1,
        output_buffer_5_ce1,
        output_buffer_5_we1,
        output_buffer_5_d1,
        output_buffer_9_address1,
        output_buffer_9_ce1,
        output_buffer_9_we1,
        output_buffer_9_d1,
        output_buffer_13_address1,
        output_buffer_13_ce1,
        output_buffer_13_we1,
        output_buffer_13_d1,
        output_buffer_17_address1,
        output_buffer_17_ce1,
        output_buffer_17_we1,
        output_buffer_17_d1,
        output_buffer_21_address1,
        output_buffer_21_ce1,
        output_buffer_21_we1,
        output_buffer_21_d1,
        output_buffer_25_address1,
        output_buffer_25_ce1,
        output_buffer_25_we1,
        output_buffer_25_d1,
        output_buffer_29_address1,
        output_buffer_29_ce1,
        output_buffer_29_we1,
        output_buffer_29_d1,
        empty,
        Out_Tc_Min_cast_cast_cast
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [8:0] empty_83;
output  [8:0] output_buffer_1_address1;
output   output_buffer_1_ce1;
output  [3:0] output_buffer_1_we1;
output  [31:0] output_buffer_1_d1;
output  [8:0] output_buffer_5_address1;
output   output_buffer_5_ce1;
output  [3:0] output_buffer_5_we1;
output  [31:0] output_buffer_5_d1;
output  [8:0] output_buffer_9_address1;
output   output_buffer_9_ce1;
output  [3:0] output_buffer_9_we1;
output  [31:0] output_buffer_9_d1;
output  [8:0] output_buffer_13_address1;
output   output_buffer_13_ce1;
output  [3:0] output_buffer_13_we1;
output  [31:0] output_buffer_13_d1;
output  [8:0] output_buffer_17_address1;
output   output_buffer_17_ce1;
output  [3:0] output_buffer_17_we1;
output  [31:0] output_buffer_17_d1;
output  [8:0] output_buffer_21_address1;
output   output_buffer_21_ce1;
output  [3:0] output_buffer_21_we1;
output  [31:0] output_buffer_21_d1;
output  [8:0] output_buffer_25_address1;
output   output_buffer_25_ce1;
output  [3:0] output_buffer_25_we1;
output  [31:0] output_buffer_25_d1;
output  [8:0] output_buffer_29_address1;
output   output_buffer_29_ce1;
output  [3:0] output_buffer_29_we1;
output  [31:0] output_buffer_29_d1;
input  [2:0] empty;
input  [30:0] Out_Tc_Min_cast_cast_cast;

reg ap_idle;
reg output_buffer_1_ce1;
reg[3:0] output_buffer_1_we1;
reg output_buffer_5_ce1;
reg[3:0] output_buffer_5_we1;
reg output_buffer_9_ce1;
reg[3:0] output_buffer_9_we1;
reg output_buffer_13_ce1;
reg[3:0] output_buffer_13_we1;
reg output_buffer_17_ce1;
reg[3:0] output_buffer_17_we1;
reg output_buffer_21_ce1;
reg[3:0] output_buffer_21_we1;
reg output_buffer_25_ce1;
reg[3:0] output_buffer_25_we1;
reg output_buffer_29_ce1;
reg[3:0] output_buffer_29_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] empty_248_fu_433_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [2:0] tmp_reg_450;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] Out_Tc_Min_cast_cast_cast_cast_cast_fu_232_p1;
reg   [63:0] Out_Tc_Min_cast_cast_cast_cast_cast_reg_459;
wire   [63:0] p_cast_fu_263_p1;
wire    ap_block_pp0_stage0;
reg   [63:0] empty_244_fu_78;
wire   [63:0] empty_247_fu_275_p2;
wire    ap_loop_init;
wire   [3:0] mask692_fu_293_p2;
wire   [3:0] mask690_fu_312_p2;
wire   [3:0] mask688_fu_331_p2;
wire   [3:0] mask686_fu_350_p2;
wire   [3:0] mask684_fu_369_p2;
wire   [3:0] mask682_fu_388_p2;
wire   [3:0] mask680_fu_407_p2;
wire   [3:0] mask694_fu_426_p2;
wire  signed [62:0] Out_Tc_Min_cast_cast_cast_cast_fu_228_p1;
wire   [8:0] tmp_s_fu_248_p4;
wire   [8:0] empty_246_fu_258_p2;
wire   [0:0] empty_245_fu_244_p1;
wire   [1:0] udiv691_cast_cast_fu_281_p3;
wire   [3:0] empty_255_fu_289_p1;
wire   [1:0] udiv689_cast_cast_fu_300_p3;
wire   [3:0] empty_254_fu_308_p1;
wire   [1:0] udiv687_cast_cast_fu_319_p3;
wire   [3:0] empty_253_fu_327_p1;
wire   [1:0] udiv685_cast_cast_fu_338_p3;
wire   [3:0] empty_252_fu_346_p1;
wire   [1:0] udiv683_cast_cast_fu_357_p3;
wire   [3:0] empty_251_fu_365_p1;
wire   [1:0] udiv681_cast_cast_fu_376_p3;
wire   [3:0] empty_250_fu_384_p1;
wire   [1:0] udiv679_cast_cast_fu_395_p3;
wire   [3:0] empty_249_fu_403_p1;
wire   [1:0] udiv693_cast_cast_fu_414_p3;
wire   [3:0] empty_256_fu_422_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

My_Conv_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_244_fu_78 <= 64'd0;
        end else if (((empty_248_fu_433_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_244_fu_78 <= empty_247_fu_275_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Out_Tc_Min_cast_cast_cast_cast_cast_reg_459[62 : 0] <= Out_Tc_Min_cast_cast_cast_cast_cast_fu_232_p1[62 : 0];
    end
end

always @ (*) begin
    if (((empty_248_fu_433_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_13_ce1 = 1'b1;
    end else begin
        output_buffer_13_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_450 == 3'd7))) begin
        output_buffer_13_we1 = mask686_fu_350_p2;
    end else begin
        output_buffer_13_we1 = 4'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_17_ce1 = 1'b1;
    end else begin
        output_buffer_17_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_450 == 3'd0))) begin
        output_buffer_17_we1 = mask688_fu_331_p2;
    end else begin
        output_buffer_17_we1 = 4'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_1_ce1 = 1'b1;
    end else begin
        output_buffer_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_450 == 3'd4))) begin
        output_buffer_1_we1 = mask680_fu_407_p2;
    end else begin
        output_buffer_1_we1 = 4'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_21_ce1 = 1'b1;
    end else begin
        output_buffer_21_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_450 == 3'd1))) begin
        output_buffer_21_we1 = mask690_fu_312_p2;
    end else begin
        output_buffer_21_we1 = 4'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_25_ce1 = 1'b1;
    end else begin
        output_buffer_25_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_450 == 3'd2))) begin
        output_buffer_25_we1 = mask692_fu_293_p2;
    end else begin
        output_buffer_25_we1 = 4'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_29_ce1 = 1'b1;
    end else begin
        output_buffer_29_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_450 == 3'd3))) begin
        output_buffer_29_we1 = mask694_fu_426_p2;
    end else begin
        output_buffer_29_we1 = 4'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_5_ce1 = 1'b1;
    end else begin
        output_buffer_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_450 == 3'd5))) begin
        output_buffer_5_we1 = mask682_fu_388_p2;
    end else begin
        output_buffer_5_we1 = 4'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_9_ce1 = 1'b1;
    end else begin
        output_buffer_9_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_450 == 3'd6))) begin
        output_buffer_9_we1 = mask684_fu_369_p2;
    end else begin
        output_buffer_9_we1 = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Out_Tc_Min_cast_cast_cast_cast_cast_fu_232_p1 = $unsigned(Out_Tc_Min_cast_cast_cast_cast_fu_228_p1);

assign Out_Tc_Min_cast_cast_cast_cast_fu_228_p1 = $signed(Out_Tc_Min_cast_cast_cast);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_245_fu_244_p1 = empty_244_fu_78[0:0];

assign empty_246_fu_258_p2 = (empty_83 + tmp_s_fu_248_p4);

assign empty_247_fu_275_p2 = (empty_244_fu_78 + 64'd1);

assign empty_248_fu_433_p2 = ((empty_247_fu_275_p2 < Out_Tc_Min_cast_cast_cast_cast_cast_reg_459) ? 1'b1 : 1'b0);

assign empty_249_fu_403_p1 = udiv679_cast_cast_fu_395_p3;

assign empty_250_fu_384_p1 = udiv681_cast_cast_fu_376_p3;

assign empty_251_fu_365_p1 = udiv683_cast_cast_fu_357_p3;

assign empty_252_fu_346_p1 = udiv685_cast_cast_fu_338_p3;

assign empty_253_fu_327_p1 = udiv687_cast_cast_fu_319_p3;

assign empty_254_fu_308_p1 = udiv689_cast_cast_fu_300_p3;

assign empty_255_fu_289_p1 = udiv691_cast_cast_fu_281_p3;

assign empty_256_fu_422_p1 = udiv693_cast_cast_fu_414_p3;

assign mask680_fu_407_p2 = 4'd3 << empty_249_fu_403_p1;

assign mask682_fu_388_p2 = 4'd3 << empty_250_fu_384_p1;

assign mask684_fu_369_p2 = 4'd3 << empty_251_fu_365_p1;

assign mask686_fu_350_p2 = 4'd3 << empty_252_fu_346_p1;

assign mask688_fu_331_p2 = 4'd3 << empty_253_fu_327_p1;

assign mask690_fu_312_p2 = 4'd3 << empty_254_fu_308_p1;

assign mask692_fu_293_p2 = 4'd3 << empty_255_fu_289_p1;

assign mask694_fu_426_p2 = 4'd3 << empty_256_fu_422_p1;

assign output_buffer_13_address1 = p_cast_fu_263_p1;

assign output_buffer_13_d1 = 32'd0;

assign output_buffer_17_address1 = p_cast_fu_263_p1;

assign output_buffer_17_d1 = 32'd0;

assign output_buffer_1_address1 = p_cast_fu_263_p1;

assign output_buffer_1_d1 = 32'd0;

assign output_buffer_21_address1 = p_cast_fu_263_p1;

assign output_buffer_21_d1 = 32'd0;

assign output_buffer_25_address1 = p_cast_fu_263_p1;

assign output_buffer_25_d1 = 32'd0;

assign output_buffer_29_address1 = p_cast_fu_263_p1;

assign output_buffer_29_d1 = 32'd0;

assign output_buffer_5_address1 = p_cast_fu_263_p1;

assign output_buffer_5_d1 = 32'd0;

assign output_buffer_9_address1 = p_cast_fu_263_p1;

assign output_buffer_9_d1 = 32'd0;

assign p_cast_fu_263_p1 = empty_246_fu_258_p2;

assign tmp_reg_450 = empty;

assign tmp_s_fu_248_p4 = {{empty_244_fu_78[9:1]}};

assign udiv679_cast_cast_fu_395_p3 = {{empty_245_fu_244_p1}, {1'd0}};

assign udiv681_cast_cast_fu_376_p3 = {{empty_245_fu_244_p1}, {1'd0}};

assign udiv683_cast_cast_fu_357_p3 = {{empty_245_fu_244_p1}, {1'd0}};

assign udiv685_cast_cast_fu_338_p3 = {{empty_245_fu_244_p1}, {1'd0}};

assign udiv687_cast_cast_fu_319_p3 = {{empty_245_fu_244_p1}, {1'd0}};

assign udiv689_cast_cast_fu_300_p3 = {{empty_245_fu_244_p1}, {1'd0}};

assign udiv691_cast_cast_fu_281_p3 = {{empty_245_fu_244_p1}, {1'd0}};

assign udiv693_cast_cast_fu_414_p3 = {{empty_245_fu_244_p1}, {1'd0}};

always @ (posedge ap_clk) begin
    Out_Tc_Min_cast_cast_cast_cast_cast_reg_459[63] <= 1'b0;
end

endmodule //My_Conv_Write_Output_F_Pipeline_6
