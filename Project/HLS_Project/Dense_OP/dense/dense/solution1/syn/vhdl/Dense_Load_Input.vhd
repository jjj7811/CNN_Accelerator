-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Dense_Load_Input is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_IN1_AWVALID : OUT STD_LOGIC;
    m_axi_IN1_AWREADY : IN STD_LOGIC;
    m_axi_IN1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_IN1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_IN1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_IN1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_IN1_WVALID : OUT STD_LOGIC;
    m_axi_IN1_WREADY : IN STD_LOGIC;
    m_axi_IN1_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_IN1_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN1_WLAST : OUT STD_LOGIC;
    m_axi_IN1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_IN1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_IN1_ARVALID : OUT STD_LOGIC;
    m_axi_IN1_ARREADY : IN STD_LOGIC;
    m_axi_IN1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_IN1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_IN1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_IN1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_IN1_RVALID : IN STD_LOGIC;
    m_axi_IN1_RREADY : OUT STD_LOGIC;
    m_axi_IN1_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_IN1_RLAST : IN STD_LOGIC;
    m_axi_IN1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_IN1_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_IN1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_IN1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN1_BVALID : IN STD_LOGIC;
    m_axi_IN1_BREADY : OUT STD_LOGIC;
    m_axi_IN1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_IN1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    feature_in : IN STD_LOGIC_VECTOR (63 downto 0);
    input_buffer_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_buffer_ce1 : OUT STD_LOGIC;
    input_buffer_we1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_buffer_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    In_LP_now : IN STD_LOGIC_VECTOR (24 downto 0);
    CHin : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Dense_Load_Input is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal IN1_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal IN1_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal IN1_addr_reg_376 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal offset_fu_217_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond53_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal empty_224_fu_239_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_224_reg_396 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_194_reg_402 : STD_LOGIC_VECTOR (4 downto 0);
    signal In_Min_fu_258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal In_Min_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal IN1_addr_read_reg_412 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_314_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i13_reg_163 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln29_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast4_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln32_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln31_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln23_1_fu_202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index_fu_106 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_223_fu_233_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_227_fu_280_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mask_fu_298_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln32_fu_351_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_174_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln23_fu_182_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln23_fu_186_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_192_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_s_fu_262_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_226_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_225_fu_273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal udiv_fu_287_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal udiv_cast_cast_fu_294_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln29_fu_305_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln_fu_324_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln32_fu_320_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal udiv1_fu_339_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln32_1_fu_347_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i13_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln29_fu_358_p2 = ap_const_lv1_0))) then 
                i13_reg_163 <= i_fu_314_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond53_fu_227_p2 = ap_const_lv1_1))) then 
                i13_reg_163 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    loop_index_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                loop_index_fu_106 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond53_fu_227_p2 = ap_const_lv1_0))) then 
                loop_index_fu_106 <= empty_223_fu_233_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                IN1_addr_read_reg_412 <= m_axi_IN1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                IN1_addr_reg_376 <= sext_ln23_1_fu_202_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond53_fu_227_p2 = ap_const_lv1_1))) then
                In_Min_reg_407 <= In_Min_fu_258_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond53_fu_227_p2 = ap_const_lv1_0))) then
                empty_224_reg_396 <= empty_224_fu_239_p1;
                tmp_194_reg_402 <= loop_index_fu_106(6 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    offset_reg_387(31 downto 7) <= offset_fu_217_p3(31 downto 7);
            end if;
        end if;
    end process;
    offset_reg_387(6 downto 0) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_IN1_ARREADY, m_axi_IN1_RVALID, ap_CS_fsm_state2, ap_CS_fsm_state10, exitcond53_fu_227_p2, ap_CS_fsm_state9, ap_CS_fsm_state12, icmp_ln29_fu_358_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_IN1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond53_fu_227_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((m_axi_IN1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln29_fu_358_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    IN1_blk_n_AR_assign_proc : process(m_axi_IN1_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IN1_blk_n_AR <= m_axi_IN1_ARREADY;
        else 
            IN1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    IN1_blk_n_R_assign_proc : process(m_axi_IN1_RVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            IN1_blk_n_R <= m_axi_IN1_RVALID;
        else 
            IN1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    In_Min_fu_258_p2 <= std_logic_vector(unsigned(CHin) - unsigned(offset_reg_387));
    add_ln23_fu_186_p2 <= std_logic_vector(signed(sext_ln23_fu_182_p1) + signed(feature_in));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(m_axi_IN1_RVALID)
    begin
        if ((m_axi_IN1_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(m_axi_IN1_ARREADY)
    begin
        if ((m_axi_IN1_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_223_fu_233_p2 <= std_logic_vector(unsigned(loop_index_fu_106) + unsigned(ap_const_lv8_1));
    empty_224_fu_239_p1 <= loop_index_fu_106(2 - 1 downto 0);
    empty_225_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_262_p3),64));
    empty_226_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IN1_addr_read_reg_412),64));
    empty_227_fu_280_p2 <= std_logic_vector(shift_left(unsigned(empty_226_fu_277_p1),to_integer(unsigned('0' & empty_225_fu_273_p1(31-1 downto 0)))));
    exitcond53_fu_227_p2 <= "1" when (loop_index_fu_106 = ap_const_lv8_80) else "0";
    i_fu_314_p2 <= std_logic_vector(unsigned(i13_reg_163) + unsigned(ap_const_lv7_1));
    icmp_ln29_fu_358_p2 <= "1" when (i13_reg_163 = ap_const_lv7_7F) else "0";
    icmp_ln31_fu_309_p2 <= "1" when (signed(zext_ln29_fu_305_p1) > signed(In_Min_reg_407)) else "0";

    input_buffer_address1_assign_proc : process(ap_CS_fsm_state12, p_cast4_fu_269_p1, ap_CS_fsm_state11, zext_ln32_fu_334_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_buffer_address1 <= zext_ln32_fu_334_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_buffer_address1 <= p_cast4_fu_269_p1(5 - 1 downto 0);
        else 
            input_buffer_address1 <= "XXXXX";
        end if; 
    end process;


    input_buffer_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            input_buffer_ce1 <= ap_const_logic_1;
        else 
            input_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_buffer_d1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state11, empty_227_fu_280_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_buffer_d1 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_buffer_d1 <= empty_227_fu_280_p2;
        else 
            input_buffer_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_buffer_we1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state11, icmp_ln31_fu_309_p2, mask_fu_298_p2, shl_ln32_fu_351_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln31_fu_309_p2 = ap_const_lv1_1))) then 
            input_buffer_we1 <= shl_ln32_fu_351_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_buffer_we1 <= mask_fu_298_p2;
        else 
            input_buffer_we1 <= ap_const_lv8_0;
        end if; 
    end process;

    lshr_ln_fu_324_p4 <= i13_reg_163(6 downto 2);
    m_axi_IN1_ARADDR <= IN1_addr_reg_376;
    m_axi_IN1_ARBURST <= ap_const_lv2_0;
    m_axi_IN1_ARCACHE <= ap_const_lv4_0;
    m_axi_IN1_ARID <= ap_const_lv1_0;
    m_axi_IN1_ARLEN <= ap_const_lv32_80;
    m_axi_IN1_ARLOCK <= ap_const_lv2_0;
    m_axi_IN1_ARPROT <= ap_const_lv3_0;
    m_axi_IN1_ARQOS <= ap_const_lv4_0;
    m_axi_IN1_ARREGION <= ap_const_lv4_0;
    m_axi_IN1_ARSIZE <= ap_const_lv3_0;
    m_axi_IN1_ARUSER <= ap_const_lv1_0;

    m_axi_IN1_ARVALID_assign_proc : process(m_axi_IN1_ARREADY, ap_CS_fsm_state2)
    begin
        if (((m_axi_IN1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_IN1_ARVALID <= ap_const_logic_1;
        else 
            m_axi_IN1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_IN1_AWADDR <= ap_const_lv64_0;
    m_axi_IN1_AWBURST <= ap_const_lv2_0;
    m_axi_IN1_AWCACHE <= ap_const_lv4_0;
    m_axi_IN1_AWID <= ap_const_lv1_0;
    m_axi_IN1_AWLEN <= ap_const_lv32_0;
    m_axi_IN1_AWLOCK <= ap_const_lv2_0;
    m_axi_IN1_AWPROT <= ap_const_lv3_0;
    m_axi_IN1_AWQOS <= ap_const_lv4_0;
    m_axi_IN1_AWREGION <= ap_const_lv4_0;
    m_axi_IN1_AWSIZE <= ap_const_lv3_0;
    m_axi_IN1_AWUSER <= ap_const_lv1_0;
    m_axi_IN1_AWVALID <= ap_const_logic_0;
    m_axi_IN1_BREADY <= ap_const_logic_0;

    m_axi_IN1_RREADY_assign_proc : process(m_axi_IN1_RVALID, ap_CS_fsm_state10)
    begin
        if (((m_axi_IN1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_IN1_RREADY <= ap_const_logic_1;
        else 
            m_axi_IN1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_IN1_WDATA <= ap_const_lv16_0;
    m_axi_IN1_WID <= ap_const_lv1_0;
    m_axi_IN1_WLAST <= ap_const_logic_0;
    m_axi_IN1_WSTRB <= ap_const_lv2_0;
    m_axi_IN1_WUSER <= ap_const_lv1_0;
    m_axi_IN1_WVALID <= ap_const_logic_0;
    mask_fu_298_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_3),to_integer(unsigned('0' & udiv_cast_cast_fu_294_p1(8-1 downto 0)))));
    offset_fu_217_p3 <= (In_LP_now & ap_const_lv7_0);
    p_cast4_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_194_reg_402),64));
        sext_ln23_1_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_192_p4),64));

        sext_ln23_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_174_p3),64));

    shl_ln32_fu_351_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_3),to_integer(unsigned('0' & zext_ln32_1_fu_347_p1(8-1 downto 0)))));
    shl_ln_fu_174_p3 <= (In_LP_now & ap_const_lv8_0);
    tmp_s_fu_262_p3 <= (empty_224_reg_396 & ap_const_lv4_0);
    trunc_ln32_fu_320_p1 <= i13_reg_163(2 - 1 downto 0);
    trunc_ln_fu_192_p4 <= add_ln23_fu_186_p2(63 downto 1);
    udiv1_fu_339_p3 <= (trunc_ln32_fu_320_p1 & ap_const_lv1_0);
    udiv_cast_cast_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udiv_fu_287_p3),8));
    udiv_fu_287_p3 <= (empty_224_reg_396 & ap_const_lv1_0);
    zext_ln29_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i13_reg_163),32));
    zext_ln32_1_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udiv1_fu_339_p3),8));
    zext_ln32_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_324_p4),64));
end behav;
