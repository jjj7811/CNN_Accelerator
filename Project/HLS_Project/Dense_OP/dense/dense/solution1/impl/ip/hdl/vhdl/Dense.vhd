-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Dense is
generic (
    C_M_AXI_IN1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_IN1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IN1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IN1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_W1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_W1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_W1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_W2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_W2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_W2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W3_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_W3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_W3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W3_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_W3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W3_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W4_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_W4_ID_WIDTH : INTEGER := 1;
    C_M_AXI_W4_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W4_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_W4_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W4_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W4_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W4_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_B1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_B1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_B1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_OUT1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUT1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUT1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT1_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_B1_USER_VALUE : INTEGER := 0;
    C_M_AXI_B1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_B1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IN1_USER_VALUE : INTEGER := 0;
    C_M_AXI_IN1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IN1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUT1_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUT1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUT1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_W1_USER_VALUE : INTEGER := 0;
    C_M_AXI_W1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_W1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_W2_USER_VALUE : INTEGER := 0;
    C_M_AXI_W2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_W2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_W3_USER_VALUE : INTEGER := 0;
    C_M_AXI_W3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_W3_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_W4_USER_VALUE : INTEGER := 0;
    C_M_AXI_W4_PROT_VALUE : INTEGER := 0;
    C_M_AXI_W4_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_IN1_AWVALID : OUT STD_LOGIC;
    m_axi_IN1_AWREADY : IN STD_LOGIC;
    m_axi_IN1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_ADDR_WIDTH-1 downto 0);
    m_axi_IN1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_ID_WIDTH-1 downto 0);
    m_axi_IN1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IN1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_AWUSER_WIDTH-1 downto 0);
    m_axi_IN1_WVALID : OUT STD_LOGIC;
    m_axi_IN1_WREADY : IN STD_LOGIC;
    m_axi_IN1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_DATA_WIDTH-1 downto 0);
    m_axi_IN1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_DATA_WIDTH/8-1 downto 0);
    m_axi_IN1_WLAST : OUT STD_LOGIC;
    m_axi_IN1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_ID_WIDTH-1 downto 0);
    m_axi_IN1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_WUSER_WIDTH-1 downto 0);
    m_axi_IN1_ARVALID : OUT STD_LOGIC;
    m_axi_IN1_ARREADY : IN STD_LOGIC;
    m_axi_IN1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_ADDR_WIDTH-1 downto 0);
    m_axi_IN1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_ID_WIDTH-1 downto 0);
    m_axi_IN1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IN1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_ARUSER_WIDTH-1 downto 0);
    m_axi_IN1_RVALID : IN STD_LOGIC;
    m_axi_IN1_RREADY : OUT STD_LOGIC;
    m_axi_IN1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IN1_DATA_WIDTH-1 downto 0);
    m_axi_IN1_RLAST : IN STD_LOGIC;
    m_axi_IN1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IN1_ID_WIDTH-1 downto 0);
    m_axi_IN1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN1_RUSER_WIDTH-1 downto 0);
    m_axi_IN1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN1_BVALID : IN STD_LOGIC;
    m_axi_IN1_BREADY : OUT STD_LOGIC;
    m_axi_IN1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IN1_ID_WIDTH-1 downto 0);
    m_axi_IN1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN1_BUSER_WIDTH-1 downto 0);
    m_axi_W1_AWVALID : OUT STD_LOGIC;
    m_axi_W1_AWREADY : IN STD_LOGIC;
    m_axi_W1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_W1_ADDR_WIDTH-1 downto 0);
    m_axi_W1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_W1_ID_WIDTH-1 downto 0);
    m_axi_W1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_W1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W1_AWUSER_WIDTH-1 downto 0);
    m_axi_W1_WVALID : OUT STD_LOGIC;
    m_axi_W1_WREADY : IN STD_LOGIC;
    m_axi_W1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_W1_DATA_WIDTH-1 downto 0);
    m_axi_W1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_W1_DATA_WIDTH/8-1 downto 0);
    m_axi_W1_WLAST : OUT STD_LOGIC;
    m_axi_W1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_W1_ID_WIDTH-1 downto 0);
    m_axi_W1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W1_WUSER_WIDTH-1 downto 0);
    m_axi_W1_ARVALID : OUT STD_LOGIC;
    m_axi_W1_ARREADY : IN STD_LOGIC;
    m_axi_W1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_W1_ADDR_WIDTH-1 downto 0);
    m_axi_W1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_W1_ID_WIDTH-1 downto 0);
    m_axi_W1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_W1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W1_ARUSER_WIDTH-1 downto 0);
    m_axi_W1_RVALID : IN STD_LOGIC;
    m_axi_W1_RREADY : OUT STD_LOGIC;
    m_axi_W1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_W1_DATA_WIDTH-1 downto 0);
    m_axi_W1_RLAST : IN STD_LOGIC;
    m_axi_W1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_W1_ID_WIDTH-1 downto 0);
    m_axi_W1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_W1_RUSER_WIDTH-1 downto 0);
    m_axi_W1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W1_BVALID : IN STD_LOGIC;
    m_axi_W1_BREADY : OUT STD_LOGIC;
    m_axi_W1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_W1_ID_WIDTH-1 downto 0);
    m_axi_W1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_W1_BUSER_WIDTH-1 downto 0);
    m_axi_W2_AWVALID : OUT STD_LOGIC;
    m_axi_W2_AWREADY : IN STD_LOGIC;
    m_axi_W2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_W2_ADDR_WIDTH-1 downto 0);
    m_axi_W2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_W2_ID_WIDTH-1 downto 0);
    m_axi_W2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_W2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W2_AWUSER_WIDTH-1 downto 0);
    m_axi_W2_WVALID : OUT STD_LOGIC;
    m_axi_W2_WREADY : IN STD_LOGIC;
    m_axi_W2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_W2_DATA_WIDTH-1 downto 0);
    m_axi_W2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_W2_DATA_WIDTH/8-1 downto 0);
    m_axi_W2_WLAST : OUT STD_LOGIC;
    m_axi_W2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_W2_ID_WIDTH-1 downto 0);
    m_axi_W2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W2_WUSER_WIDTH-1 downto 0);
    m_axi_W2_ARVALID : OUT STD_LOGIC;
    m_axi_W2_ARREADY : IN STD_LOGIC;
    m_axi_W2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_W2_ADDR_WIDTH-1 downto 0);
    m_axi_W2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_W2_ID_WIDTH-1 downto 0);
    m_axi_W2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_W2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W2_ARUSER_WIDTH-1 downto 0);
    m_axi_W2_RVALID : IN STD_LOGIC;
    m_axi_W2_RREADY : OUT STD_LOGIC;
    m_axi_W2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_W2_DATA_WIDTH-1 downto 0);
    m_axi_W2_RLAST : IN STD_LOGIC;
    m_axi_W2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_W2_ID_WIDTH-1 downto 0);
    m_axi_W2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_W2_RUSER_WIDTH-1 downto 0);
    m_axi_W2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W2_BVALID : IN STD_LOGIC;
    m_axi_W2_BREADY : OUT STD_LOGIC;
    m_axi_W2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_W2_ID_WIDTH-1 downto 0);
    m_axi_W2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_W2_BUSER_WIDTH-1 downto 0);
    m_axi_W3_AWVALID : OUT STD_LOGIC;
    m_axi_W3_AWREADY : IN STD_LOGIC;
    m_axi_W3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_W3_ADDR_WIDTH-1 downto 0);
    m_axi_W3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_W3_ID_WIDTH-1 downto 0);
    m_axi_W3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_W3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W3_AWUSER_WIDTH-1 downto 0);
    m_axi_W3_WVALID : OUT STD_LOGIC;
    m_axi_W3_WREADY : IN STD_LOGIC;
    m_axi_W3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_W3_DATA_WIDTH-1 downto 0);
    m_axi_W3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_W3_DATA_WIDTH/8-1 downto 0);
    m_axi_W3_WLAST : OUT STD_LOGIC;
    m_axi_W3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_W3_ID_WIDTH-1 downto 0);
    m_axi_W3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W3_WUSER_WIDTH-1 downto 0);
    m_axi_W3_ARVALID : OUT STD_LOGIC;
    m_axi_W3_ARREADY : IN STD_LOGIC;
    m_axi_W3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_W3_ADDR_WIDTH-1 downto 0);
    m_axi_W3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_W3_ID_WIDTH-1 downto 0);
    m_axi_W3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_W3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W3_ARUSER_WIDTH-1 downto 0);
    m_axi_W3_RVALID : IN STD_LOGIC;
    m_axi_W3_RREADY : OUT STD_LOGIC;
    m_axi_W3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_W3_DATA_WIDTH-1 downto 0);
    m_axi_W3_RLAST : IN STD_LOGIC;
    m_axi_W3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_W3_ID_WIDTH-1 downto 0);
    m_axi_W3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_W3_RUSER_WIDTH-1 downto 0);
    m_axi_W3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W3_BVALID : IN STD_LOGIC;
    m_axi_W3_BREADY : OUT STD_LOGIC;
    m_axi_W3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_W3_ID_WIDTH-1 downto 0);
    m_axi_W3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_W3_BUSER_WIDTH-1 downto 0);
    m_axi_W4_AWVALID : OUT STD_LOGIC;
    m_axi_W4_AWREADY : IN STD_LOGIC;
    m_axi_W4_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_W4_ADDR_WIDTH-1 downto 0);
    m_axi_W4_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_W4_ID_WIDTH-1 downto 0);
    m_axi_W4_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_W4_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W4_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W4_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W4_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W4_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W4_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W4_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W4_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W4_AWUSER_WIDTH-1 downto 0);
    m_axi_W4_WVALID : OUT STD_LOGIC;
    m_axi_W4_WREADY : IN STD_LOGIC;
    m_axi_W4_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_W4_DATA_WIDTH-1 downto 0);
    m_axi_W4_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_W4_DATA_WIDTH/8-1 downto 0);
    m_axi_W4_WLAST : OUT STD_LOGIC;
    m_axi_W4_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_W4_ID_WIDTH-1 downto 0);
    m_axi_W4_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W4_WUSER_WIDTH-1 downto 0);
    m_axi_W4_ARVALID : OUT STD_LOGIC;
    m_axi_W4_ARREADY : IN STD_LOGIC;
    m_axi_W4_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_W4_ADDR_WIDTH-1 downto 0);
    m_axi_W4_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_W4_ID_WIDTH-1 downto 0);
    m_axi_W4_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_W4_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W4_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W4_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W4_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W4_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W4_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W4_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W4_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W4_ARUSER_WIDTH-1 downto 0);
    m_axi_W4_RVALID : IN STD_LOGIC;
    m_axi_W4_RREADY : OUT STD_LOGIC;
    m_axi_W4_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_W4_DATA_WIDTH-1 downto 0);
    m_axi_W4_RLAST : IN STD_LOGIC;
    m_axi_W4_RID : IN STD_LOGIC_VECTOR (C_M_AXI_W4_ID_WIDTH-1 downto 0);
    m_axi_W4_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_W4_RUSER_WIDTH-1 downto 0);
    m_axi_W4_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W4_BVALID : IN STD_LOGIC;
    m_axi_W4_BREADY : OUT STD_LOGIC;
    m_axi_W4_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W4_BID : IN STD_LOGIC_VECTOR (C_M_AXI_W4_ID_WIDTH-1 downto 0);
    m_axi_W4_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_W4_BUSER_WIDTH-1 downto 0);
    m_axi_B1_AWVALID : OUT STD_LOGIC;
    m_axi_B1_AWREADY : IN STD_LOGIC;
    m_axi_B1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B1_ADDR_WIDTH-1 downto 0);
    m_axi_B1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_B1_ID_WIDTH-1 downto 0);
    m_axi_B1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_B1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B1_AWUSER_WIDTH-1 downto 0);
    m_axi_B1_WVALID : OUT STD_LOGIC;
    m_axi_B1_WREADY : IN STD_LOGIC;
    m_axi_B1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_B1_DATA_WIDTH-1 downto 0);
    m_axi_B1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_B1_DATA_WIDTH/8-1 downto 0);
    m_axi_B1_WLAST : OUT STD_LOGIC;
    m_axi_B1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_B1_ID_WIDTH-1 downto 0);
    m_axi_B1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B1_WUSER_WIDTH-1 downto 0);
    m_axi_B1_ARVALID : OUT STD_LOGIC;
    m_axi_B1_ARREADY : IN STD_LOGIC;
    m_axi_B1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B1_ADDR_WIDTH-1 downto 0);
    m_axi_B1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_B1_ID_WIDTH-1 downto 0);
    m_axi_B1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_B1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B1_ARUSER_WIDTH-1 downto 0);
    m_axi_B1_RVALID : IN STD_LOGIC;
    m_axi_B1_RREADY : OUT STD_LOGIC;
    m_axi_B1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_B1_DATA_WIDTH-1 downto 0);
    m_axi_B1_RLAST : IN STD_LOGIC;
    m_axi_B1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_B1_ID_WIDTH-1 downto 0);
    m_axi_B1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B1_RUSER_WIDTH-1 downto 0);
    m_axi_B1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B1_BVALID : IN STD_LOGIC;
    m_axi_B1_BREADY : OUT STD_LOGIC;
    m_axi_B1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_B1_ID_WIDTH-1 downto 0);
    m_axi_B1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B1_BUSER_WIDTH-1 downto 0);
    m_axi_OUT1_AWVALID : OUT STD_LOGIC;
    m_axi_OUT1_AWREADY : IN STD_LOGIC;
    m_axi_OUT1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT1_ADDR_WIDTH-1 downto 0);
    m_axi_OUT1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT1_ID_WIDTH-1 downto 0);
    m_axi_OUT1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUT1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT1_AWUSER_WIDTH-1 downto 0);
    m_axi_OUT1_WVALID : OUT STD_LOGIC;
    m_axi_OUT1_WREADY : IN STD_LOGIC;
    m_axi_OUT1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT1_DATA_WIDTH-1 downto 0);
    m_axi_OUT1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT1_DATA_WIDTH/8-1 downto 0);
    m_axi_OUT1_WLAST : OUT STD_LOGIC;
    m_axi_OUT1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT1_ID_WIDTH-1 downto 0);
    m_axi_OUT1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT1_WUSER_WIDTH-1 downto 0);
    m_axi_OUT1_ARVALID : OUT STD_LOGIC;
    m_axi_OUT1_ARREADY : IN STD_LOGIC;
    m_axi_OUT1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT1_ADDR_WIDTH-1 downto 0);
    m_axi_OUT1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT1_ID_WIDTH-1 downto 0);
    m_axi_OUT1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUT1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT1_ARUSER_WIDTH-1 downto 0);
    m_axi_OUT1_RVALID : IN STD_LOGIC;
    m_axi_OUT1_RREADY : OUT STD_LOGIC;
    m_axi_OUT1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUT1_DATA_WIDTH-1 downto 0);
    m_axi_OUT1_RLAST : IN STD_LOGIC;
    m_axi_OUT1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT1_ID_WIDTH-1 downto 0);
    m_axi_OUT1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT1_RUSER_WIDTH-1 downto 0);
    m_axi_OUT1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT1_BVALID : IN STD_LOGIC;
    m_axi_OUT1_BREADY : OUT STD_LOGIC;
    m_axi_OUT1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT1_ID_WIDTH-1 downto 0);
    m_axi_OUT1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT1_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Dense is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Dense_Dense,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.239000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=19,HLS_SYN_DSP=0,HLS_SYN_FF=13816,HLS_SYN_LUT=35296,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_3C000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111100000000000000000000000000";
    constant ap_const_lv32_3D000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111101000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv23_7FFFFF : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111111111";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv27_7FFFFFF : STD_LOGIC_VECTOR (26 downto 0) := "111111111111111111111111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal CHin : STD_LOGIC_VECTOR (31 downto 0);
    signal CHin_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal CHin_0_vld_reg : STD_LOGIC := '0';
    signal CHin_0_ack_out : STD_LOGIC;
    signal CHout : STD_LOGIC_VECTOR (31 downto 0);
    signal CHout_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal CHout_0_vld_reg : STD_LOGIC := '0';
    signal CHout_0_ack_out : STD_LOGIC;
    signal relu_en : STD_LOGIC_VECTOR (31 downto 0);
    signal relu_en_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal relu_en_0_vld_reg : STD_LOGIC := '0';
    signal relu_en_0_ack_out : STD_LOGIC;
    signal feature_in : STD_LOGIC_VECTOR (63 downto 0);
    signal Weight1 : STD_LOGIC_VECTOR (63 downto 0);
    signal Weight2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Weight3 : STD_LOGIC_VECTOR (63 downto 0);
    signal Weight4 : STD_LOGIC_VECTOR (63 downto 0);
    signal bias : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_out : STD_LOGIC_VECTOR (63 downto 0);
    signal mask_table_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mask_table_ce0 : STD_LOGIC;
    signal mask_table_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal output_buffer0_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_buffer0_V_ce0 : STD_LOGIC;
    signal output_buffer0_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_buffer0_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_buffer0_V_ce1 : STD_LOGIC;
    signal output_buffer0_V_we1 : STD_LOGIC;
    signal output_buffer0_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_buffer1_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_buffer1_V_ce0 : STD_LOGIC;
    signal output_buffer1_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_buffer1_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_buffer1_V_ce1 : STD_LOGIC;
    signal output_buffer1_V_we1 : STD_LOGIC;
    signal output_buffer1_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_out_read_reg_1173 : STD_LOGIC_VECTOR (63 downto 0);
    signal bias_read_reg_1178 : STD_LOGIC_VECTOR (63 downto 0);
    signal Weight4_read_reg_1183 : STD_LOGIC_VECTOR (63 downto 0);
    signal Weight3_read_reg_1188 : STD_LOGIC_VECTOR (63 downto 0);
    signal Weight2_read_reg_1193 : STD_LOGIC_VECTOR (63 downto 0);
    signal Weight1_read_reg_1198 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_in_read_reg_1203 : STD_LOGIC_VECTOR (63 downto 0);
    signal relu_en_read_reg_1208 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal CHout_read_reg_1213 : STD_LOGIC_VECTOR (31 downto 0);
    signal CHin_read_reg_1218 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_reg_1224 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal conv_reg_1229 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_371_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_2_reg_1234 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal dc_reg_1240 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal data_V_3_fu_385_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_3_reg_1246 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_V_10_fu_396_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xs_exp_V_10_reg_1260 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln21_1_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_1_reg_1267 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln368_1_fu_455_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln368_1_reg_1277 : STD_LOGIC_VECTOR (30 downto 0);
    signal data_V_fu_459_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_reg_1282 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal p_Result_s_reg_1288 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_V_8_fu_470_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xs_exp_V_8_reg_1296 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln21_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1303 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln368_fu_529_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln368_reg_1313 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln1035_2_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1035_2_reg_1318 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1035_3_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1035_3_reg_1323 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1035_2_fu_664_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1035_2_reg_1328 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1035_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1035_reg_1333 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln1035_1_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1035_1_reg_1338 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1035_fu_803_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1035_reg_1343 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_3_fu_821_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_3_reg_1348 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_1_fu_837_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_1_reg_1353 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal p_Result_10_reg_1358 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_1_fu_960_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_1_reg_1363 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_reg_1369 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal val_fu_1085_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_reg_1374 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_7_fu_1098_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_7_reg_1380 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_fu_1120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_1385 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal add_ln241_fu_1126_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln241_reg_1390 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln241_fu_1139_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln241_reg_1395 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal Out_LP_now_2_fu_1149_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal Out_LP_now_2_reg_1403 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln242_fu_1155_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln242_reg_1408 : STD_LOGIC_VECTOR (26 downto 0);
    signal icmp_ln241_fu_1144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_ap_start : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_ap_done : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_ap_idle : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_ap_ready : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_AWVALID : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_WVALID : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_WLAST : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_ARVALID : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_RREADY : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_IN1_BREADY : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W1_AWVALID : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_WVALID : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W1_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_WLAST : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_ARVALID : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W1_RREADY : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W1_BREADY : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W2_AWVALID : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_WVALID : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W2_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_WLAST : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_ARVALID : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W2_RREADY : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W2_BREADY : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W3_AWVALID : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W3_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_WVALID : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W3_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_WLAST : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W3_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_ARVALID : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W3_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W3_RREADY : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W3_BREADY : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W4_AWVALID : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W4_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_WVALID : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W4_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_WLAST : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W4_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_ARVALID : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W4_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_W4_RREADY : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_W4_BREADY : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_B1_AWVALID : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_B1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_WVALID : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_B1_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_WLAST : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_B1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_ARVALID : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_B1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_and_Compute_fu_320_m_axi_B1_RREADY : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_m_axi_B1_BREADY : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_output_buffer_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Load_and_Compute_fu_320_output_buffer_ce0 : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_output_buffer_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Load_and_Compute_fu_320_output_buffer_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Load_and_Compute_fu_320_output_buffer_ce1 : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_output_buffer_we1 : STD_LOGIC;
    signal grp_Load_and_Compute_fu_320_output_buffer_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Load_and_Compute_fu_320_Out_LP_now : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_Write_Output_fu_359_ap_start : STD_LOGIC;
    signal grp_Write_Output_fu_359_ap_done : STD_LOGIC;
    signal grp_Write_Output_fu_359_ap_idle : STD_LOGIC;
    signal grp_Write_Output_fu_359_ap_ready : STD_LOGIC;
    signal grp_Write_Output_fu_359_m_axi_OUT1_AWVALID : STD_LOGIC;
    signal grp_Write_Output_fu_359_m_axi_OUT1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_WVALID : STD_LOGIC;
    signal grp_Write_Output_fu_359_m_axi_OUT1_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_WLAST : STD_LOGIC;
    signal grp_Write_Output_fu_359_m_axi_OUT1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_ARVALID : STD_LOGIC;
    signal grp_Write_Output_fu_359_m_axi_OUT1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Write_Output_fu_359_m_axi_OUT1_RREADY : STD_LOGIC;
    signal grp_Write_Output_fu_359_m_axi_OUT1_BREADY : STD_LOGIC;
    signal grp_Write_Output_fu_359_output_buffer_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Write_Output_fu_359_output_buffer_ce0 : STD_LOGIC;
    signal grp_Write_Output_fu_359_output_buffer_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Write_Output_fu_359_output_buffer_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Write_Output_fu_359_output_buffer_ce1 : STD_LOGIC;
    signal grp_Write_Output_fu_359_output_buffer_we1 : STD_LOGIC;
    signal grp_Write_Output_fu_359_output_buffer_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Write_Output_fu_359_Out_LP_now : STD_LOGIC_VECTOR (26 downto 0);
    signal B1_AWREADY : STD_LOGIC;
    signal B1_WREADY : STD_LOGIC;
    signal B1_ARVALID : STD_LOGIC;
    signal B1_ARREADY : STD_LOGIC;
    signal B1_RVALID : STD_LOGIC;
    signal B1_RREADY : STD_LOGIC;
    signal B1_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal B1_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal B1_BVALID : STD_LOGIC;
    signal IN1_AWREADY : STD_LOGIC;
    signal IN1_WREADY : STD_LOGIC;
    signal IN1_ARVALID : STD_LOGIC;
    signal IN1_ARREADY : STD_LOGIC;
    signal IN1_RVALID : STD_LOGIC;
    signal IN1_RREADY : STD_LOGIC;
    signal IN1_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal IN1_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal IN1_BVALID : STD_LOGIC;
    signal OUT1_AWVALID : STD_LOGIC;
    signal OUT1_AWREADY : STD_LOGIC;
    signal OUT1_WVALID : STD_LOGIC;
    signal OUT1_WREADY : STD_LOGIC;
    signal OUT1_ARREADY : STD_LOGIC;
    signal OUT1_RVALID : STD_LOGIC;
    signal OUT1_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal OUT1_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal OUT1_BVALID : STD_LOGIC;
    signal OUT1_BREADY : STD_LOGIC;
    signal W1_AWREADY : STD_LOGIC;
    signal W1_WREADY : STD_LOGIC;
    signal W1_ARVALID : STD_LOGIC;
    signal W1_ARREADY : STD_LOGIC;
    signal W1_RVALID : STD_LOGIC;
    signal W1_RREADY : STD_LOGIC;
    signal W1_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal W1_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal W1_BVALID : STD_LOGIC;
    signal W2_AWREADY : STD_LOGIC;
    signal W2_WREADY : STD_LOGIC;
    signal W2_ARVALID : STD_LOGIC;
    signal W2_ARREADY : STD_LOGIC;
    signal W2_RVALID : STD_LOGIC;
    signal W2_RREADY : STD_LOGIC;
    signal W2_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal W2_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal W2_BVALID : STD_LOGIC;
    signal W3_AWREADY : STD_LOGIC;
    signal W3_WREADY : STD_LOGIC;
    signal W3_ARVALID : STD_LOGIC;
    signal W3_ARREADY : STD_LOGIC;
    signal W3_RVALID : STD_LOGIC;
    signal W3_RREADY : STD_LOGIC;
    signal W3_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal W3_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal W3_BVALID : STD_LOGIC;
    signal W4_AWREADY : STD_LOGIC;
    signal W4_WREADY : STD_LOGIC;
    signal W4_ARVALID : STD_LOGIC;
    signal W4_ARREADY : STD_LOGIC;
    signal W4_RVALID : STD_LOGIC;
    signal W4_RREADY : STD_LOGIC;
    signal W4_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal W4_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal W4_BVALID : STD_LOGIC;
    signal ap_phi_mux_pp_phi_fu_299_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal pp_reg_295 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_pp_1_phi_fu_311_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_block_state23_on_subcall_done : BOOLEAN;
    signal grp_Load_and_Compute_fu_320_ap_start_reg : STD_LOGIC := '0';
    signal grp_Write_Output_fu_359_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal zext_ln541_1_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal Out_LP_now_fu_210 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_371_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_377_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln21_1_fu_406_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_i9_fu_416_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln21_2_fu_410_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_i1_fu_426_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal index_1_fu_440_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln21_fu_480_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_i_fu_490_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln21_fu_484_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_i_fu_500_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal index_fu_514_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_7_fu_547_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln30_1_fu_543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_fu_558_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_4_fu_565_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln779_1_fu_581_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_exp_V_5_fu_571_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln779_2_fu_600_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln779_3_fu_603_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal xs_sig_V_2_fu_607_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal xor_ln1497_1_fu_614_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal xs_sign_V_5_fu_586_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_V_11_fu_594_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xs_sig_V_5_fu_620_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_9_fu_626_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln21_3_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln21_1_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln356_2_fu_554_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln1035_1_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_1_fu_650_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln356_3_fu_636_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_686_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln30_fu_682_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_fu_697_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_1_fu_704_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln779_fu_720_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_exp_V_fu_710_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln779_fu_739_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln779_1_fu_742_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal xs_sig_V_fu_746_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal xor_ln1497_fu_753_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal xs_sign_V_1_fu_725_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_V_9_fu_733_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xs_sig_V_4_fu_759_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_3_fu_765_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln21_1_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln21_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln356_fu_693_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln1035_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_fu_789_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln356_1_fu_775_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln1035_1_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1035_1_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1035_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1035_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_5_fu_843_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_11_fu_864_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_1_fu_868_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xs_exp_V_7_fu_854_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_1_fu_882_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_1_fu_886_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_1_fu_900_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_1_fu_892_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_1_fu_906_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_1_fu_910_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1488_1_fu_918_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_1_fu_878_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_1_fu_922_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_2_fu_926_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_6_fu_938_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_932_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_1_fu_946_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_195_fu_950_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_2_fu_968_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_fu_989_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_993_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xs_exp_V_3_fu_979_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_fu_1007_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_fu_1011_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_fu_1025_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_1017_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_fu_1031_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_1035_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1488_fu_1043_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_1003_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_fu_1047_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_1051_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_fu_1063_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_1057_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_fu_1071_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1075_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_6_fu_1093_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_2_fu_1105_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_fu_1110_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_1116_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln241_fu_1135_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state24_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Dense_Load_and_Compute IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_IN1_AWVALID : OUT STD_LOGIC;
        m_axi_IN1_AWREADY : IN STD_LOGIC;
        m_axi_IN1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_IN1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_IN1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_IN1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_IN1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_IN1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_IN1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_IN1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_IN1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_IN1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_IN1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_IN1_WVALID : OUT STD_LOGIC;
        m_axi_IN1_WREADY : IN STD_LOGIC;
        m_axi_IN1_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_IN1_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_IN1_WLAST : OUT STD_LOGIC;
        m_axi_IN1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_IN1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_IN1_ARVALID : OUT STD_LOGIC;
        m_axi_IN1_ARREADY : IN STD_LOGIC;
        m_axi_IN1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_IN1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_IN1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_IN1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_IN1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_IN1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_IN1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_IN1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_IN1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_IN1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_IN1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_IN1_RVALID : IN STD_LOGIC;
        m_axi_IN1_RREADY : OUT STD_LOGIC;
        m_axi_IN1_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_IN1_RLAST : IN STD_LOGIC;
        m_axi_IN1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_IN1_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_IN1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_IN1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_IN1_BVALID : IN STD_LOGIC;
        m_axi_IN1_BREADY : OUT STD_LOGIC;
        m_axi_IN1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_IN1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_IN1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        feature_in : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W1_AWVALID : OUT STD_LOGIC;
        m_axi_W1_AWREADY : IN STD_LOGIC;
        m_axi_W1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W1_WVALID : OUT STD_LOGIC;
        m_axi_W1_WREADY : IN STD_LOGIC;
        m_axi_W1_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_W1_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W1_WLAST : OUT STD_LOGIC;
        m_axi_W1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W1_ARVALID : OUT STD_LOGIC;
        m_axi_W1_ARREADY : IN STD_LOGIC;
        m_axi_W1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W1_RVALID : IN STD_LOGIC;
        m_axi_W1_RREADY : OUT STD_LOGIC;
        m_axi_W1_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_W1_RLAST : IN STD_LOGIC;
        m_axi_W1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W1_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_W1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W1_BVALID : IN STD_LOGIC;
        m_axi_W1_BREADY : OUT STD_LOGIC;
        m_axi_W1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        Weight1 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W2_AWVALID : OUT STD_LOGIC;
        m_axi_W2_AWREADY : IN STD_LOGIC;
        m_axi_W2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W2_WVALID : OUT STD_LOGIC;
        m_axi_W2_WREADY : IN STD_LOGIC;
        m_axi_W2_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_W2_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W2_WLAST : OUT STD_LOGIC;
        m_axi_W2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W2_ARVALID : OUT STD_LOGIC;
        m_axi_W2_ARREADY : IN STD_LOGIC;
        m_axi_W2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W2_RVALID : IN STD_LOGIC;
        m_axi_W2_RREADY : OUT STD_LOGIC;
        m_axi_W2_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_W2_RLAST : IN STD_LOGIC;
        m_axi_W2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W2_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_W2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W2_BVALID : IN STD_LOGIC;
        m_axi_W2_BREADY : OUT STD_LOGIC;
        m_axi_W2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        Weight2 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W3_AWVALID : OUT STD_LOGIC;
        m_axi_W3_AWREADY : IN STD_LOGIC;
        m_axi_W3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W3_WVALID : OUT STD_LOGIC;
        m_axi_W3_WREADY : IN STD_LOGIC;
        m_axi_W3_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_W3_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W3_WLAST : OUT STD_LOGIC;
        m_axi_W3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W3_ARVALID : OUT STD_LOGIC;
        m_axi_W3_ARREADY : IN STD_LOGIC;
        m_axi_W3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W3_RVALID : IN STD_LOGIC;
        m_axi_W3_RREADY : OUT STD_LOGIC;
        m_axi_W3_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_W3_RLAST : IN STD_LOGIC;
        m_axi_W3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W3_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_W3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W3_BVALID : IN STD_LOGIC;
        m_axi_W3_BREADY : OUT STD_LOGIC;
        m_axi_W3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        Weight3 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W4_AWVALID : OUT STD_LOGIC;
        m_axi_W4_AWREADY : IN STD_LOGIC;
        m_axi_W4_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W4_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W4_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W4_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W4_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W4_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W4_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W4_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W4_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W4_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W4_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W4_WVALID : OUT STD_LOGIC;
        m_axi_W4_WREADY : IN STD_LOGIC;
        m_axi_W4_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_W4_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W4_WLAST : OUT STD_LOGIC;
        m_axi_W4_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W4_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W4_ARVALID : OUT STD_LOGIC;
        m_axi_W4_ARREADY : IN STD_LOGIC;
        m_axi_W4_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W4_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W4_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W4_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W4_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W4_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W4_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W4_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W4_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W4_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W4_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W4_RVALID : IN STD_LOGIC;
        m_axi_W4_RREADY : OUT STD_LOGIC;
        m_axi_W4_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_W4_RLAST : IN STD_LOGIC;
        m_axi_W4_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W4_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_W4_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W4_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W4_BVALID : IN STD_LOGIC;
        m_axi_W4_BREADY : OUT STD_LOGIC;
        m_axi_W4_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W4_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W4_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        Weight4 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_B1_AWVALID : OUT STD_LOGIC;
        m_axi_B1_AWREADY : IN STD_LOGIC;
        m_axi_B1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_B1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_B1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_B1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_B1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B1_WVALID : OUT STD_LOGIC;
        m_axi_B1_WREADY : IN STD_LOGIC;
        m_axi_B1_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_B1_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B1_WLAST : OUT STD_LOGIC;
        m_axi_B1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B1_ARVALID : OUT STD_LOGIC;
        m_axi_B1_ARREADY : IN STD_LOGIC;
        m_axi_B1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_B1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_B1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_B1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_B1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B1_RVALID : IN STD_LOGIC;
        m_axi_B1_RREADY : OUT STD_LOGIC;
        m_axi_B1_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_B1_RLAST : IN STD_LOGIC;
        m_axi_B1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B1_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_B1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B1_BVALID : IN STD_LOGIC;
        m_axi_B1_BREADY : OUT STD_LOGIC;
        m_axi_B1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        bias : IN STD_LOGIC_VECTOR (63 downto 0);
        output_buffer_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_buffer_ce0 : OUT STD_LOGIC;
        output_buffer_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_buffer_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_buffer_ce1 : OUT STD_LOGIC;
        output_buffer_we1 : OUT STD_LOGIC;
        output_buffer_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        Out_LP_now : IN STD_LOGIC_VECTOR (26 downto 0);
        Input_Loops : IN STD_LOGIC_VECTOR (31 downto 0);
        CHin : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Dense_Write_Output IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_OUT1_AWVALID : OUT STD_LOGIC;
        m_axi_OUT1_AWREADY : IN STD_LOGIC;
        m_axi_OUT1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_OUT1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_OUT1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_OUT1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_OUT1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_OUT1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_OUT1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_OUT1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_OUT1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_OUT1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_OUT1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_OUT1_WVALID : OUT STD_LOGIC;
        m_axi_OUT1_WREADY : IN STD_LOGIC;
        m_axi_OUT1_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_OUT1_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_OUT1_WLAST : OUT STD_LOGIC;
        m_axi_OUT1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_OUT1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_OUT1_ARVALID : OUT STD_LOGIC;
        m_axi_OUT1_ARREADY : IN STD_LOGIC;
        m_axi_OUT1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_OUT1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_OUT1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_OUT1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_OUT1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_OUT1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_OUT1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_OUT1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_OUT1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_OUT1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_OUT1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_OUT1_RVALID : IN STD_LOGIC;
        m_axi_OUT1_RREADY : OUT STD_LOGIC;
        m_axi_OUT1_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_OUT1_RLAST : IN STD_LOGIC;
        m_axi_OUT1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_OUT1_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_OUT1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_OUT1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_OUT1_BVALID : IN STD_LOGIC;
        m_axi_OUT1_BREADY : OUT STD_LOGIC;
        m_axi_OUT1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_OUT1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_OUT1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        feature_out : IN STD_LOGIC_VECTOR (63 downto 0);
        output_buffer_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_buffer_ce0 : OUT STD_LOGIC;
        output_buffer_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_buffer_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_buffer_ce1 : OUT STD_LOGIC;
        output_buffer_we1 : OUT STD_LOGIC;
        output_buffer_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        Out_LP_now : IN STD_LOGIC_VECTOR (26 downto 0);
        relu_en : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Dense_fmul_32ns_32ns_32_6_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Dense_sitofp_32ns_32_7_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Dense_mask_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component Dense_Load_and_Compute_bias_buffer_V_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Dense_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        CHin : OUT STD_LOGIC_VECTOR (31 downto 0);
        CHout : OUT STD_LOGIC_VECTOR (31 downto 0);
        relu_en : OUT STD_LOGIC_VECTOR (31 downto 0);
        feature_in : OUT STD_LOGIC_VECTOR (63 downto 0);
        Weight1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        Weight2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        Weight3 : OUT STD_LOGIC_VECTOR (63 downto 0);
        Weight4 : OUT STD_LOGIC_VECTOR (63 downto 0);
        bias : OUT STD_LOGIC_VECTOR (63 downto 0);
        feature_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component Dense_B1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component Dense_IN1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component Dense_OUT1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component Dense_W1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component Dense_W2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component Dense_W3_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component Dense_W4_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    mask_table_U : component Dense_mask_table_ROM_AUTO_1R
    generic map (
        DataWidth => 23,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mask_table_address0,
        ce0 => mask_table_ce0,
        q0 => mask_table_q0);

    output_buffer0_V_U : component Dense_Load_and_Compute_bias_buffer_V_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output_buffer0_V_address0,
        ce0 => output_buffer0_V_ce0,
        q0 => output_buffer0_V_q0,
        address1 => output_buffer0_V_address1,
        ce1 => output_buffer0_V_ce1,
        we1 => output_buffer0_V_we1,
        d1 => output_buffer0_V_d1);

    output_buffer1_V_U : component Dense_Load_and_Compute_bias_buffer_V_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output_buffer1_V_address0,
        ce0 => output_buffer1_V_ce0,
        q0 => output_buffer1_V_q0,
        address1 => output_buffer1_V_address1,
        ce1 => output_buffer1_V_ce1,
        we1 => output_buffer1_V_we1,
        d1 => output_buffer1_V_d1);

    grp_Load_and_Compute_fu_320 : component Dense_Load_and_Compute
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Load_and_Compute_fu_320_ap_start,
        ap_done => grp_Load_and_Compute_fu_320_ap_done,
        ap_idle => grp_Load_and_Compute_fu_320_ap_idle,
        ap_ready => grp_Load_and_Compute_fu_320_ap_ready,
        m_axi_IN1_AWVALID => grp_Load_and_Compute_fu_320_m_axi_IN1_AWVALID,
        m_axi_IN1_AWREADY => ap_const_logic_0,
        m_axi_IN1_AWADDR => grp_Load_and_Compute_fu_320_m_axi_IN1_AWADDR,
        m_axi_IN1_AWID => grp_Load_and_Compute_fu_320_m_axi_IN1_AWID,
        m_axi_IN1_AWLEN => grp_Load_and_Compute_fu_320_m_axi_IN1_AWLEN,
        m_axi_IN1_AWSIZE => grp_Load_and_Compute_fu_320_m_axi_IN1_AWSIZE,
        m_axi_IN1_AWBURST => grp_Load_and_Compute_fu_320_m_axi_IN1_AWBURST,
        m_axi_IN1_AWLOCK => grp_Load_and_Compute_fu_320_m_axi_IN1_AWLOCK,
        m_axi_IN1_AWCACHE => grp_Load_and_Compute_fu_320_m_axi_IN1_AWCACHE,
        m_axi_IN1_AWPROT => grp_Load_and_Compute_fu_320_m_axi_IN1_AWPROT,
        m_axi_IN1_AWQOS => grp_Load_and_Compute_fu_320_m_axi_IN1_AWQOS,
        m_axi_IN1_AWREGION => grp_Load_and_Compute_fu_320_m_axi_IN1_AWREGION,
        m_axi_IN1_AWUSER => grp_Load_and_Compute_fu_320_m_axi_IN1_AWUSER,
        m_axi_IN1_WVALID => grp_Load_and_Compute_fu_320_m_axi_IN1_WVALID,
        m_axi_IN1_WREADY => ap_const_logic_0,
        m_axi_IN1_WDATA => grp_Load_and_Compute_fu_320_m_axi_IN1_WDATA,
        m_axi_IN1_WSTRB => grp_Load_and_Compute_fu_320_m_axi_IN1_WSTRB,
        m_axi_IN1_WLAST => grp_Load_and_Compute_fu_320_m_axi_IN1_WLAST,
        m_axi_IN1_WID => grp_Load_and_Compute_fu_320_m_axi_IN1_WID,
        m_axi_IN1_WUSER => grp_Load_and_Compute_fu_320_m_axi_IN1_WUSER,
        m_axi_IN1_ARVALID => grp_Load_and_Compute_fu_320_m_axi_IN1_ARVALID,
        m_axi_IN1_ARREADY => IN1_ARREADY,
        m_axi_IN1_ARADDR => grp_Load_and_Compute_fu_320_m_axi_IN1_ARADDR,
        m_axi_IN1_ARID => grp_Load_and_Compute_fu_320_m_axi_IN1_ARID,
        m_axi_IN1_ARLEN => grp_Load_and_Compute_fu_320_m_axi_IN1_ARLEN,
        m_axi_IN1_ARSIZE => grp_Load_and_Compute_fu_320_m_axi_IN1_ARSIZE,
        m_axi_IN1_ARBURST => grp_Load_and_Compute_fu_320_m_axi_IN1_ARBURST,
        m_axi_IN1_ARLOCK => grp_Load_and_Compute_fu_320_m_axi_IN1_ARLOCK,
        m_axi_IN1_ARCACHE => grp_Load_and_Compute_fu_320_m_axi_IN1_ARCACHE,
        m_axi_IN1_ARPROT => grp_Load_and_Compute_fu_320_m_axi_IN1_ARPROT,
        m_axi_IN1_ARQOS => grp_Load_and_Compute_fu_320_m_axi_IN1_ARQOS,
        m_axi_IN1_ARREGION => grp_Load_and_Compute_fu_320_m_axi_IN1_ARREGION,
        m_axi_IN1_ARUSER => grp_Load_and_Compute_fu_320_m_axi_IN1_ARUSER,
        m_axi_IN1_RVALID => IN1_RVALID,
        m_axi_IN1_RREADY => grp_Load_and_Compute_fu_320_m_axi_IN1_RREADY,
        m_axi_IN1_RDATA => IN1_RDATA,
        m_axi_IN1_RLAST => ap_const_logic_0,
        m_axi_IN1_RID => ap_const_lv1_0,
        m_axi_IN1_RFIFONUM => IN1_RFIFONUM,
        m_axi_IN1_RUSER => ap_const_lv1_0,
        m_axi_IN1_RRESP => ap_const_lv2_0,
        m_axi_IN1_BVALID => ap_const_logic_0,
        m_axi_IN1_BREADY => grp_Load_and_Compute_fu_320_m_axi_IN1_BREADY,
        m_axi_IN1_BRESP => ap_const_lv2_0,
        m_axi_IN1_BID => ap_const_lv1_0,
        m_axi_IN1_BUSER => ap_const_lv1_0,
        feature_in => feature_in_read_reg_1203,
        m_axi_W1_AWVALID => grp_Load_and_Compute_fu_320_m_axi_W1_AWVALID,
        m_axi_W1_AWREADY => ap_const_logic_0,
        m_axi_W1_AWADDR => grp_Load_and_Compute_fu_320_m_axi_W1_AWADDR,
        m_axi_W1_AWID => grp_Load_and_Compute_fu_320_m_axi_W1_AWID,
        m_axi_W1_AWLEN => grp_Load_and_Compute_fu_320_m_axi_W1_AWLEN,
        m_axi_W1_AWSIZE => grp_Load_and_Compute_fu_320_m_axi_W1_AWSIZE,
        m_axi_W1_AWBURST => grp_Load_and_Compute_fu_320_m_axi_W1_AWBURST,
        m_axi_W1_AWLOCK => grp_Load_and_Compute_fu_320_m_axi_W1_AWLOCK,
        m_axi_W1_AWCACHE => grp_Load_and_Compute_fu_320_m_axi_W1_AWCACHE,
        m_axi_W1_AWPROT => grp_Load_and_Compute_fu_320_m_axi_W1_AWPROT,
        m_axi_W1_AWQOS => grp_Load_and_Compute_fu_320_m_axi_W1_AWQOS,
        m_axi_W1_AWREGION => grp_Load_and_Compute_fu_320_m_axi_W1_AWREGION,
        m_axi_W1_AWUSER => grp_Load_and_Compute_fu_320_m_axi_W1_AWUSER,
        m_axi_W1_WVALID => grp_Load_and_Compute_fu_320_m_axi_W1_WVALID,
        m_axi_W1_WREADY => ap_const_logic_0,
        m_axi_W1_WDATA => grp_Load_and_Compute_fu_320_m_axi_W1_WDATA,
        m_axi_W1_WSTRB => grp_Load_and_Compute_fu_320_m_axi_W1_WSTRB,
        m_axi_W1_WLAST => grp_Load_and_Compute_fu_320_m_axi_W1_WLAST,
        m_axi_W1_WID => grp_Load_and_Compute_fu_320_m_axi_W1_WID,
        m_axi_W1_WUSER => grp_Load_and_Compute_fu_320_m_axi_W1_WUSER,
        m_axi_W1_ARVALID => grp_Load_and_Compute_fu_320_m_axi_W1_ARVALID,
        m_axi_W1_ARREADY => W1_ARREADY,
        m_axi_W1_ARADDR => grp_Load_and_Compute_fu_320_m_axi_W1_ARADDR,
        m_axi_W1_ARID => grp_Load_and_Compute_fu_320_m_axi_W1_ARID,
        m_axi_W1_ARLEN => grp_Load_and_Compute_fu_320_m_axi_W1_ARLEN,
        m_axi_W1_ARSIZE => grp_Load_and_Compute_fu_320_m_axi_W1_ARSIZE,
        m_axi_W1_ARBURST => grp_Load_and_Compute_fu_320_m_axi_W1_ARBURST,
        m_axi_W1_ARLOCK => grp_Load_and_Compute_fu_320_m_axi_W1_ARLOCK,
        m_axi_W1_ARCACHE => grp_Load_and_Compute_fu_320_m_axi_W1_ARCACHE,
        m_axi_W1_ARPROT => grp_Load_and_Compute_fu_320_m_axi_W1_ARPROT,
        m_axi_W1_ARQOS => grp_Load_and_Compute_fu_320_m_axi_W1_ARQOS,
        m_axi_W1_ARREGION => grp_Load_and_Compute_fu_320_m_axi_W1_ARREGION,
        m_axi_W1_ARUSER => grp_Load_and_Compute_fu_320_m_axi_W1_ARUSER,
        m_axi_W1_RVALID => W1_RVALID,
        m_axi_W1_RREADY => grp_Load_and_Compute_fu_320_m_axi_W1_RREADY,
        m_axi_W1_RDATA => W1_RDATA,
        m_axi_W1_RLAST => ap_const_logic_0,
        m_axi_W1_RID => ap_const_lv1_0,
        m_axi_W1_RFIFONUM => W1_RFIFONUM,
        m_axi_W1_RUSER => ap_const_lv1_0,
        m_axi_W1_RRESP => ap_const_lv2_0,
        m_axi_W1_BVALID => ap_const_logic_0,
        m_axi_W1_BREADY => grp_Load_and_Compute_fu_320_m_axi_W1_BREADY,
        m_axi_W1_BRESP => ap_const_lv2_0,
        m_axi_W1_BID => ap_const_lv1_0,
        m_axi_W1_BUSER => ap_const_lv1_0,
        Weight1 => Weight1_read_reg_1198,
        m_axi_W2_AWVALID => grp_Load_and_Compute_fu_320_m_axi_W2_AWVALID,
        m_axi_W2_AWREADY => ap_const_logic_0,
        m_axi_W2_AWADDR => grp_Load_and_Compute_fu_320_m_axi_W2_AWADDR,
        m_axi_W2_AWID => grp_Load_and_Compute_fu_320_m_axi_W2_AWID,
        m_axi_W2_AWLEN => grp_Load_and_Compute_fu_320_m_axi_W2_AWLEN,
        m_axi_W2_AWSIZE => grp_Load_and_Compute_fu_320_m_axi_W2_AWSIZE,
        m_axi_W2_AWBURST => grp_Load_and_Compute_fu_320_m_axi_W2_AWBURST,
        m_axi_W2_AWLOCK => grp_Load_and_Compute_fu_320_m_axi_W2_AWLOCK,
        m_axi_W2_AWCACHE => grp_Load_and_Compute_fu_320_m_axi_W2_AWCACHE,
        m_axi_W2_AWPROT => grp_Load_and_Compute_fu_320_m_axi_W2_AWPROT,
        m_axi_W2_AWQOS => grp_Load_and_Compute_fu_320_m_axi_W2_AWQOS,
        m_axi_W2_AWREGION => grp_Load_and_Compute_fu_320_m_axi_W2_AWREGION,
        m_axi_W2_AWUSER => grp_Load_and_Compute_fu_320_m_axi_W2_AWUSER,
        m_axi_W2_WVALID => grp_Load_and_Compute_fu_320_m_axi_W2_WVALID,
        m_axi_W2_WREADY => ap_const_logic_0,
        m_axi_W2_WDATA => grp_Load_and_Compute_fu_320_m_axi_W2_WDATA,
        m_axi_W2_WSTRB => grp_Load_and_Compute_fu_320_m_axi_W2_WSTRB,
        m_axi_W2_WLAST => grp_Load_and_Compute_fu_320_m_axi_W2_WLAST,
        m_axi_W2_WID => grp_Load_and_Compute_fu_320_m_axi_W2_WID,
        m_axi_W2_WUSER => grp_Load_and_Compute_fu_320_m_axi_W2_WUSER,
        m_axi_W2_ARVALID => grp_Load_and_Compute_fu_320_m_axi_W2_ARVALID,
        m_axi_W2_ARREADY => W2_ARREADY,
        m_axi_W2_ARADDR => grp_Load_and_Compute_fu_320_m_axi_W2_ARADDR,
        m_axi_W2_ARID => grp_Load_and_Compute_fu_320_m_axi_W2_ARID,
        m_axi_W2_ARLEN => grp_Load_and_Compute_fu_320_m_axi_W2_ARLEN,
        m_axi_W2_ARSIZE => grp_Load_and_Compute_fu_320_m_axi_W2_ARSIZE,
        m_axi_W2_ARBURST => grp_Load_and_Compute_fu_320_m_axi_W2_ARBURST,
        m_axi_W2_ARLOCK => grp_Load_and_Compute_fu_320_m_axi_W2_ARLOCK,
        m_axi_W2_ARCACHE => grp_Load_and_Compute_fu_320_m_axi_W2_ARCACHE,
        m_axi_W2_ARPROT => grp_Load_and_Compute_fu_320_m_axi_W2_ARPROT,
        m_axi_W2_ARQOS => grp_Load_and_Compute_fu_320_m_axi_W2_ARQOS,
        m_axi_W2_ARREGION => grp_Load_and_Compute_fu_320_m_axi_W2_ARREGION,
        m_axi_W2_ARUSER => grp_Load_and_Compute_fu_320_m_axi_W2_ARUSER,
        m_axi_W2_RVALID => W2_RVALID,
        m_axi_W2_RREADY => grp_Load_and_Compute_fu_320_m_axi_W2_RREADY,
        m_axi_W2_RDATA => W2_RDATA,
        m_axi_W2_RLAST => ap_const_logic_0,
        m_axi_W2_RID => ap_const_lv1_0,
        m_axi_W2_RFIFONUM => W2_RFIFONUM,
        m_axi_W2_RUSER => ap_const_lv1_0,
        m_axi_W2_RRESP => ap_const_lv2_0,
        m_axi_W2_BVALID => ap_const_logic_0,
        m_axi_W2_BREADY => grp_Load_and_Compute_fu_320_m_axi_W2_BREADY,
        m_axi_W2_BRESP => ap_const_lv2_0,
        m_axi_W2_BID => ap_const_lv1_0,
        m_axi_W2_BUSER => ap_const_lv1_0,
        Weight2 => Weight2_read_reg_1193,
        m_axi_W3_AWVALID => grp_Load_and_Compute_fu_320_m_axi_W3_AWVALID,
        m_axi_W3_AWREADY => ap_const_logic_0,
        m_axi_W3_AWADDR => grp_Load_and_Compute_fu_320_m_axi_W3_AWADDR,
        m_axi_W3_AWID => grp_Load_and_Compute_fu_320_m_axi_W3_AWID,
        m_axi_W3_AWLEN => grp_Load_and_Compute_fu_320_m_axi_W3_AWLEN,
        m_axi_W3_AWSIZE => grp_Load_and_Compute_fu_320_m_axi_W3_AWSIZE,
        m_axi_W3_AWBURST => grp_Load_and_Compute_fu_320_m_axi_W3_AWBURST,
        m_axi_W3_AWLOCK => grp_Load_and_Compute_fu_320_m_axi_W3_AWLOCK,
        m_axi_W3_AWCACHE => grp_Load_and_Compute_fu_320_m_axi_W3_AWCACHE,
        m_axi_W3_AWPROT => grp_Load_and_Compute_fu_320_m_axi_W3_AWPROT,
        m_axi_W3_AWQOS => grp_Load_and_Compute_fu_320_m_axi_W3_AWQOS,
        m_axi_W3_AWREGION => grp_Load_and_Compute_fu_320_m_axi_W3_AWREGION,
        m_axi_W3_AWUSER => grp_Load_and_Compute_fu_320_m_axi_W3_AWUSER,
        m_axi_W3_WVALID => grp_Load_and_Compute_fu_320_m_axi_W3_WVALID,
        m_axi_W3_WREADY => ap_const_logic_0,
        m_axi_W3_WDATA => grp_Load_and_Compute_fu_320_m_axi_W3_WDATA,
        m_axi_W3_WSTRB => grp_Load_and_Compute_fu_320_m_axi_W3_WSTRB,
        m_axi_W3_WLAST => grp_Load_and_Compute_fu_320_m_axi_W3_WLAST,
        m_axi_W3_WID => grp_Load_and_Compute_fu_320_m_axi_W3_WID,
        m_axi_W3_WUSER => grp_Load_and_Compute_fu_320_m_axi_W3_WUSER,
        m_axi_W3_ARVALID => grp_Load_and_Compute_fu_320_m_axi_W3_ARVALID,
        m_axi_W3_ARREADY => W3_ARREADY,
        m_axi_W3_ARADDR => grp_Load_and_Compute_fu_320_m_axi_W3_ARADDR,
        m_axi_W3_ARID => grp_Load_and_Compute_fu_320_m_axi_W3_ARID,
        m_axi_W3_ARLEN => grp_Load_and_Compute_fu_320_m_axi_W3_ARLEN,
        m_axi_W3_ARSIZE => grp_Load_and_Compute_fu_320_m_axi_W3_ARSIZE,
        m_axi_W3_ARBURST => grp_Load_and_Compute_fu_320_m_axi_W3_ARBURST,
        m_axi_W3_ARLOCK => grp_Load_and_Compute_fu_320_m_axi_W3_ARLOCK,
        m_axi_W3_ARCACHE => grp_Load_and_Compute_fu_320_m_axi_W3_ARCACHE,
        m_axi_W3_ARPROT => grp_Load_and_Compute_fu_320_m_axi_W3_ARPROT,
        m_axi_W3_ARQOS => grp_Load_and_Compute_fu_320_m_axi_W3_ARQOS,
        m_axi_W3_ARREGION => grp_Load_and_Compute_fu_320_m_axi_W3_ARREGION,
        m_axi_W3_ARUSER => grp_Load_and_Compute_fu_320_m_axi_W3_ARUSER,
        m_axi_W3_RVALID => W3_RVALID,
        m_axi_W3_RREADY => grp_Load_and_Compute_fu_320_m_axi_W3_RREADY,
        m_axi_W3_RDATA => W3_RDATA,
        m_axi_W3_RLAST => ap_const_logic_0,
        m_axi_W3_RID => ap_const_lv1_0,
        m_axi_W3_RFIFONUM => W3_RFIFONUM,
        m_axi_W3_RUSER => ap_const_lv1_0,
        m_axi_W3_RRESP => ap_const_lv2_0,
        m_axi_W3_BVALID => ap_const_logic_0,
        m_axi_W3_BREADY => grp_Load_and_Compute_fu_320_m_axi_W3_BREADY,
        m_axi_W3_BRESP => ap_const_lv2_0,
        m_axi_W3_BID => ap_const_lv1_0,
        m_axi_W3_BUSER => ap_const_lv1_0,
        Weight3 => Weight3_read_reg_1188,
        m_axi_W4_AWVALID => grp_Load_and_Compute_fu_320_m_axi_W4_AWVALID,
        m_axi_W4_AWREADY => ap_const_logic_0,
        m_axi_W4_AWADDR => grp_Load_and_Compute_fu_320_m_axi_W4_AWADDR,
        m_axi_W4_AWID => grp_Load_and_Compute_fu_320_m_axi_W4_AWID,
        m_axi_W4_AWLEN => grp_Load_and_Compute_fu_320_m_axi_W4_AWLEN,
        m_axi_W4_AWSIZE => grp_Load_and_Compute_fu_320_m_axi_W4_AWSIZE,
        m_axi_W4_AWBURST => grp_Load_and_Compute_fu_320_m_axi_W4_AWBURST,
        m_axi_W4_AWLOCK => grp_Load_and_Compute_fu_320_m_axi_W4_AWLOCK,
        m_axi_W4_AWCACHE => grp_Load_and_Compute_fu_320_m_axi_W4_AWCACHE,
        m_axi_W4_AWPROT => grp_Load_and_Compute_fu_320_m_axi_W4_AWPROT,
        m_axi_W4_AWQOS => grp_Load_and_Compute_fu_320_m_axi_W4_AWQOS,
        m_axi_W4_AWREGION => grp_Load_and_Compute_fu_320_m_axi_W4_AWREGION,
        m_axi_W4_AWUSER => grp_Load_and_Compute_fu_320_m_axi_W4_AWUSER,
        m_axi_W4_WVALID => grp_Load_and_Compute_fu_320_m_axi_W4_WVALID,
        m_axi_W4_WREADY => ap_const_logic_0,
        m_axi_W4_WDATA => grp_Load_and_Compute_fu_320_m_axi_W4_WDATA,
        m_axi_W4_WSTRB => grp_Load_and_Compute_fu_320_m_axi_W4_WSTRB,
        m_axi_W4_WLAST => grp_Load_and_Compute_fu_320_m_axi_W4_WLAST,
        m_axi_W4_WID => grp_Load_and_Compute_fu_320_m_axi_W4_WID,
        m_axi_W4_WUSER => grp_Load_and_Compute_fu_320_m_axi_W4_WUSER,
        m_axi_W4_ARVALID => grp_Load_and_Compute_fu_320_m_axi_W4_ARVALID,
        m_axi_W4_ARREADY => W4_ARREADY,
        m_axi_W4_ARADDR => grp_Load_and_Compute_fu_320_m_axi_W4_ARADDR,
        m_axi_W4_ARID => grp_Load_and_Compute_fu_320_m_axi_W4_ARID,
        m_axi_W4_ARLEN => grp_Load_and_Compute_fu_320_m_axi_W4_ARLEN,
        m_axi_W4_ARSIZE => grp_Load_and_Compute_fu_320_m_axi_W4_ARSIZE,
        m_axi_W4_ARBURST => grp_Load_and_Compute_fu_320_m_axi_W4_ARBURST,
        m_axi_W4_ARLOCK => grp_Load_and_Compute_fu_320_m_axi_W4_ARLOCK,
        m_axi_W4_ARCACHE => grp_Load_and_Compute_fu_320_m_axi_W4_ARCACHE,
        m_axi_W4_ARPROT => grp_Load_and_Compute_fu_320_m_axi_W4_ARPROT,
        m_axi_W4_ARQOS => grp_Load_and_Compute_fu_320_m_axi_W4_ARQOS,
        m_axi_W4_ARREGION => grp_Load_and_Compute_fu_320_m_axi_W4_ARREGION,
        m_axi_W4_ARUSER => grp_Load_and_Compute_fu_320_m_axi_W4_ARUSER,
        m_axi_W4_RVALID => W4_RVALID,
        m_axi_W4_RREADY => grp_Load_and_Compute_fu_320_m_axi_W4_RREADY,
        m_axi_W4_RDATA => W4_RDATA,
        m_axi_W4_RLAST => ap_const_logic_0,
        m_axi_W4_RID => ap_const_lv1_0,
        m_axi_W4_RFIFONUM => W4_RFIFONUM,
        m_axi_W4_RUSER => ap_const_lv1_0,
        m_axi_W4_RRESP => ap_const_lv2_0,
        m_axi_W4_BVALID => ap_const_logic_0,
        m_axi_W4_BREADY => grp_Load_and_Compute_fu_320_m_axi_W4_BREADY,
        m_axi_W4_BRESP => ap_const_lv2_0,
        m_axi_W4_BID => ap_const_lv1_0,
        m_axi_W4_BUSER => ap_const_lv1_0,
        Weight4 => Weight4_read_reg_1183,
        m_axi_B1_AWVALID => grp_Load_and_Compute_fu_320_m_axi_B1_AWVALID,
        m_axi_B1_AWREADY => ap_const_logic_0,
        m_axi_B1_AWADDR => grp_Load_and_Compute_fu_320_m_axi_B1_AWADDR,
        m_axi_B1_AWID => grp_Load_and_Compute_fu_320_m_axi_B1_AWID,
        m_axi_B1_AWLEN => grp_Load_and_Compute_fu_320_m_axi_B1_AWLEN,
        m_axi_B1_AWSIZE => grp_Load_and_Compute_fu_320_m_axi_B1_AWSIZE,
        m_axi_B1_AWBURST => grp_Load_and_Compute_fu_320_m_axi_B1_AWBURST,
        m_axi_B1_AWLOCK => grp_Load_and_Compute_fu_320_m_axi_B1_AWLOCK,
        m_axi_B1_AWCACHE => grp_Load_and_Compute_fu_320_m_axi_B1_AWCACHE,
        m_axi_B1_AWPROT => grp_Load_and_Compute_fu_320_m_axi_B1_AWPROT,
        m_axi_B1_AWQOS => grp_Load_and_Compute_fu_320_m_axi_B1_AWQOS,
        m_axi_B1_AWREGION => grp_Load_and_Compute_fu_320_m_axi_B1_AWREGION,
        m_axi_B1_AWUSER => grp_Load_and_Compute_fu_320_m_axi_B1_AWUSER,
        m_axi_B1_WVALID => grp_Load_and_Compute_fu_320_m_axi_B1_WVALID,
        m_axi_B1_WREADY => ap_const_logic_0,
        m_axi_B1_WDATA => grp_Load_and_Compute_fu_320_m_axi_B1_WDATA,
        m_axi_B1_WSTRB => grp_Load_and_Compute_fu_320_m_axi_B1_WSTRB,
        m_axi_B1_WLAST => grp_Load_and_Compute_fu_320_m_axi_B1_WLAST,
        m_axi_B1_WID => grp_Load_and_Compute_fu_320_m_axi_B1_WID,
        m_axi_B1_WUSER => grp_Load_and_Compute_fu_320_m_axi_B1_WUSER,
        m_axi_B1_ARVALID => grp_Load_and_Compute_fu_320_m_axi_B1_ARVALID,
        m_axi_B1_ARREADY => B1_ARREADY,
        m_axi_B1_ARADDR => grp_Load_and_Compute_fu_320_m_axi_B1_ARADDR,
        m_axi_B1_ARID => grp_Load_and_Compute_fu_320_m_axi_B1_ARID,
        m_axi_B1_ARLEN => grp_Load_and_Compute_fu_320_m_axi_B1_ARLEN,
        m_axi_B1_ARSIZE => grp_Load_and_Compute_fu_320_m_axi_B1_ARSIZE,
        m_axi_B1_ARBURST => grp_Load_and_Compute_fu_320_m_axi_B1_ARBURST,
        m_axi_B1_ARLOCK => grp_Load_and_Compute_fu_320_m_axi_B1_ARLOCK,
        m_axi_B1_ARCACHE => grp_Load_and_Compute_fu_320_m_axi_B1_ARCACHE,
        m_axi_B1_ARPROT => grp_Load_and_Compute_fu_320_m_axi_B1_ARPROT,
        m_axi_B1_ARQOS => grp_Load_and_Compute_fu_320_m_axi_B1_ARQOS,
        m_axi_B1_ARREGION => grp_Load_and_Compute_fu_320_m_axi_B1_ARREGION,
        m_axi_B1_ARUSER => grp_Load_and_Compute_fu_320_m_axi_B1_ARUSER,
        m_axi_B1_RVALID => B1_RVALID,
        m_axi_B1_RREADY => grp_Load_and_Compute_fu_320_m_axi_B1_RREADY,
        m_axi_B1_RDATA => B1_RDATA,
        m_axi_B1_RLAST => ap_const_logic_0,
        m_axi_B1_RID => ap_const_lv1_0,
        m_axi_B1_RFIFONUM => B1_RFIFONUM,
        m_axi_B1_RUSER => ap_const_lv1_0,
        m_axi_B1_RRESP => ap_const_lv2_0,
        m_axi_B1_BVALID => ap_const_logic_0,
        m_axi_B1_BREADY => grp_Load_and_Compute_fu_320_m_axi_B1_BREADY,
        m_axi_B1_BRESP => ap_const_lv2_0,
        m_axi_B1_BID => ap_const_lv1_0,
        m_axi_B1_BUSER => ap_const_lv1_0,
        bias => bias_read_reg_1178,
        output_buffer_address0 => grp_Load_and_Compute_fu_320_output_buffer_address0,
        output_buffer_ce0 => grp_Load_and_Compute_fu_320_output_buffer_ce0,
        output_buffer_q0 => grp_Load_and_Compute_fu_320_output_buffer_q0,
        output_buffer_address1 => grp_Load_and_Compute_fu_320_output_buffer_address1,
        output_buffer_ce1 => grp_Load_and_Compute_fu_320_output_buffer_ce1,
        output_buffer_we1 => grp_Load_and_Compute_fu_320_output_buffer_we1,
        output_buffer_d1 => grp_Load_and_Compute_fu_320_output_buffer_d1,
        Out_LP_now => grp_Load_and_Compute_fu_320_Out_LP_now,
        Input_Loops => result_V_7_reg_1380,
        CHin => CHin_read_reg_1218);

    grp_Write_Output_fu_359 : component Dense_Write_Output
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Write_Output_fu_359_ap_start,
        ap_done => grp_Write_Output_fu_359_ap_done,
        ap_idle => grp_Write_Output_fu_359_ap_idle,
        ap_ready => grp_Write_Output_fu_359_ap_ready,
        m_axi_OUT1_AWVALID => grp_Write_Output_fu_359_m_axi_OUT1_AWVALID,
        m_axi_OUT1_AWREADY => OUT1_AWREADY,
        m_axi_OUT1_AWADDR => grp_Write_Output_fu_359_m_axi_OUT1_AWADDR,
        m_axi_OUT1_AWID => grp_Write_Output_fu_359_m_axi_OUT1_AWID,
        m_axi_OUT1_AWLEN => grp_Write_Output_fu_359_m_axi_OUT1_AWLEN,
        m_axi_OUT1_AWSIZE => grp_Write_Output_fu_359_m_axi_OUT1_AWSIZE,
        m_axi_OUT1_AWBURST => grp_Write_Output_fu_359_m_axi_OUT1_AWBURST,
        m_axi_OUT1_AWLOCK => grp_Write_Output_fu_359_m_axi_OUT1_AWLOCK,
        m_axi_OUT1_AWCACHE => grp_Write_Output_fu_359_m_axi_OUT1_AWCACHE,
        m_axi_OUT1_AWPROT => grp_Write_Output_fu_359_m_axi_OUT1_AWPROT,
        m_axi_OUT1_AWQOS => grp_Write_Output_fu_359_m_axi_OUT1_AWQOS,
        m_axi_OUT1_AWREGION => grp_Write_Output_fu_359_m_axi_OUT1_AWREGION,
        m_axi_OUT1_AWUSER => grp_Write_Output_fu_359_m_axi_OUT1_AWUSER,
        m_axi_OUT1_WVALID => grp_Write_Output_fu_359_m_axi_OUT1_WVALID,
        m_axi_OUT1_WREADY => OUT1_WREADY,
        m_axi_OUT1_WDATA => grp_Write_Output_fu_359_m_axi_OUT1_WDATA,
        m_axi_OUT1_WSTRB => grp_Write_Output_fu_359_m_axi_OUT1_WSTRB,
        m_axi_OUT1_WLAST => grp_Write_Output_fu_359_m_axi_OUT1_WLAST,
        m_axi_OUT1_WID => grp_Write_Output_fu_359_m_axi_OUT1_WID,
        m_axi_OUT1_WUSER => grp_Write_Output_fu_359_m_axi_OUT1_WUSER,
        m_axi_OUT1_ARVALID => grp_Write_Output_fu_359_m_axi_OUT1_ARVALID,
        m_axi_OUT1_ARREADY => ap_const_logic_0,
        m_axi_OUT1_ARADDR => grp_Write_Output_fu_359_m_axi_OUT1_ARADDR,
        m_axi_OUT1_ARID => grp_Write_Output_fu_359_m_axi_OUT1_ARID,
        m_axi_OUT1_ARLEN => grp_Write_Output_fu_359_m_axi_OUT1_ARLEN,
        m_axi_OUT1_ARSIZE => grp_Write_Output_fu_359_m_axi_OUT1_ARSIZE,
        m_axi_OUT1_ARBURST => grp_Write_Output_fu_359_m_axi_OUT1_ARBURST,
        m_axi_OUT1_ARLOCK => grp_Write_Output_fu_359_m_axi_OUT1_ARLOCK,
        m_axi_OUT1_ARCACHE => grp_Write_Output_fu_359_m_axi_OUT1_ARCACHE,
        m_axi_OUT1_ARPROT => grp_Write_Output_fu_359_m_axi_OUT1_ARPROT,
        m_axi_OUT1_ARQOS => grp_Write_Output_fu_359_m_axi_OUT1_ARQOS,
        m_axi_OUT1_ARREGION => grp_Write_Output_fu_359_m_axi_OUT1_ARREGION,
        m_axi_OUT1_ARUSER => grp_Write_Output_fu_359_m_axi_OUT1_ARUSER,
        m_axi_OUT1_RVALID => ap_const_logic_0,
        m_axi_OUT1_RREADY => grp_Write_Output_fu_359_m_axi_OUT1_RREADY,
        m_axi_OUT1_RDATA => ap_const_lv16_0,
        m_axi_OUT1_RLAST => ap_const_logic_0,
        m_axi_OUT1_RID => ap_const_lv1_0,
        m_axi_OUT1_RFIFONUM => ap_const_lv11_0,
        m_axi_OUT1_RUSER => ap_const_lv1_0,
        m_axi_OUT1_RRESP => ap_const_lv2_0,
        m_axi_OUT1_BVALID => OUT1_BVALID,
        m_axi_OUT1_BREADY => grp_Write_Output_fu_359_m_axi_OUT1_BREADY,
        m_axi_OUT1_BRESP => ap_const_lv2_0,
        m_axi_OUT1_BID => ap_const_lv1_0,
        m_axi_OUT1_BUSER => ap_const_lv1_0,
        feature_out => feature_out_read_reg_1173,
        output_buffer_address0 => grp_Write_Output_fu_359_output_buffer_address0,
        output_buffer_ce0 => grp_Write_Output_fu_359_output_buffer_ce0,
        output_buffer_q0 => grp_Write_Output_fu_359_output_buffer_q0,
        output_buffer_address1 => grp_Write_Output_fu_359_output_buffer_address1,
        output_buffer_ce1 => grp_Write_Output_fu_359_output_buffer_ce1,
        output_buffer_we1 => grp_Write_Output_fu_359_output_buffer_we1,
        output_buffer_d1 => grp_Write_Output_fu_359_output_buffer_d1,
        Out_LP_now => grp_Write_Output_fu_359_Out_LP_now,
        relu_en => relu_en_read_reg_1208);

    control_s_axi_U : component Dense_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        CHin => CHin,
        CHout => CHout,
        relu_en => relu_en,
        feature_in => feature_in,
        Weight1 => Weight1,
        Weight2 => Weight2,
        Weight3 => Weight3,
        Weight4 => Weight4,
        bias => bias,
        feature_out => feature_out,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    B1_m_axi_U : component Dense_B1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 28,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 11,
        C_M_AXI_ID_WIDTH => C_M_AXI_B1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_B1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_B1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_B1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_B1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_B1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_B1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_B1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_B1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_B1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_B1_CACHE_VALUE,
        USER_DW => 16,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_B1_AWVALID,
        AWREADY => m_axi_B1_AWREADY,
        AWADDR => m_axi_B1_AWADDR,
        AWID => m_axi_B1_AWID,
        AWLEN => m_axi_B1_AWLEN,
        AWSIZE => m_axi_B1_AWSIZE,
        AWBURST => m_axi_B1_AWBURST,
        AWLOCK => m_axi_B1_AWLOCK,
        AWCACHE => m_axi_B1_AWCACHE,
        AWPROT => m_axi_B1_AWPROT,
        AWQOS => m_axi_B1_AWQOS,
        AWREGION => m_axi_B1_AWREGION,
        AWUSER => m_axi_B1_AWUSER,
        WVALID => m_axi_B1_WVALID,
        WREADY => m_axi_B1_WREADY,
        WDATA => m_axi_B1_WDATA,
        WSTRB => m_axi_B1_WSTRB,
        WLAST => m_axi_B1_WLAST,
        WID => m_axi_B1_WID,
        WUSER => m_axi_B1_WUSER,
        ARVALID => m_axi_B1_ARVALID,
        ARREADY => m_axi_B1_ARREADY,
        ARADDR => m_axi_B1_ARADDR,
        ARID => m_axi_B1_ARID,
        ARLEN => m_axi_B1_ARLEN,
        ARSIZE => m_axi_B1_ARSIZE,
        ARBURST => m_axi_B1_ARBURST,
        ARLOCK => m_axi_B1_ARLOCK,
        ARCACHE => m_axi_B1_ARCACHE,
        ARPROT => m_axi_B1_ARPROT,
        ARQOS => m_axi_B1_ARQOS,
        ARREGION => m_axi_B1_ARREGION,
        ARUSER => m_axi_B1_ARUSER,
        RVALID => m_axi_B1_RVALID,
        RREADY => m_axi_B1_RREADY,
        RDATA => m_axi_B1_RDATA,
        RLAST => m_axi_B1_RLAST,
        RID => m_axi_B1_RID,
        RUSER => m_axi_B1_RUSER,
        RRESP => m_axi_B1_RRESP,
        BVALID => m_axi_B1_BVALID,
        BREADY => m_axi_B1_BREADY,
        BRESP => m_axi_B1_BRESP,
        BID => m_axi_B1_BID,
        BUSER => m_axi_B1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => B1_ARVALID,
        I_ARREADY => B1_ARREADY,
        I_ARADDR => grp_Load_and_Compute_fu_320_m_axi_B1_ARADDR,
        I_ARLEN => grp_Load_and_Compute_fu_320_m_axi_B1_ARLEN,
        I_RVALID => B1_RVALID,
        I_RREADY => B1_RREADY,
        I_RDATA => B1_RDATA,
        I_RFIFONUM => B1_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => B1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => B1_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => B1_BVALID,
        I_BREADY => ap_const_logic_0);

    IN1_m_axi_U : component Dense_IN1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 28,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 11,
        C_M_AXI_ID_WIDTH => C_M_AXI_IN1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IN1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IN1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IN1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IN1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IN1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IN1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IN1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IN1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IN1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IN1_CACHE_VALUE,
        USER_DW => 16,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_IN1_AWVALID,
        AWREADY => m_axi_IN1_AWREADY,
        AWADDR => m_axi_IN1_AWADDR,
        AWID => m_axi_IN1_AWID,
        AWLEN => m_axi_IN1_AWLEN,
        AWSIZE => m_axi_IN1_AWSIZE,
        AWBURST => m_axi_IN1_AWBURST,
        AWLOCK => m_axi_IN1_AWLOCK,
        AWCACHE => m_axi_IN1_AWCACHE,
        AWPROT => m_axi_IN1_AWPROT,
        AWQOS => m_axi_IN1_AWQOS,
        AWREGION => m_axi_IN1_AWREGION,
        AWUSER => m_axi_IN1_AWUSER,
        WVALID => m_axi_IN1_WVALID,
        WREADY => m_axi_IN1_WREADY,
        WDATA => m_axi_IN1_WDATA,
        WSTRB => m_axi_IN1_WSTRB,
        WLAST => m_axi_IN1_WLAST,
        WID => m_axi_IN1_WID,
        WUSER => m_axi_IN1_WUSER,
        ARVALID => m_axi_IN1_ARVALID,
        ARREADY => m_axi_IN1_ARREADY,
        ARADDR => m_axi_IN1_ARADDR,
        ARID => m_axi_IN1_ARID,
        ARLEN => m_axi_IN1_ARLEN,
        ARSIZE => m_axi_IN1_ARSIZE,
        ARBURST => m_axi_IN1_ARBURST,
        ARLOCK => m_axi_IN1_ARLOCK,
        ARCACHE => m_axi_IN1_ARCACHE,
        ARPROT => m_axi_IN1_ARPROT,
        ARQOS => m_axi_IN1_ARQOS,
        ARREGION => m_axi_IN1_ARREGION,
        ARUSER => m_axi_IN1_ARUSER,
        RVALID => m_axi_IN1_RVALID,
        RREADY => m_axi_IN1_RREADY,
        RDATA => m_axi_IN1_RDATA,
        RLAST => m_axi_IN1_RLAST,
        RID => m_axi_IN1_RID,
        RUSER => m_axi_IN1_RUSER,
        RRESP => m_axi_IN1_RRESP,
        BVALID => m_axi_IN1_BVALID,
        BREADY => m_axi_IN1_BREADY,
        BRESP => m_axi_IN1_BRESP,
        BID => m_axi_IN1_BID,
        BUSER => m_axi_IN1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => IN1_ARVALID,
        I_ARREADY => IN1_ARREADY,
        I_ARADDR => grp_Load_and_Compute_fu_320_m_axi_IN1_ARADDR,
        I_ARLEN => grp_Load_and_Compute_fu_320_m_axi_IN1_ARLEN,
        I_RVALID => IN1_RVALID,
        I_RREADY => IN1_RREADY,
        I_RDATA => IN1_RDATA,
        I_RFIFONUM => IN1_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => IN1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => IN1_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => IN1_BVALID,
        I_BREADY => ap_const_logic_0);

    OUT1_m_axi_U : component Dense_OUT1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 28,
        NUM_WRITE_OUTSTANDING => 28,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 11,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUT1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUT1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUT1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUT1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUT1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUT1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUT1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUT1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUT1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUT1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUT1_CACHE_VALUE,
        USER_DW => 16,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_OUT1_AWVALID,
        AWREADY => m_axi_OUT1_AWREADY,
        AWADDR => m_axi_OUT1_AWADDR,
        AWID => m_axi_OUT1_AWID,
        AWLEN => m_axi_OUT1_AWLEN,
        AWSIZE => m_axi_OUT1_AWSIZE,
        AWBURST => m_axi_OUT1_AWBURST,
        AWLOCK => m_axi_OUT1_AWLOCK,
        AWCACHE => m_axi_OUT1_AWCACHE,
        AWPROT => m_axi_OUT1_AWPROT,
        AWQOS => m_axi_OUT1_AWQOS,
        AWREGION => m_axi_OUT1_AWREGION,
        AWUSER => m_axi_OUT1_AWUSER,
        WVALID => m_axi_OUT1_WVALID,
        WREADY => m_axi_OUT1_WREADY,
        WDATA => m_axi_OUT1_WDATA,
        WSTRB => m_axi_OUT1_WSTRB,
        WLAST => m_axi_OUT1_WLAST,
        WID => m_axi_OUT1_WID,
        WUSER => m_axi_OUT1_WUSER,
        ARVALID => m_axi_OUT1_ARVALID,
        ARREADY => m_axi_OUT1_ARREADY,
        ARADDR => m_axi_OUT1_ARADDR,
        ARID => m_axi_OUT1_ARID,
        ARLEN => m_axi_OUT1_ARLEN,
        ARSIZE => m_axi_OUT1_ARSIZE,
        ARBURST => m_axi_OUT1_ARBURST,
        ARLOCK => m_axi_OUT1_ARLOCK,
        ARCACHE => m_axi_OUT1_ARCACHE,
        ARPROT => m_axi_OUT1_ARPROT,
        ARQOS => m_axi_OUT1_ARQOS,
        ARREGION => m_axi_OUT1_ARREGION,
        ARUSER => m_axi_OUT1_ARUSER,
        RVALID => m_axi_OUT1_RVALID,
        RREADY => m_axi_OUT1_RREADY,
        RDATA => m_axi_OUT1_RDATA,
        RLAST => m_axi_OUT1_RLAST,
        RID => m_axi_OUT1_RID,
        RUSER => m_axi_OUT1_RUSER,
        RRESP => m_axi_OUT1_RRESP,
        BVALID => m_axi_OUT1_BVALID,
        BREADY => m_axi_OUT1_BREADY,
        BRESP => m_axi_OUT1_BRESP,
        BID => m_axi_OUT1_BID,
        BUSER => m_axi_OUT1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => OUT1_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => OUT1_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => OUT1_RDATA,
        I_RFIFONUM => OUT1_RFIFONUM,
        I_AWVALID => OUT1_AWVALID,
        I_AWREADY => OUT1_AWREADY,
        I_AWADDR => grp_Write_Output_fu_359_m_axi_OUT1_AWADDR,
        I_AWLEN => grp_Write_Output_fu_359_m_axi_OUT1_AWLEN,
        I_WVALID => OUT1_WVALID,
        I_WREADY => OUT1_WREADY,
        I_WDATA => grp_Write_Output_fu_359_m_axi_OUT1_WDATA,
        I_WSTRB => grp_Write_Output_fu_359_m_axi_OUT1_WSTRB,
        I_BVALID => OUT1_BVALID,
        I_BREADY => OUT1_BREADY);

    W1_m_axi_U : component Dense_W1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 28,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 11,
        C_M_AXI_ID_WIDTH => C_M_AXI_W1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_W1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_W1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_W1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_W1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_W1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_W1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_W1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_W1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_W1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_W1_CACHE_VALUE,
        USER_DW => 16,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_W1_AWVALID,
        AWREADY => m_axi_W1_AWREADY,
        AWADDR => m_axi_W1_AWADDR,
        AWID => m_axi_W1_AWID,
        AWLEN => m_axi_W1_AWLEN,
        AWSIZE => m_axi_W1_AWSIZE,
        AWBURST => m_axi_W1_AWBURST,
        AWLOCK => m_axi_W1_AWLOCK,
        AWCACHE => m_axi_W1_AWCACHE,
        AWPROT => m_axi_W1_AWPROT,
        AWQOS => m_axi_W1_AWQOS,
        AWREGION => m_axi_W1_AWREGION,
        AWUSER => m_axi_W1_AWUSER,
        WVALID => m_axi_W1_WVALID,
        WREADY => m_axi_W1_WREADY,
        WDATA => m_axi_W1_WDATA,
        WSTRB => m_axi_W1_WSTRB,
        WLAST => m_axi_W1_WLAST,
        WID => m_axi_W1_WID,
        WUSER => m_axi_W1_WUSER,
        ARVALID => m_axi_W1_ARVALID,
        ARREADY => m_axi_W1_ARREADY,
        ARADDR => m_axi_W1_ARADDR,
        ARID => m_axi_W1_ARID,
        ARLEN => m_axi_W1_ARLEN,
        ARSIZE => m_axi_W1_ARSIZE,
        ARBURST => m_axi_W1_ARBURST,
        ARLOCK => m_axi_W1_ARLOCK,
        ARCACHE => m_axi_W1_ARCACHE,
        ARPROT => m_axi_W1_ARPROT,
        ARQOS => m_axi_W1_ARQOS,
        ARREGION => m_axi_W1_ARREGION,
        ARUSER => m_axi_W1_ARUSER,
        RVALID => m_axi_W1_RVALID,
        RREADY => m_axi_W1_RREADY,
        RDATA => m_axi_W1_RDATA,
        RLAST => m_axi_W1_RLAST,
        RID => m_axi_W1_RID,
        RUSER => m_axi_W1_RUSER,
        RRESP => m_axi_W1_RRESP,
        BVALID => m_axi_W1_BVALID,
        BREADY => m_axi_W1_BREADY,
        BRESP => m_axi_W1_BRESP,
        BID => m_axi_W1_BID,
        BUSER => m_axi_W1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => W1_ARVALID,
        I_ARREADY => W1_ARREADY,
        I_ARADDR => grp_Load_and_Compute_fu_320_m_axi_W1_ARADDR,
        I_ARLEN => grp_Load_and_Compute_fu_320_m_axi_W1_ARLEN,
        I_RVALID => W1_RVALID,
        I_RREADY => W1_RREADY,
        I_RDATA => W1_RDATA,
        I_RFIFONUM => W1_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => W1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => W1_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => W1_BVALID,
        I_BREADY => ap_const_logic_0);

    W2_m_axi_U : component Dense_W2_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 28,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 11,
        C_M_AXI_ID_WIDTH => C_M_AXI_W2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_W2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_W2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_W2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_W2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_W2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_W2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_W2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_W2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_W2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_W2_CACHE_VALUE,
        USER_DW => 16,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_W2_AWVALID,
        AWREADY => m_axi_W2_AWREADY,
        AWADDR => m_axi_W2_AWADDR,
        AWID => m_axi_W2_AWID,
        AWLEN => m_axi_W2_AWLEN,
        AWSIZE => m_axi_W2_AWSIZE,
        AWBURST => m_axi_W2_AWBURST,
        AWLOCK => m_axi_W2_AWLOCK,
        AWCACHE => m_axi_W2_AWCACHE,
        AWPROT => m_axi_W2_AWPROT,
        AWQOS => m_axi_W2_AWQOS,
        AWREGION => m_axi_W2_AWREGION,
        AWUSER => m_axi_W2_AWUSER,
        WVALID => m_axi_W2_WVALID,
        WREADY => m_axi_W2_WREADY,
        WDATA => m_axi_W2_WDATA,
        WSTRB => m_axi_W2_WSTRB,
        WLAST => m_axi_W2_WLAST,
        WID => m_axi_W2_WID,
        WUSER => m_axi_W2_WUSER,
        ARVALID => m_axi_W2_ARVALID,
        ARREADY => m_axi_W2_ARREADY,
        ARADDR => m_axi_W2_ARADDR,
        ARID => m_axi_W2_ARID,
        ARLEN => m_axi_W2_ARLEN,
        ARSIZE => m_axi_W2_ARSIZE,
        ARBURST => m_axi_W2_ARBURST,
        ARLOCK => m_axi_W2_ARLOCK,
        ARCACHE => m_axi_W2_ARCACHE,
        ARPROT => m_axi_W2_ARPROT,
        ARQOS => m_axi_W2_ARQOS,
        ARREGION => m_axi_W2_ARREGION,
        ARUSER => m_axi_W2_ARUSER,
        RVALID => m_axi_W2_RVALID,
        RREADY => m_axi_W2_RREADY,
        RDATA => m_axi_W2_RDATA,
        RLAST => m_axi_W2_RLAST,
        RID => m_axi_W2_RID,
        RUSER => m_axi_W2_RUSER,
        RRESP => m_axi_W2_RRESP,
        BVALID => m_axi_W2_BVALID,
        BREADY => m_axi_W2_BREADY,
        BRESP => m_axi_W2_BRESP,
        BID => m_axi_W2_BID,
        BUSER => m_axi_W2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => W2_ARVALID,
        I_ARREADY => W2_ARREADY,
        I_ARADDR => grp_Load_and_Compute_fu_320_m_axi_W2_ARADDR,
        I_ARLEN => grp_Load_and_Compute_fu_320_m_axi_W2_ARLEN,
        I_RVALID => W2_RVALID,
        I_RREADY => W2_RREADY,
        I_RDATA => W2_RDATA,
        I_RFIFONUM => W2_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => W2_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => W2_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => W2_BVALID,
        I_BREADY => ap_const_logic_0);

    W3_m_axi_U : component Dense_W3_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 28,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 11,
        C_M_AXI_ID_WIDTH => C_M_AXI_W3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_W3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_W3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_W3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_W3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_W3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_W3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_W3_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_W3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_W3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_W3_CACHE_VALUE,
        USER_DW => 16,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_W3_AWVALID,
        AWREADY => m_axi_W3_AWREADY,
        AWADDR => m_axi_W3_AWADDR,
        AWID => m_axi_W3_AWID,
        AWLEN => m_axi_W3_AWLEN,
        AWSIZE => m_axi_W3_AWSIZE,
        AWBURST => m_axi_W3_AWBURST,
        AWLOCK => m_axi_W3_AWLOCK,
        AWCACHE => m_axi_W3_AWCACHE,
        AWPROT => m_axi_W3_AWPROT,
        AWQOS => m_axi_W3_AWQOS,
        AWREGION => m_axi_W3_AWREGION,
        AWUSER => m_axi_W3_AWUSER,
        WVALID => m_axi_W3_WVALID,
        WREADY => m_axi_W3_WREADY,
        WDATA => m_axi_W3_WDATA,
        WSTRB => m_axi_W3_WSTRB,
        WLAST => m_axi_W3_WLAST,
        WID => m_axi_W3_WID,
        WUSER => m_axi_W3_WUSER,
        ARVALID => m_axi_W3_ARVALID,
        ARREADY => m_axi_W3_ARREADY,
        ARADDR => m_axi_W3_ARADDR,
        ARID => m_axi_W3_ARID,
        ARLEN => m_axi_W3_ARLEN,
        ARSIZE => m_axi_W3_ARSIZE,
        ARBURST => m_axi_W3_ARBURST,
        ARLOCK => m_axi_W3_ARLOCK,
        ARCACHE => m_axi_W3_ARCACHE,
        ARPROT => m_axi_W3_ARPROT,
        ARQOS => m_axi_W3_ARQOS,
        ARREGION => m_axi_W3_ARREGION,
        ARUSER => m_axi_W3_ARUSER,
        RVALID => m_axi_W3_RVALID,
        RREADY => m_axi_W3_RREADY,
        RDATA => m_axi_W3_RDATA,
        RLAST => m_axi_W3_RLAST,
        RID => m_axi_W3_RID,
        RUSER => m_axi_W3_RUSER,
        RRESP => m_axi_W3_RRESP,
        BVALID => m_axi_W3_BVALID,
        BREADY => m_axi_W3_BREADY,
        BRESP => m_axi_W3_BRESP,
        BID => m_axi_W3_BID,
        BUSER => m_axi_W3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => W3_ARVALID,
        I_ARREADY => W3_ARREADY,
        I_ARADDR => grp_Load_and_Compute_fu_320_m_axi_W3_ARADDR,
        I_ARLEN => grp_Load_and_Compute_fu_320_m_axi_W3_ARLEN,
        I_RVALID => W3_RVALID,
        I_RREADY => W3_RREADY,
        I_RDATA => W3_RDATA,
        I_RFIFONUM => W3_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => W3_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => W3_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => W3_BVALID,
        I_BREADY => ap_const_logic_0);

    W4_m_axi_U : component Dense_W4_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 28,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 11,
        C_M_AXI_ID_WIDTH => C_M_AXI_W4_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_W4_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_W4_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_W4_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_W4_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_W4_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_W4_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_W4_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_W4_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_W4_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_W4_CACHE_VALUE,
        USER_DW => 16,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_W4_AWVALID,
        AWREADY => m_axi_W4_AWREADY,
        AWADDR => m_axi_W4_AWADDR,
        AWID => m_axi_W4_AWID,
        AWLEN => m_axi_W4_AWLEN,
        AWSIZE => m_axi_W4_AWSIZE,
        AWBURST => m_axi_W4_AWBURST,
        AWLOCK => m_axi_W4_AWLOCK,
        AWCACHE => m_axi_W4_AWCACHE,
        AWPROT => m_axi_W4_AWPROT,
        AWQOS => m_axi_W4_AWQOS,
        AWREGION => m_axi_W4_AWREGION,
        AWUSER => m_axi_W4_AWUSER,
        WVALID => m_axi_W4_WVALID,
        WREADY => m_axi_W4_WREADY,
        WDATA => m_axi_W4_WDATA,
        WSTRB => m_axi_W4_WSTRB,
        WLAST => m_axi_W4_WLAST,
        WID => m_axi_W4_WID,
        WUSER => m_axi_W4_WUSER,
        ARVALID => m_axi_W4_ARVALID,
        ARREADY => m_axi_W4_ARREADY,
        ARADDR => m_axi_W4_ARADDR,
        ARID => m_axi_W4_ARID,
        ARLEN => m_axi_W4_ARLEN,
        ARSIZE => m_axi_W4_ARSIZE,
        ARBURST => m_axi_W4_ARBURST,
        ARLOCK => m_axi_W4_ARLOCK,
        ARCACHE => m_axi_W4_ARCACHE,
        ARPROT => m_axi_W4_ARPROT,
        ARQOS => m_axi_W4_ARQOS,
        ARREGION => m_axi_W4_ARREGION,
        ARUSER => m_axi_W4_ARUSER,
        RVALID => m_axi_W4_RVALID,
        RREADY => m_axi_W4_RREADY,
        RDATA => m_axi_W4_RDATA,
        RLAST => m_axi_W4_RLAST,
        RID => m_axi_W4_RID,
        RUSER => m_axi_W4_RUSER,
        RRESP => m_axi_W4_RRESP,
        BVALID => m_axi_W4_BVALID,
        BREADY => m_axi_W4_BREADY,
        BRESP => m_axi_W4_BRESP,
        BID => m_axi_W4_BID,
        BUSER => m_axi_W4_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => W4_ARVALID,
        I_ARREADY => W4_ARREADY,
        I_ARADDR => grp_Load_and_Compute_fu_320_m_axi_W4_ARADDR,
        I_ARLEN => grp_Load_and_Compute_fu_320_m_axi_W4_ARLEN,
        I_RVALID => W4_RVALID,
        I_RREADY => W4_RREADY,
        I_RDATA => W4_RDATA,
        I_RFIFONUM => W4_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => W4_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => W4_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => W4_BVALID,
        I_BREADY => ap_const_logic_0);

    fmul_32ns_32ns_32_6_max_dsp_1_U114 : component Dense_fmul_32ns_32ns_32_6_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_371_p0,
        din1 => grp_fu_371_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_371_p2);

    sitofp_32ns_32_7_no_dsp_1_U115 : component Dense_sitofp_32ns_32_7_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_377_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_377_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Load_and_Compute_fu_320_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Load_and_Compute_fu_320_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_1)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_0)))) then 
                    grp_Load_and_Compute_fu_320_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Load_and_Compute_fu_320_ap_ready = ap_const_logic_1)) then 
                    grp_Load_and_Compute_fu_320_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Write_Output_fu_359_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Write_Output_fu_359_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_1)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_0)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_1)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_0)))) then 
                    grp_Write_Output_fu_359_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Write_Output_fu_359_ap_ready = ap_const_logic_1)) then 
                    grp_Write_Output_fu_359_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    CHin_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    CHout_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Out_LP_now_fu_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                Out_LP_now_fu_210 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_boolean_0 = ap_block_state23_on_subcall_done))) then 
                Out_LP_now_fu_210 <= Out_LP_now_2_reg_1403;
            end if; 
        end if;
    end process;

    pp_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_boolean_0 = ap_block_state23_on_subcall_done))) then 
                pp_reg_295 <= ap_phi_mux_pp_1_phi_fu_311_p4;
            elsif (((grp_Load_and_Compute_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                pp_reg_295 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    relu_en_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = CHin_0_ack_out) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = CHin_0_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = CHin_0_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                CHin_0_data_reg <= CHin;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                CHin_read_reg_1218 <= CHin_0_data_reg;
                CHout_read_reg_1213 <= CHout_0_data_reg;
                relu_en_read_reg_1208 <= relu_en_0_data_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = CHout_0_ack_out) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = CHout_0_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = CHout_0_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                CHout_0_data_reg <= CHout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                Out_LP_now_2_reg_1403 <= Out_LP_now_2_fu_1149_p2;
                trunc_ln241_reg_1395 <= trunc_ln241_fu_1139_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                Weight1_read_reg_1198 <= Weight1;
                Weight2_read_reg_1193 <= Weight2;
                Weight3_read_reg_1188 <= Weight3;
                Weight4_read_reg_1183 <= Weight4;
                bias_read_reg_1178 <= bias;
                feature_in_read_reg_1203 <= feature_in;
                feature_out_read_reg_1173 <= feature_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln241_reg_1390 <= add_ln241_fu_1126_p2;
                sub_reg_1385 <= sub_fu_1120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                add_ln242_reg_1408 <= add_ln242_fu_1155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                conv1_reg_1224 <= grp_fu_377_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                conv_reg_1229 <= grp_fu_377_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                data_V_3_reg_1246 <= data_V_3_fu_385_p1;
                dc_reg_1240 <= grp_fu_371_p2;
                icmp_ln21_1_reg_1267 <= icmp_ln21_1_fu_434_p2;
                p_Result_6_reg_1252 <= data_V_3_fu_385_p1(31 downto 31);
                trunc_ln368_1_reg_1277 <= trunc_ln368_1_fu_455_p1;
                xs_exp_V_10_reg_1260 <= data_V_3_fu_385_p1(30 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                data_V_reg_1282 <= data_V_fu_459_p1;
                icmp_ln1035_2_reg_1318 <= icmp_ln1035_2_fu_533_p2;
                icmp_ln1035_3_reg_1323 <= icmp_ln1035_3_fu_538_p2;
                icmp_ln21_reg_1303 <= icmp_ln21_fu_508_p2;
                p_Result_s_reg_1288 <= data_V_fu_459_p1(31 downto 31);
                select_ln1035_2_reg_1328 <= select_ln1035_2_fu_664_p3;
                trunc_ln368_reg_1313 <= trunc_ln368_fu_529_p1;
                xs_exp_V_8_reg_1296 <= data_V_fu_459_p1(30 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                dc_1_reg_1353 <= dc_1_fu_837_p3;
                p_Result_10_reg_1358 <= data_V_5_fu_843_p1(31 downto 31);
                val_1_reg_1363 <= val_1_fu_960_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                dc_2_reg_1234 <= grp_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                dc_3_reg_1348 <= dc_3_fu_821_p3;
                icmp_ln1035_1_reg_1338 <= icmp_ln1035_1_fu_677_p2;
                icmp_ln1035_reg_1333 <= icmp_ln1035_fu_672_p2;
                select_ln1035_reg_1343 <= select_ln1035_fu_803_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                p_Result_4_reg_1369 <= data_V_2_fu_968_p1(31 downto 31);
                result_V_7_reg_1380 <= result_V_7_fu_1098_p3;
                val_reg_1374 <= val_fu_1085_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (relu_en_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (relu_en_0_vld_reg = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (relu_en_0_vld_reg = ap_const_logic_0)))) then
                relu_en_0_data_reg <= relu_en;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state21, ap_CS_fsm_state22, icmp_ln241_fu_1144_p2, grp_Load_and_Compute_fu_320_ap_done, ap_CS_fsm_state23, ap_block_state23_on_subcall_done, ap_CS_fsm_state24, ap_block_state24_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_Load_and_Compute_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln241_fu_1144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_boolean_0 = ap_block_state23_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_boolean_0 = ap_block_state24_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    B1_ARVALID_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, icmp_ln241_fu_1144_p2, grp_Load_and_Compute_fu_320_m_axi_B1_ARVALID, ap_phi_mux_pp_phi_fu_299_p4, pp_reg_295, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_1)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            B1_ARVALID <= grp_Load_and_Compute_fu_320_m_axi_B1_ARVALID;
        else 
            B1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    B1_RREADY_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, icmp_ln241_fu_1144_p2, grp_Load_and_Compute_fu_320_m_axi_B1_RREADY, ap_phi_mux_pp_phi_fu_299_p4, pp_reg_295, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_1)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            B1_RREADY <= grp_Load_and_Compute_fu_320_m_axi_B1_RREADY;
        else 
            B1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    CHin_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state24, ap_block_state24_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_boolean_0 = ap_block_state24_on_subcall_done)))) then 
            CHin_0_ack_out <= ap_const_logic_1;
        else 
            CHin_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    CHout_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state24, ap_block_state24_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_boolean_0 = ap_block_state24_on_subcall_done)))) then 
            CHout_0_ack_out <= ap_const_logic_1;
        else 
            CHout_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    IN1_ARVALID_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, icmp_ln241_fu_1144_p2, grp_Load_and_Compute_fu_320_m_axi_IN1_ARVALID, ap_phi_mux_pp_phi_fu_299_p4, pp_reg_295, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_1)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            IN1_ARVALID <= grp_Load_and_Compute_fu_320_m_axi_IN1_ARVALID;
        else 
            IN1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    IN1_RREADY_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, icmp_ln241_fu_1144_p2, grp_Load_and_Compute_fu_320_m_axi_IN1_RREADY, ap_phi_mux_pp_phi_fu_299_p4, pp_reg_295, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_1)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            IN1_RREADY <= grp_Load_and_Compute_fu_320_m_axi_IN1_RREADY;
        else 
            IN1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUT1_AWVALID_assign_proc : process(ap_CS_fsm_state22, icmp_ln241_fu_1144_p2, grp_Write_Output_fu_359_m_axi_OUT1_AWVALID, ap_phi_mux_pp_phi_fu_299_p4, pp_reg_295, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_1)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_0)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_1)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            OUT1_AWVALID <= grp_Write_Output_fu_359_m_axi_OUT1_AWVALID;
        else 
            OUT1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUT1_BREADY_assign_proc : process(ap_CS_fsm_state22, icmp_ln241_fu_1144_p2, grp_Write_Output_fu_359_m_axi_OUT1_BREADY, ap_phi_mux_pp_phi_fu_299_p4, pp_reg_295, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_1)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_0)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_1)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            OUT1_BREADY <= grp_Write_Output_fu_359_m_axi_OUT1_BREADY;
        else 
            OUT1_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUT1_WVALID_assign_proc : process(ap_CS_fsm_state22, icmp_ln241_fu_1144_p2, grp_Write_Output_fu_359_m_axi_OUT1_WVALID, ap_phi_mux_pp_phi_fu_299_p4, pp_reg_295, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_1)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_0)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_1)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            OUT1_WVALID <= grp_Write_Output_fu_359_m_axi_OUT1_WVALID;
        else 
            OUT1_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    Out_LP_now_2_fu_1149_p2 <= std_logic_vector(unsigned(Out_LP_now_fu_210) + unsigned(ap_const_lv31_1));

    W1_ARVALID_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, icmp_ln241_fu_1144_p2, grp_Load_and_Compute_fu_320_m_axi_W1_ARVALID, ap_phi_mux_pp_phi_fu_299_p4, pp_reg_295, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_1)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            W1_ARVALID <= grp_Load_and_Compute_fu_320_m_axi_W1_ARVALID;
        else 
            W1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    W1_RREADY_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, icmp_ln241_fu_1144_p2, grp_Load_and_Compute_fu_320_m_axi_W1_RREADY, ap_phi_mux_pp_phi_fu_299_p4, pp_reg_295, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_1)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            W1_RREADY <= grp_Load_and_Compute_fu_320_m_axi_W1_RREADY;
        else 
            W1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    W2_ARVALID_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, icmp_ln241_fu_1144_p2, grp_Load_and_Compute_fu_320_m_axi_W2_ARVALID, ap_phi_mux_pp_phi_fu_299_p4, pp_reg_295, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_1)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            W2_ARVALID <= grp_Load_and_Compute_fu_320_m_axi_W2_ARVALID;
        else 
            W2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    W2_RREADY_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, icmp_ln241_fu_1144_p2, grp_Load_and_Compute_fu_320_m_axi_W2_RREADY, ap_phi_mux_pp_phi_fu_299_p4, pp_reg_295, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_1)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            W2_RREADY <= grp_Load_and_Compute_fu_320_m_axi_W2_RREADY;
        else 
            W2_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    W3_ARVALID_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, icmp_ln241_fu_1144_p2, grp_Load_and_Compute_fu_320_m_axi_W3_ARVALID, ap_phi_mux_pp_phi_fu_299_p4, pp_reg_295, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_1)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            W3_ARVALID <= grp_Load_and_Compute_fu_320_m_axi_W3_ARVALID;
        else 
            W3_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    W3_RREADY_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, icmp_ln241_fu_1144_p2, grp_Load_and_Compute_fu_320_m_axi_W3_RREADY, ap_phi_mux_pp_phi_fu_299_p4, pp_reg_295, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_1)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            W3_RREADY <= grp_Load_and_Compute_fu_320_m_axi_W3_RREADY;
        else 
            W3_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    W4_ARVALID_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, icmp_ln241_fu_1144_p2, grp_Load_and_Compute_fu_320_m_axi_W4_ARVALID, ap_phi_mux_pp_phi_fu_299_p4, pp_reg_295, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_1)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            W4_ARVALID <= grp_Load_and_Compute_fu_320_m_axi_W4_ARVALID;
        else 
            W4_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    W4_RREADY_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, icmp_ln241_fu_1144_p2, grp_Load_and_Compute_fu_320_m_axi_W4_RREADY, ap_phi_mux_pp_phi_fu_299_p4, pp_reg_295, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_1)) or ((icmp_ln241_fu_1144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22) and (ap_phi_mux_pp_phi_fu_299_p4 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            W4_RREADY <= grp_Load_and_Compute_fu_320_m_axi_W4_RREADY;
        else 
            W4_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    add_ln241_fu_1126_p2 <= std_logic_vector(unsigned(empty_fu_1116_p1) + unsigned(ap_const_lv27_7FFFFFF));
    add_ln242_fu_1155_p2 <= std_logic_vector(unsigned(trunc_ln241_fu_1139_p1) + unsigned(ap_const_lv27_1));
    add_ln346_1_fu_886_p2 <= std_logic_vector(unsigned(zext_ln346_1_fu_882_p1) + unsigned(ap_const_lv9_181));
    add_ln346_fu_1011_p2 <= std_logic_vector(unsigned(zext_ln346_fu_1007_p1) + unsigned(ap_const_lv9_181));
    and_ln1035_1_fu_816_p2 <= (xor_ln1035_1_fu_811_p2 and icmp_ln1035_3_reg_1323);
    and_ln1035_fu_832_p2 <= (xor_ln1035_fu_827_p2 and icmp_ln1035_1_reg_1338);
    and_ln21_1_fu_644_p2 <= (or_ln21_3_fu_640_p2 and icmp_ln1035_2_fu_533_p2);
    and_ln21_fu_783_p2 <= (or_ln21_1_fu_779_p2 and icmp_ln1035_fu_672_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;

    ap_ST_fsm_state21_blk_assign_proc : process(grp_Load_and_Compute_fu_320_ap_done)
    begin
        if ((grp_Load_and_Compute_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state21_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state21_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state22_blk <= ap_const_logic_0;

    ap_ST_fsm_state23_blk_assign_proc : process(ap_block_state23_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state23_on_subcall_done)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state24_blk_assign_proc : process(ap_block_state24_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state24_on_subcall_done)) then 
            ap_ST_fsm_state24_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state24_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state23_on_subcall_done_assign_proc : process(grp_Load_and_Compute_fu_320_ap_done, grp_Write_Output_fu_359_ap_done, pp_reg_295)
    begin
                ap_block_state23_on_subcall_done <= (((grp_Write_Output_fu_359_ap_done = ap_const_logic_0) and (pp_reg_295 = ap_const_lv1_1)) or ((grp_Write_Output_fu_359_ap_done = ap_const_logic_0) and (pp_reg_295 = ap_const_lv1_0)) or ((grp_Load_and_Compute_fu_320_ap_done = ap_const_logic_0) and (pp_reg_295 = ap_const_lv1_1)) or ((grp_Load_and_Compute_fu_320_ap_done = ap_const_logic_0) and (pp_reg_295 = ap_const_lv1_0)));
    end process;


    ap_block_state24_on_subcall_done_assign_proc : process(grp_Write_Output_fu_359_ap_done, pp_reg_295)
    begin
                ap_block_state24_on_subcall_done <= (((grp_Write_Output_fu_359_ap_done = ap_const_logic_0) and (pp_reg_295 = ap_const_lv1_1)) or ((grp_Write_Output_fu_359_ap_done = ap_const_logic_0) and (pp_reg_295 = ap_const_lv1_0)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state24, ap_block_state24_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_boolean_0 = ap_block_state24_on_subcall_done))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_pp_1_phi_fu_311_p4_assign_proc : process(pp_reg_295, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
            if ((pp_reg_295 = ap_const_lv1_1)) then 
                ap_phi_mux_pp_1_phi_fu_311_p4 <= ap_const_lv1_0;
            elsif ((pp_reg_295 = ap_const_lv1_0)) then 
                ap_phi_mux_pp_1_phi_fu_311_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_pp_1_phi_fu_311_p4 <= "X";
            end if;
        else 
            ap_phi_mux_pp_1_phi_fu_311_p4 <= "X";
        end if; 
    end process;

    ap_phi_mux_pp_phi_fu_299_p4 <= pp_reg_295;

    ap_ready_assign_proc : process(ap_CS_fsm_state24, ap_block_state24_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_boolean_0 = ap_block_state24_on_subcall_done))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln356_1_fu_775_p1 <= p_Result_3_fu_765_p4;
    bitcast_ln356_2_fu_554_p1 <= p_Result_7_fu_547_p3;
    bitcast_ln356_3_fu_636_p1 <= p_Result_9_fu_626_p4;
    bitcast_ln356_fu_693_p1 <= p_Result_1_fu_686_p3;
    data_V_1_fu_704_p2 <= std_logic_vector(unsigned(zext_ln30_fu_682_p1) + unsigned(p_Result_2_fu_697_p3));
    data_V_2_fu_968_p1 <= dc_1_reg_1353;
    data_V_3_fu_385_p1 <= dc_2_reg_1234;
    data_V_4_fu_565_p2 <= std_logic_vector(unsigned(zext_ln30_1_fu_543_p1) + unsigned(p_Result_8_fu_558_p3));
    data_V_5_fu_843_p1 <= dc_3_reg_1348;
    data_V_fu_459_p1 <= dc_reg_1240;
    dc_1_fu_837_p3 <= 
        dc_reg_1240 when (and_ln1035_fu_832_p2(0) = '1') else 
        select_ln1035_reg_1343;
    dc_3_fu_821_p3 <= 
        dc_2_reg_1234 when (and_ln1035_1_fu_816_p2(0) = '1') else 
        select_ln1035_2_reg_1328;
    empty_fu_1116_p1 <= result_V_fu_1110_p3(27 - 1 downto 0);

    grp_Load_and_Compute_fu_320_Out_LP_now_assign_proc : process(ap_CS_fsm_state21, add_ln242_reg_1408, pp_reg_295, ap_CS_fsm_state23)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            grp_Load_and_Compute_fu_320_Out_LP_now <= add_ln242_reg_1408;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_Load_and_Compute_fu_320_Out_LP_now <= ap_const_lv27_0;
        else 
            grp_Load_and_Compute_fu_320_Out_LP_now <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_Load_and_Compute_fu_320_ap_start <= grp_Load_and_Compute_fu_320_ap_start_reg;

    grp_Load_and_Compute_fu_320_output_buffer_q0_assign_proc : process(output_buffer0_V_q0, output_buffer1_V_q0, ap_CS_fsm_state21, pp_reg_295, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0))) then 
            grp_Load_and_Compute_fu_320_output_buffer_q0 <= output_buffer1_V_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)))) then 
            grp_Load_and_Compute_fu_320_output_buffer_q0 <= output_buffer0_V_q0;
        else 
            grp_Load_and_Compute_fu_320_output_buffer_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_Write_Output_fu_359_Out_LP_now_assign_proc : process(add_ln241_reg_1390, trunc_ln241_reg_1395, pp_reg_295, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_0)))) then 
            grp_Write_Output_fu_359_Out_LP_now <= add_ln241_reg_1390;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            grp_Write_Output_fu_359_Out_LP_now <= trunc_ln241_reg_1395;
        else 
            grp_Write_Output_fu_359_Out_LP_now <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_Write_Output_fu_359_ap_start <= grp_Write_Output_fu_359_ap_start_reg;

    grp_Write_Output_fu_359_output_buffer_q0_assign_proc : process(output_buffer0_V_q0, output_buffer1_V_q0, pp_reg_295, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)))) then 
            grp_Write_Output_fu_359_output_buffer_q0 <= output_buffer1_V_q0;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            grp_Write_Output_fu_359_output_buffer_q0 <= output_buffer0_V_q0;
        else 
            grp_Write_Output_fu_359_output_buffer_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_371_p0_assign_proc : process(conv1_reg_1224, conv_reg_1229, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_371_p0 <= conv_reg_1229;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_371_p0 <= conv1_reg_1224;
        else 
            grp_fu_371_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_371_p1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_371_p1 <= ap_const_lv32_3D000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_371_p1 <= ap_const_lv32_3C000000;
        else 
            grp_fu_371_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_377_p0_assign_proc : process(CHout_read_reg_1213, CHin_read_reg_1218, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_377_p0 <= CHout_read_reg_1213;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_377_p0 <= CHin_read_reg_1218;
        else 
            grp_fu_377_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln1035_1_fu_677_p2 <= "1" when (unsigned(xs_exp_V_8_reg_1296) > unsigned(ap_const_lv8_96)) else "0";
    icmp_ln1035_2_fu_533_p2 <= "1" when (unsigned(xs_exp_V_10_reg_1260) < unsigned(ap_const_lv8_7F)) else "0";
    icmp_ln1035_3_fu_538_p2 <= "1" when (unsigned(xs_exp_V_10_reg_1260) > unsigned(ap_const_lv8_96)) else "0";
    icmp_ln1035_fu_672_p2 <= "1" when (unsigned(xs_exp_V_8_reg_1296) < unsigned(ap_const_lv8_7F)) else "0";
    icmp_ln21_1_fu_434_p2 <= "1" when (tmp_2_i1_fu_426_p3 = ap_const_lv23_0) else "0";
    icmp_ln21_fu_508_p2 <= "1" when (tmp_2_i_fu_500_p3 = ap_const_lv23_0) else "0";
    icmp_ln241_fu_1144_p2 <= "1" when (signed(zext_ln241_fu_1135_p1) < signed(sub_reg_1385)) else "0";
    index_1_fu_440_p4 <= data_V_3_fu_385_p1(27 downto 23);
    index_fu_514_p4 <= data_V_fu_459_p1(27 downto 23);
    isNeg_1_fu_892_p3 <= add_ln346_1_fu_886_p2(8 downto 8);
    isNeg_fu_1017_p3 <= add_ln346_fu_1011_p2(8 downto 8);
    mantissa_1_fu_868_p4 <= ((ap_const_lv1_1 & p_Result_11_fu_864_p1) & ap_const_lv1_0);
    mantissa_fu_993_p4 <= ((ap_const_lv1_1 & p_Result_5_fu_989_p1) & ap_const_lv1_0);

    mask_table_address0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, zext_ln541_1_fu_450_p1, zext_ln541_fu_524_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            mask_table_address0 <= zext_ln541_fu_524_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            mask_table_address0 <= zext_ln541_1_fu_450_p1(5 - 1 downto 0);
        else 
            mask_table_address0 <= "XXXXX";
        end if; 
    end process;


    mask_table_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            mask_table_ce0 <= ap_const_logic_1;
        else 
            mask_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1035_1_fu_658_p2 <= (icmp_ln1035_3_fu_538_p2 or icmp_ln1035_2_fu_533_p2);
    or_ln1035_fu_797_p2 <= (icmp_ln1035_fu_672_p2 or icmp_ln1035_1_fu_677_p2);
    or_ln21_1_fu_779_p2 <= (p_Result_s_reg_1288 or icmp_ln21_reg_1303);
    or_ln21_2_fu_410_p2 <= (xs_exp_V_10_fu_396_p4 or trunc_ln21_1_fu_406_p1);
    or_ln21_3_fu_640_p2 <= (p_Result_6_reg_1252 or icmp_ln21_1_reg_1267);
    or_ln21_fu_484_p2 <= (xs_exp_V_8_fu_470_p4 or trunc_ln21_fu_480_p1);
    or_ln779_1_fu_581_p2 <= (data_V_4_fu_565_p2 or data_V_3_reg_1246);
    or_ln779_fu_720_p2 <= (data_V_reg_1282 or data_V_1_fu_704_p2);

    output_buffer0_V_address0_assign_proc : process(ap_CS_fsm_state21, grp_Load_and_Compute_fu_320_output_buffer_address0, grp_Write_Output_fu_359_output_buffer_address0, pp_reg_295, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            output_buffer0_V_address0 <= grp_Write_Output_fu_359_output_buffer_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)))) then 
            output_buffer0_V_address0 <= grp_Load_and_Compute_fu_320_output_buffer_address0;
        else 
            output_buffer0_V_address0 <= "XXXXX";
        end if; 
    end process;


    output_buffer0_V_address1_assign_proc : process(ap_CS_fsm_state21, grp_Load_and_Compute_fu_320_output_buffer_address1, grp_Write_Output_fu_359_output_buffer_address1, pp_reg_295, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            output_buffer0_V_address1 <= grp_Write_Output_fu_359_output_buffer_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)))) then 
            output_buffer0_V_address1 <= grp_Load_and_Compute_fu_320_output_buffer_address1;
        else 
            output_buffer0_V_address1 <= "XXXXX";
        end if; 
    end process;


    output_buffer0_V_ce0_assign_proc : process(ap_CS_fsm_state21, grp_Load_and_Compute_fu_320_output_buffer_ce0, grp_Write_Output_fu_359_output_buffer_ce0, pp_reg_295, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            output_buffer0_V_ce0 <= grp_Write_Output_fu_359_output_buffer_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)))) then 
            output_buffer0_V_ce0 <= grp_Load_and_Compute_fu_320_output_buffer_ce0;
        else 
            output_buffer0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_buffer0_V_ce1_assign_proc : process(ap_CS_fsm_state21, grp_Load_and_Compute_fu_320_output_buffer_ce1, grp_Write_Output_fu_359_output_buffer_ce1, pp_reg_295, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            output_buffer0_V_ce1 <= grp_Write_Output_fu_359_output_buffer_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)))) then 
            output_buffer0_V_ce1 <= grp_Load_and_Compute_fu_320_output_buffer_ce1;
        else 
            output_buffer0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_buffer0_V_d1_assign_proc : process(ap_CS_fsm_state21, grp_Load_and_Compute_fu_320_output_buffer_d1, grp_Write_Output_fu_359_output_buffer_d1, pp_reg_295, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            output_buffer0_V_d1 <= grp_Write_Output_fu_359_output_buffer_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)))) then 
            output_buffer0_V_d1 <= grp_Load_and_Compute_fu_320_output_buffer_d1;
        else 
            output_buffer0_V_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_buffer0_V_we1_assign_proc : process(ap_CS_fsm_state21, grp_Load_and_Compute_fu_320_output_buffer_we1, grp_Write_Output_fu_359_output_buffer_we1, pp_reg_295, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0)))) then 
            output_buffer0_V_we1 <= grp_Write_Output_fu_359_output_buffer_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)))) then 
            output_buffer0_V_we1 <= grp_Load_and_Compute_fu_320_output_buffer_we1;
        else 
            output_buffer0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    output_buffer1_V_address0_assign_proc : process(grp_Load_and_Compute_fu_320_output_buffer_address0, grp_Write_Output_fu_359_output_buffer_address0, pp_reg_295, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)))) then 
            output_buffer1_V_address0 <= grp_Write_Output_fu_359_output_buffer_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0))) then 
            output_buffer1_V_address0 <= grp_Load_and_Compute_fu_320_output_buffer_address0;
        else 
            output_buffer1_V_address0 <= "XXXXX";
        end if; 
    end process;


    output_buffer1_V_address1_assign_proc : process(grp_Load_and_Compute_fu_320_output_buffer_address1, grp_Write_Output_fu_359_output_buffer_address1, pp_reg_295, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)))) then 
            output_buffer1_V_address1 <= grp_Write_Output_fu_359_output_buffer_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0))) then 
            output_buffer1_V_address1 <= grp_Load_and_Compute_fu_320_output_buffer_address1;
        else 
            output_buffer1_V_address1 <= "XXXXX";
        end if; 
    end process;


    output_buffer1_V_ce0_assign_proc : process(grp_Load_and_Compute_fu_320_output_buffer_ce0, grp_Write_Output_fu_359_output_buffer_ce0, pp_reg_295, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)))) then 
            output_buffer1_V_ce0 <= grp_Write_Output_fu_359_output_buffer_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0))) then 
            output_buffer1_V_ce0 <= grp_Load_and_Compute_fu_320_output_buffer_ce0;
        else 
            output_buffer1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_buffer1_V_ce1_assign_proc : process(grp_Load_and_Compute_fu_320_output_buffer_ce1, grp_Write_Output_fu_359_output_buffer_ce1, pp_reg_295, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)))) then 
            output_buffer1_V_ce1 <= grp_Write_Output_fu_359_output_buffer_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0))) then 
            output_buffer1_V_ce1 <= grp_Load_and_Compute_fu_320_output_buffer_ce1;
        else 
            output_buffer1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_buffer1_V_d1_assign_proc : process(grp_Load_and_Compute_fu_320_output_buffer_d1, grp_Write_Output_fu_359_output_buffer_d1, pp_reg_295, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)))) then 
            output_buffer1_V_d1 <= grp_Write_Output_fu_359_output_buffer_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0))) then 
            output_buffer1_V_d1 <= grp_Load_and_Compute_fu_320_output_buffer_d1;
        else 
            output_buffer1_V_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_buffer1_V_we1_assign_proc : process(grp_Load_and_Compute_fu_320_output_buffer_we1, grp_Write_Output_fu_359_output_buffer_we1, pp_reg_295, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (pp_reg_295 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_1)))) then 
            output_buffer1_V_we1 <= grp_Write_Output_fu_359_output_buffer_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (pp_reg_295 = ap_const_lv1_0))) then 
            output_buffer1_V_we1 <= grp_Load_and_Compute_fu_320_output_buffer_we1;
        else 
            output_buffer1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_11_fu_864_p1 <= data_V_5_fu_843_p1(23 - 1 downto 0);
    p_Result_1_fu_686_p3 <= (p_Result_s_reg_1288 & ap_const_lv31_0);
    p_Result_2_fu_697_p3 <= (ap_const_lv1_0 & trunc_ln368_reg_1313);
    p_Result_3_fu_765_p4 <= ((xs_sign_V_1_fu_725_p3 & xs_exp_V_9_fu_733_p3) & xs_sig_V_4_fu_759_p2);
    p_Result_5_fu_989_p1 <= data_V_2_fu_968_p1(23 - 1 downto 0);
    p_Result_7_fu_547_p3 <= (p_Result_6_reg_1252 & ap_const_lv31_0);
    p_Result_8_fu_558_p3 <= (ap_const_lv1_0 & trunc_ln368_1_reg_1277);
    p_Result_9_fu_626_p4 <= ((xs_sign_V_5_fu_586_p3 & xs_exp_V_11_fu_594_p3) & xs_sig_V_5_fu_620_p2);
    r_V_1_fu_1057_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_1003_p1),to_integer(unsigned('0' & zext_ln1488_fu_1047_p1(31-1 downto 0)))));
    r_V_2_fu_926_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_1_fu_878_p1),to_integer(unsigned('0' & zext_ln1488_1_fu_922_p1(31-1 downto 0)))));
    r_V_3_fu_932_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_1_fu_878_p1),to_integer(unsigned('0' & zext_ln1488_1_fu_922_p1(31-1 downto 0)))));
    r_V_fu_1051_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_1003_p1),to_integer(unsigned('0' & zext_ln1488_fu_1047_p1(31-1 downto 0)))));

    relu_en_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state24, ap_block_state24_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_boolean_0 = ap_block_state24_on_subcall_done)))) then 
            relu_en_0_ack_out <= ap_const_logic_1;
        else 
            relu_en_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    result_V_2_fu_1105_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_reg_1374));
    result_V_6_fu_1093_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_1_reg_1363));
    result_V_7_fu_1098_p3 <= 
        result_V_6_fu_1093_p2 when (p_Result_10_reg_1358(0) = '1') else 
        val_1_reg_1363;
    result_V_fu_1110_p3 <= 
        result_V_2_fu_1105_p2 when (p_Result_4_reg_1369(0) = '1') else 
        val_reg_1374;
    select_ln1035_2_fu_664_p3 <= 
        select_ln21_1_fu_650_p3 when (or_ln1035_1_fu_658_p2(0) = '1') else 
        bitcast_ln356_3_fu_636_p1;
    select_ln1035_fu_803_p3 <= 
        select_ln21_fu_789_p3 when (or_ln1035_fu_797_p2(0) = '1') else 
        bitcast_ln356_1_fu_775_p1;
    select_ln21_1_fu_650_p3 <= 
        bitcast_ln356_2_fu_554_p1 when (and_ln21_1_fu_644_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln21_fu_789_p3 <= 
        bitcast_ln356_fu_693_p1 when (and_ln21_fu_783_p2(0) = '1') else 
        ap_const_lv32_3F800000;
        sext_ln1488_1_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_910_p3),32));

        sext_ln1488_fu_1043_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_1035_p3),32));

        sext_ln1512_1_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_1_fu_900_p2),9));

        sext_ln1512_fu_1031_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_1025_p2),9));

    sub_fu_1120_p2 <= std_logic_vector(unsigned(result_V_fu_1110_p3) + unsigned(ap_const_lv32_FFFFFFFF));
    sub_ln1512_1_fu_900_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_7_fu_854_p4));
    sub_ln1512_fu_1025_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_3_fu_979_p4));
    tmp_195_fu_950_p4 <= r_V_3_fu_932_p2(55 downto 24);
    tmp_1_i9_fu_416_p4 <= data_V_3_fu_385_p1(22 downto 8);
    tmp_1_i_fu_490_p4 <= data_V_fu_459_p1(22 downto 8);
    tmp_2_i1_fu_426_p3 <= (tmp_1_i9_fu_416_p4 & or_ln21_2_fu_410_p2);
    tmp_2_i_fu_500_p3 <= (tmp_1_i_fu_490_p4 & or_ln21_fu_484_p2);
    tmp_6_fu_938_p3 <= r_V_2_fu_926_p2(24 downto 24);
    tmp_fu_1063_p3 <= r_V_fu_1051_p2(24 downto 24);
    tmp_s_fu_1075_p4 <= r_V_1_fu_1057_p2(55 downto 24);
    trunc_ln21_1_fu_406_p1 <= data_V_3_fu_385_p1(8 - 1 downto 0);
    trunc_ln21_fu_480_p1 <= data_V_fu_459_p1(8 - 1 downto 0);
    trunc_ln241_fu_1139_p1 <= Out_LP_now_fu_210(27 - 1 downto 0);
    trunc_ln368_1_fu_455_p1 <= data_V_3_fu_385_p1(31 - 1 downto 0);
    trunc_ln368_fu_529_p1 <= data_V_fu_459_p1(31 - 1 downto 0);
    trunc_ln779_1_fu_742_p1 <= data_V_1_fu_704_p2(23 - 1 downto 0);
    trunc_ln779_2_fu_600_p1 <= data_V_3_reg_1246(23 - 1 downto 0);
    trunc_ln779_3_fu_603_p1 <= data_V_4_fu_565_p2(23 - 1 downto 0);
    trunc_ln779_fu_739_p1 <= data_V_reg_1282(23 - 1 downto 0);
    ush_1_fu_910_p3 <= 
        sext_ln1512_1_fu_906_p1 when (isNeg_1_fu_892_p3(0) = '1') else 
        add_ln346_1_fu_886_p2;
    ush_fu_1035_p3 <= 
        sext_ln1512_fu_1031_p1 when (isNeg_fu_1017_p3(0) = '1') else 
        add_ln346_fu_1011_p2;
    val_1_fu_960_p3 <= 
        zext_ln818_1_fu_946_p1 when (isNeg_1_fu_892_p3(0) = '1') else 
        tmp_195_fu_950_p4;
    val_fu_1085_p3 <= 
        zext_ln818_fu_1071_p1 when (isNeg_fu_1017_p3(0) = '1') else 
        tmp_s_fu_1075_p4;
    xor_ln1035_1_fu_811_p2 <= (icmp_ln1035_2_reg_1318 xor ap_const_lv1_1);
    xor_ln1035_fu_827_p2 <= (icmp_ln1035_reg_1333 xor ap_const_lv1_1);
    xor_ln1497_1_fu_614_p2 <= (mask_table_q0 xor ap_const_lv23_7FFFFF);
    xor_ln1497_fu_753_p2 <= (mask_table_q0 xor ap_const_lv23_7FFFFF);
    xs_exp_V_10_fu_396_p4 <= data_V_3_fu_385_p1(30 downto 23);
    xs_exp_V_11_fu_594_p3 <= 
        xs_exp_V_10_reg_1260 when (p_Result_6_reg_1252(0) = '1') else 
        xs_exp_V_5_fu_571_p4;
    xs_exp_V_3_fu_979_p4 <= data_V_2_fu_968_p1(30 downto 23);
    xs_exp_V_5_fu_571_p4 <= data_V_4_fu_565_p2(30 downto 23);
    xs_exp_V_7_fu_854_p4 <= data_V_5_fu_843_p1(30 downto 23);
    xs_exp_V_8_fu_470_p4 <= data_V_fu_459_p1(30 downto 23);
    xs_exp_V_9_fu_733_p3 <= 
        xs_exp_V_8_reg_1296 when (p_Result_s_reg_1288(0) = '1') else 
        xs_exp_V_fu_710_p4;
    xs_exp_V_fu_710_p4 <= data_V_1_fu_704_p2(30 downto 23);
    xs_sig_V_2_fu_607_p3 <= 
        trunc_ln779_2_fu_600_p1 when (p_Result_6_reg_1252(0) = '1') else 
        trunc_ln779_3_fu_603_p1;
    xs_sig_V_4_fu_759_p2 <= (xs_sig_V_fu_746_p3 and xor_ln1497_fu_753_p2);
    xs_sig_V_5_fu_620_p2 <= (xs_sig_V_2_fu_607_p3 and xor_ln1497_1_fu_614_p2);
    xs_sig_V_fu_746_p3 <= 
        trunc_ln779_fu_739_p1 when (p_Result_s_reg_1288(0) = '1') else 
        trunc_ln779_1_fu_742_p1;
    xs_sign_V_1_fu_725_p3 <= or_ln779_fu_720_p2(31 downto 31);
    xs_sign_V_5_fu_586_p3 <= or_ln779_1_fu_581_p2(31 downto 31);
    zext_ln1488_1_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_1_fu_918_p1),79));
    zext_ln1488_fu_1047_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_1043_p1),79));
    zext_ln15_1_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_868_p4),79));
    zext_ln15_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_993_p4),79));
    zext_ln241_fu_1135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Out_LP_now_fu_210),32));
    zext_ln30_1_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mask_table_q0),32));
    zext_ln30_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mask_table_q0),32));
    zext_ln346_1_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_7_fu_854_p4),9));
    zext_ln346_fu_1007_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_3_fu_979_p4),9));
    zext_ln541_1_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_1_fu_440_p4),64));
    zext_ln541_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_514_p4),64));
    zext_ln818_1_fu_946_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_938_p3),32));
    zext_ln818_fu_1071_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_1063_p3),32));
end behav;
