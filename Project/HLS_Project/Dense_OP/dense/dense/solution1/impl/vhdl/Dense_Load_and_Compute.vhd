-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Dense_Load_and_Compute is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_IN1_AWVALID : OUT STD_LOGIC;
    m_axi_IN1_AWREADY : IN STD_LOGIC;
    m_axi_IN1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_IN1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_IN1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_IN1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_IN1_WVALID : OUT STD_LOGIC;
    m_axi_IN1_WREADY : IN STD_LOGIC;
    m_axi_IN1_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_IN1_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN1_WLAST : OUT STD_LOGIC;
    m_axi_IN1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_IN1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_IN1_ARVALID : OUT STD_LOGIC;
    m_axi_IN1_ARREADY : IN STD_LOGIC;
    m_axi_IN1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_IN1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_IN1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_IN1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_IN1_RVALID : IN STD_LOGIC;
    m_axi_IN1_RREADY : OUT STD_LOGIC;
    m_axi_IN1_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_IN1_RLAST : IN STD_LOGIC;
    m_axi_IN1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_IN1_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_IN1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_IN1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN1_BVALID : IN STD_LOGIC;
    m_axi_IN1_BREADY : OUT STD_LOGIC;
    m_axi_IN1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_IN1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    feature_in : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_W1_AWVALID : OUT STD_LOGIC;
    m_axi_W1_AWREADY : IN STD_LOGIC;
    m_axi_W1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_W1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_W1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W1_WVALID : OUT STD_LOGIC;
    m_axi_W1_WREADY : IN STD_LOGIC;
    m_axi_W1_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_W1_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W1_WLAST : OUT STD_LOGIC;
    m_axi_W1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W1_ARVALID : OUT STD_LOGIC;
    m_axi_W1_ARREADY : IN STD_LOGIC;
    m_axi_W1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_W1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_W1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W1_RVALID : IN STD_LOGIC;
    m_axi_W1_RREADY : OUT STD_LOGIC;
    m_axi_W1_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_W1_RLAST : IN STD_LOGIC;
    m_axi_W1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W1_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_W1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W1_BVALID : IN STD_LOGIC;
    m_axi_W1_BREADY : OUT STD_LOGIC;
    m_axi_W1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    Weight1 : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_W2_AWVALID : OUT STD_LOGIC;
    m_axi_W2_AWREADY : IN STD_LOGIC;
    m_axi_W2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_W2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_W2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W2_WVALID : OUT STD_LOGIC;
    m_axi_W2_WREADY : IN STD_LOGIC;
    m_axi_W2_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_W2_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W2_WLAST : OUT STD_LOGIC;
    m_axi_W2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W2_ARVALID : OUT STD_LOGIC;
    m_axi_W2_ARREADY : IN STD_LOGIC;
    m_axi_W2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_W2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_W2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W2_RVALID : IN STD_LOGIC;
    m_axi_W2_RREADY : OUT STD_LOGIC;
    m_axi_W2_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_W2_RLAST : IN STD_LOGIC;
    m_axi_W2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W2_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_W2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W2_BVALID : IN STD_LOGIC;
    m_axi_W2_BREADY : OUT STD_LOGIC;
    m_axi_W2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    Weight2 : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_W3_AWVALID : OUT STD_LOGIC;
    m_axi_W3_AWREADY : IN STD_LOGIC;
    m_axi_W3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_W3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_W3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W3_WVALID : OUT STD_LOGIC;
    m_axi_W3_WREADY : IN STD_LOGIC;
    m_axi_W3_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_W3_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W3_WLAST : OUT STD_LOGIC;
    m_axi_W3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W3_ARVALID : OUT STD_LOGIC;
    m_axi_W3_ARREADY : IN STD_LOGIC;
    m_axi_W3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_W3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_W3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W3_RVALID : IN STD_LOGIC;
    m_axi_W3_RREADY : OUT STD_LOGIC;
    m_axi_W3_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_W3_RLAST : IN STD_LOGIC;
    m_axi_W3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W3_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_W3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W3_BVALID : IN STD_LOGIC;
    m_axi_W3_BREADY : OUT STD_LOGIC;
    m_axi_W3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    Weight3 : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_W4_AWVALID : OUT STD_LOGIC;
    m_axi_W4_AWREADY : IN STD_LOGIC;
    m_axi_W4_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_W4_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W4_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_W4_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W4_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W4_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W4_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W4_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W4_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W4_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W4_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W4_WVALID : OUT STD_LOGIC;
    m_axi_W4_WREADY : IN STD_LOGIC;
    m_axi_W4_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_W4_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W4_WLAST : OUT STD_LOGIC;
    m_axi_W4_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W4_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W4_ARVALID : OUT STD_LOGIC;
    m_axi_W4_ARREADY : IN STD_LOGIC;
    m_axi_W4_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_W4_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W4_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_W4_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W4_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W4_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W4_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W4_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W4_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W4_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W4_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W4_RVALID : IN STD_LOGIC;
    m_axi_W4_RREADY : OUT STD_LOGIC;
    m_axi_W4_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_W4_RLAST : IN STD_LOGIC;
    m_axi_W4_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W4_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_W4_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W4_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W4_BVALID : IN STD_LOGIC;
    m_axi_W4_BREADY : OUT STD_LOGIC;
    m_axi_W4_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W4_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W4_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    Weight4 : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_B1_AWVALID : OUT STD_LOGIC;
    m_axi_B1_AWREADY : IN STD_LOGIC;
    m_axi_B1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_B1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_B1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B1_WVALID : OUT STD_LOGIC;
    m_axi_B1_WREADY : IN STD_LOGIC;
    m_axi_B1_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_B1_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B1_WLAST : OUT STD_LOGIC;
    m_axi_B1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B1_ARVALID : OUT STD_LOGIC;
    m_axi_B1_ARREADY : IN STD_LOGIC;
    m_axi_B1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_B1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_B1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B1_RVALID : IN STD_LOGIC;
    m_axi_B1_RREADY : OUT STD_LOGIC;
    m_axi_B1_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_B1_RLAST : IN STD_LOGIC;
    m_axi_B1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B1_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_B1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B1_BVALID : IN STD_LOGIC;
    m_axi_B1_BREADY : OUT STD_LOGIC;
    m_axi_B1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    bias : IN STD_LOGIC_VECTOR (63 downto 0);
    output_buffer_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_buffer_ce0 : OUT STD_LOGIC;
    output_buffer_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_buffer_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_buffer_ce1 : OUT STD_LOGIC;
    output_buffer_we1 : OUT STD_LOGIC;
    output_buffer_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Out_LP_now : IN STD_LOGIC_VECTOR (26 downto 0);
    Input_Loops : IN STD_LOGIC_VECTOR (31 downto 0);
    CHin : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Dense_Load_and_Compute is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv25_1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bias_buffer_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal bias_buffer_V_ce0 : STD_LOGIC;
    signal bias_buffer_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_buffer_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal bias_buffer_V_ce1 : STD_LOGIC;
    signal bias_buffer_V_we1 : STD_LOGIC;
    signal Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_ce0 : STD_LOGIC;
    signal Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_ce1 : STD_LOGIC;
    signal Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_we1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_ce0 : STD_LOGIC;
    signal Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_ce1 : STD_LOGIC;
    signal Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_we1 : STD_LOGIC;
    signal Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_ce0 : STD_LOGIC;
    signal Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_ce1 : STD_LOGIC;
    signal Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_we1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_ce0 : STD_LOGIC;
    signal Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_ce1 : STD_LOGIC;
    signal Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_we1 : STD_LOGIC;
    signal Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal B1_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal B1_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal B1_addr_reg_481 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index_i_cast_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index_i_cast_reg_523 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal B1_addr_read_reg_538 : STD_LOGIC_VECTOR (15 downto 0);
    signal loop_index_i4_cast_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index_i4_cast_reg_543 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond93_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln185_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln185_reg_563 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal In_LP_now_2_fu_449_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal In_LP_now_2_reg_571 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln187_fu_459_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln187_reg_576 : STD_LOGIC_VECTOR (24 downto 0);
    signal icmp_ln185_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Input_fu_282_ap_start : STD_LOGIC;
    signal grp_Load_Input_fu_282_ap_done : STD_LOGIC;
    signal grp_Load_Input_fu_282_ap_idle : STD_LOGIC;
    signal grp_Load_Input_fu_282_ap_ready : STD_LOGIC;
    signal grp_Load_Input_fu_282_m_axi_IN1_AWVALID : STD_LOGIC;
    signal grp_Load_Input_fu_282_m_axi_IN1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_WVALID : STD_LOGIC;
    signal grp_Load_Input_fu_282_m_axi_IN1_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_WLAST : STD_LOGIC;
    signal grp_Load_Input_fu_282_m_axi_IN1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_ARVALID : STD_LOGIC;
    signal grp_Load_Input_fu_282_m_axi_IN1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Input_fu_282_m_axi_IN1_RREADY : STD_LOGIC;
    signal grp_Load_Input_fu_282_m_axi_IN1_BREADY : STD_LOGIC;
    signal grp_Load_Input_fu_282_input_buffer_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Load_Input_fu_282_input_buffer_ce1 : STD_LOGIC;
    signal grp_Load_Input_fu_282_input_buffer_we1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Load_Input_fu_282_input_buffer_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_Input_fu_282_In_LP_now : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_Load_Weight_fu_295_ap_start : STD_LOGIC;
    signal grp_Load_Weight_fu_295_ap_done : STD_LOGIC;
    signal grp_Load_Weight_fu_295_ap_idle : STD_LOGIC;
    signal grp_Load_Weight_fu_295_ap_ready : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W1_AWVALID : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_WVALID : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W1_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_WLAST : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_ARVALID : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W1_RREADY : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W1_BREADY : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W2_AWVALID : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_WVALID : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W2_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_WLAST : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_ARVALID : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W2_RREADY : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W2_BREADY : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W3_AWVALID : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W3_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_WVALID : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W3_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_WLAST : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W3_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_ARVALID : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W3_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W3_RREADY : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W3_BREADY : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W4_AWVALID : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W4_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_WVALID : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W4_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_WLAST : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W4_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_ARVALID : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W4_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_Weight_fu_295_m_axi_W4_RREADY : STD_LOGIC;
    signal grp_Load_Weight_fu_295_m_axi_W4_BREADY : STD_LOGIC;
    signal grp_Load_Weight_fu_295_weight_buffer_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Load_Weight_fu_295_weight_buffer_ce1 : STD_LOGIC;
    signal grp_Load_Weight_fu_295_weight_buffer_we1 : STD_LOGIC;
    signal grp_Load_Weight_fu_295_weight_buffer_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Load_Weight_fu_295_In_LP_now : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_Compute_fu_318_ap_start : STD_LOGIC;
    signal grp_Compute_fu_318_ap_done : STD_LOGIC;
    signal grp_Compute_fu_318_ap_idle : STD_LOGIC;
    signal grp_Compute_fu_318_ap_ready : STD_LOGIC;
    signal grp_Compute_fu_318_input_buffer_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Compute_fu_318_input_buffer_ce0 : STD_LOGIC;
    signal grp_Compute_fu_318_input_buffer_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Compute_fu_318_input_buffer_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Compute_fu_318_input_buffer_ce1 : STD_LOGIC;
    signal grp_Compute_fu_318_input_buffer_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Compute_fu_318_weight_buffer_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Compute_fu_318_weight_buffer_ce0 : STD_LOGIC;
    signal grp_Compute_fu_318_weight_buffer_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Compute_fu_318_weight_buffer_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Compute_fu_318_weight_buffer_ce1 : STD_LOGIC;
    signal grp_Compute_fu_318_weight_buffer_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Compute_fu_318_output_buffer_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Compute_fu_318_output_buffer_ce0 : STD_LOGIC;
    signal grp_Compute_fu_318_output_buffer_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Compute_fu_318_output_buffer_ce1 : STD_LOGIC;
    signal grp_Compute_fu_318_output_buffer_we1 : STD_LOGIC;
    signal grp_Compute_fu_318_output_buffer_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_pp_phi_fu_261_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal pp_reg_257 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state15_on_subcall_done : BOOLEAN;
    signal ap_phi_mux_pp_1_phi_fu_273_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_state18_on_subcall_done : BOOLEAN;
    signal grp_Load_Input_fu_282_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_Load_Weight_fu_295_ap_start_reg : STD_LOGIC := '0';
    signal grp_Compute_fu_318_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sext_ln7_1_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index_i_fu_136 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_215_fu_386_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond104_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_index_i4_fu_140 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_217_fu_416_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal In_LP_now_fu_144 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln7_fu_330_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln7_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln7_fu_342_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln7_fu_348_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln185_fu_440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln193_fu_455_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_block_state20_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Dense_Load_Input IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_IN1_AWVALID : OUT STD_LOGIC;
        m_axi_IN1_AWREADY : IN STD_LOGIC;
        m_axi_IN1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_IN1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_IN1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_IN1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_IN1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_IN1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_IN1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_IN1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_IN1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_IN1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_IN1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_IN1_WVALID : OUT STD_LOGIC;
        m_axi_IN1_WREADY : IN STD_LOGIC;
        m_axi_IN1_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_IN1_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_IN1_WLAST : OUT STD_LOGIC;
        m_axi_IN1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_IN1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_IN1_ARVALID : OUT STD_LOGIC;
        m_axi_IN1_ARREADY : IN STD_LOGIC;
        m_axi_IN1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_IN1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_IN1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_IN1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_IN1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_IN1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_IN1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_IN1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_IN1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_IN1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_IN1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_IN1_RVALID : IN STD_LOGIC;
        m_axi_IN1_RREADY : OUT STD_LOGIC;
        m_axi_IN1_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_IN1_RLAST : IN STD_LOGIC;
        m_axi_IN1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_IN1_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_IN1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_IN1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_IN1_BVALID : IN STD_LOGIC;
        m_axi_IN1_BREADY : OUT STD_LOGIC;
        m_axi_IN1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_IN1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_IN1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        feature_in : IN STD_LOGIC_VECTOR (63 downto 0);
        input_buffer_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_buffer_ce1 : OUT STD_LOGIC;
        input_buffer_we1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_buffer_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        In_LP_now : IN STD_LOGIC_VECTOR (24 downto 0);
        CHin : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Dense_Load_Weight IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_W1_AWVALID : OUT STD_LOGIC;
        m_axi_W1_AWREADY : IN STD_LOGIC;
        m_axi_W1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W1_WVALID : OUT STD_LOGIC;
        m_axi_W1_WREADY : IN STD_LOGIC;
        m_axi_W1_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_W1_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W1_WLAST : OUT STD_LOGIC;
        m_axi_W1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W1_ARVALID : OUT STD_LOGIC;
        m_axi_W1_ARREADY : IN STD_LOGIC;
        m_axi_W1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W1_RVALID : IN STD_LOGIC;
        m_axi_W1_RREADY : OUT STD_LOGIC;
        m_axi_W1_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_W1_RLAST : IN STD_LOGIC;
        m_axi_W1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W1_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_W1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W1_BVALID : IN STD_LOGIC;
        m_axi_W1_BREADY : OUT STD_LOGIC;
        m_axi_W1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W2_AWVALID : OUT STD_LOGIC;
        m_axi_W2_AWREADY : IN STD_LOGIC;
        m_axi_W2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W2_WVALID : OUT STD_LOGIC;
        m_axi_W2_WREADY : IN STD_LOGIC;
        m_axi_W2_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_W2_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W2_WLAST : OUT STD_LOGIC;
        m_axi_W2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W2_ARVALID : OUT STD_LOGIC;
        m_axi_W2_ARREADY : IN STD_LOGIC;
        m_axi_W2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W2_RVALID : IN STD_LOGIC;
        m_axi_W2_RREADY : OUT STD_LOGIC;
        m_axi_W2_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_W2_RLAST : IN STD_LOGIC;
        m_axi_W2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W2_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_W2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W2_BVALID : IN STD_LOGIC;
        m_axi_W2_BREADY : OUT STD_LOGIC;
        m_axi_W2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W3_AWVALID : OUT STD_LOGIC;
        m_axi_W3_AWREADY : IN STD_LOGIC;
        m_axi_W3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W3_WVALID : OUT STD_LOGIC;
        m_axi_W3_WREADY : IN STD_LOGIC;
        m_axi_W3_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_W3_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W3_WLAST : OUT STD_LOGIC;
        m_axi_W3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W3_ARVALID : OUT STD_LOGIC;
        m_axi_W3_ARREADY : IN STD_LOGIC;
        m_axi_W3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W3_RVALID : IN STD_LOGIC;
        m_axi_W3_RREADY : OUT STD_LOGIC;
        m_axi_W3_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_W3_RLAST : IN STD_LOGIC;
        m_axi_W3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W3_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_W3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W3_BVALID : IN STD_LOGIC;
        m_axi_W3_BREADY : OUT STD_LOGIC;
        m_axi_W3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W4_AWVALID : OUT STD_LOGIC;
        m_axi_W4_AWREADY : IN STD_LOGIC;
        m_axi_W4_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W4_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W4_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W4_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W4_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W4_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W4_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W4_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W4_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W4_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W4_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W4_WVALID : OUT STD_LOGIC;
        m_axi_W4_WREADY : IN STD_LOGIC;
        m_axi_W4_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_W4_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W4_WLAST : OUT STD_LOGIC;
        m_axi_W4_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W4_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W4_ARVALID : OUT STD_LOGIC;
        m_axi_W4_ARREADY : IN STD_LOGIC;
        m_axi_W4_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_W4_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W4_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W4_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W4_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W4_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W4_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W4_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W4_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W4_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W4_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W4_RVALID : IN STD_LOGIC;
        m_axi_W4_RREADY : OUT STD_LOGIC;
        m_axi_W4_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_W4_RLAST : IN STD_LOGIC;
        m_axi_W4_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W4_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_W4_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W4_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W4_BVALID : IN STD_LOGIC;
        m_axi_W4_BREADY : OUT STD_LOGIC;
        m_axi_W4_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W4_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W4_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        Weight1 : IN STD_LOGIC_VECTOR (63 downto 0);
        Weight2 : IN STD_LOGIC_VECTOR (63 downto 0);
        Weight3 : IN STD_LOGIC_VECTOR (63 downto 0);
        Weight4 : IN STD_LOGIC_VECTOR (63 downto 0);
        weight_buffer_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        weight_buffer_ce1 : OUT STD_LOGIC;
        weight_buffer_we1 : OUT STD_LOGIC;
        weight_buffer_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        Out_LP_now : IN STD_LOGIC_VECTOR (26 downto 0);
        In_LP_now : IN STD_LOGIC_VECTOR (24 downto 0);
        CHin : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Dense_Compute IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_buffer_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_buffer_ce0 : OUT STD_LOGIC;
        input_buffer_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        input_buffer_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_buffer_ce1 : OUT STD_LOGIC;
        input_buffer_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        weight_buffer_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        weight_buffer_ce0 : OUT STD_LOGIC;
        weight_buffer_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        weight_buffer_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        weight_buffer_ce1 : OUT STD_LOGIC;
        weight_buffer_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        output_buffer_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_buffer_ce0 : OUT STD_LOGIC;
        output_buffer_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_buffer_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_buffer_ce1 : OUT STD_LOGIC;
        output_buffer_we1 : OUT STD_LOGIC;
        output_buffer_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Dense_Load_and_Compute_bias_buffer_V_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Dense_Load_and_Compute_Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC_VECTOR (7 downto 0);
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Dense_Load_and_Compute_Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    bias_buffer_V_U : component Dense_Load_and_Compute_bias_buffer_V_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bias_buffer_V_address0,
        ce0 => bias_buffer_V_ce0,
        q0 => bias_buffer_V_q0,
        address1 => bias_buffer_V_address1,
        ce1 => bias_buffer_V_ce1,
        we1 => bias_buffer_V_we1,
        d1 => B1_addr_read_reg_538);

    Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_U : component Dense_Load_and_Compute_Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixebkb
    generic map (
        DataWidth => 64,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_Compute_fu_318_input_buffer_address0,
        ce0 => Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_ce0,
        q0 => Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_q0,
        address1 => Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_address1,
        ce1 => Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_ce1,
        we1 => Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_we1,
        d1 => grp_Load_Input_fu_282_input_buffer_d1,
        q1 => Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_q1);

    Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_U : component Dense_Load_and_Compute_Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixecud
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_Compute_fu_318_weight_buffer_address0,
        ce0 => Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_ce0,
        q0 => Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_q0,
        address1 => Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_address1,
        ce1 => Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_ce1,
        we1 => Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_we1,
        d1 => grp_Load_Weight_fu_295_weight_buffer_d1,
        q1 => Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_q1);

    Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_U : component Dense_Load_and_Compute_Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixebkb
    generic map (
        DataWidth => 64,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_Compute_fu_318_input_buffer_address0,
        ce0 => Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_ce0,
        q0 => Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_q0,
        address1 => Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_address1,
        ce1 => Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_ce1,
        we1 => Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_we1,
        d1 => grp_Load_Input_fu_282_input_buffer_d1,
        q1 => Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_q1);

    Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_U : component Dense_Load_and_Compute_Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixecud
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_Compute_fu_318_weight_buffer_address0,
        ce0 => Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_ce0,
        q0 => Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_q0,
        address1 => Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_address1,
        ce1 => Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_ce1,
        we1 => Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_we1,
        d1 => grp_Load_Weight_fu_295_weight_buffer_d1,
        q1 => Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_q1);

    grp_Load_Input_fu_282 : component Dense_Load_Input
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Load_Input_fu_282_ap_start,
        ap_done => grp_Load_Input_fu_282_ap_done,
        ap_idle => grp_Load_Input_fu_282_ap_idle,
        ap_ready => grp_Load_Input_fu_282_ap_ready,
        m_axi_IN1_AWVALID => grp_Load_Input_fu_282_m_axi_IN1_AWVALID,
        m_axi_IN1_AWREADY => ap_const_logic_0,
        m_axi_IN1_AWADDR => grp_Load_Input_fu_282_m_axi_IN1_AWADDR,
        m_axi_IN1_AWID => grp_Load_Input_fu_282_m_axi_IN1_AWID,
        m_axi_IN1_AWLEN => grp_Load_Input_fu_282_m_axi_IN1_AWLEN,
        m_axi_IN1_AWSIZE => grp_Load_Input_fu_282_m_axi_IN1_AWSIZE,
        m_axi_IN1_AWBURST => grp_Load_Input_fu_282_m_axi_IN1_AWBURST,
        m_axi_IN1_AWLOCK => grp_Load_Input_fu_282_m_axi_IN1_AWLOCK,
        m_axi_IN1_AWCACHE => grp_Load_Input_fu_282_m_axi_IN1_AWCACHE,
        m_axi_IN1_AWPROT => grp_Load_Input_fu_282_m_axi_IN1_AWPROT,
        m_axi_IN1_AWQOS => grp_Load_Input_fu_282_m_axi_IN1_AWQOS,
        m_axi_IN1_AWREGION => grp_Load_Input_fu_282_m_axi_IN1_AWREGION,
        m_axi_IN1_AWUSER => grp_Load_Input_fu_282_m_axi_IN1_AWUSER,
        m_axi_IN1_WVALID => grp_Load_Input_fu_282_m_axi_IN1_WVALID,
        m_axi_IN1_WREADY => ap_const_logic_0,
        m_axi_IN1_WDATA => grp_Load_Input_fu_282_m_axi_IN1_WDATA,
        m_axi_IN1_WSTRB => grp_Load_Input_fu_282_m_axi_IN1_WSTRB,
        m_axi_IN1_WLAST => grp_Load_Input_fu_282_m_axi_IN1_WLAST,
        m_axi_IN1_WID => grp_Load_Input_fu_282_m_axi_IN1_WID,
        m_axi_IN1_WUSER => grp_Load_Input_fu_282_m_axi_IN1_WUSER,
        m_axi_IN1_ARVALID => grp_Load_Input_fu_282_m_axi_IN1_ARVALID,
        m_axi_IN1_ARREADY => m_axi_IN1_ARREADY,
        m_axi_IN1_ARADDR => grp_Load_Input_fu_282_m_axi_IN1_ARADDR,
        m_axi_IN1_ARID => grp_Load_Input_fu_282_m_axi_IN1_ARID,
        m_axi_IN1_ARLEN => grp_Load_Input_fu_282_m_axi_IN1_ARLEN,
        m_axi_IN1_ARSIZE => grp_Load_Input_fu_282_m_axi_IN1_ARSIZE,
        m_axi_IN1_ARBURST => grp_Load_Input_fu_282_m_axi_IN1_ARBURST,
        m_axi_IN1_ARLOCK => grp_Load_Input_fu_282_m_axi_IN1_ARLOCK,
        m_axi_IN1_ARCACHE => grp_Load_Input_fu_282_m_axi_IN1_ARCACHE,
        m_axi_IN1_ARPROT => grp_Load_Input_fu_282_m_axi_IN1_ARPROT,
        m_axi_IN1_ARQOS => grp_Load_Input_fu_282_m_axi_IN1_ARQOS,
        m_axi_IN1_ARREGION => grp_Load_Input_fu_282_m_axi_IN1_ARREGION,
        m_axi_IN1_ARUSER => grp_Load_Input_fu_282_m_axi_IN1_ARUSER,
        m_axi_IN1_RVALID => m_axi_IN1_RVALID,
        m_axi_IN1_RREADY => grp_Load_Input_fu_282_m_axi_IN1_RREADY,
        m_axi_IN1_RDATA => m_axi_IN1_RDATA,
        m_axi_IN1_RLAST => m_axi_IN1_RLAST,
        m_axi_IN1_RID => m_axi_IN1_RID,
        m_axi_IN1_RFIFONUM => m_axi_IN1_RFIFONUM,
        m_axi_IN1_RUSER => m_axi_IN1_RUSER,
        m_axi_IN1_RRESP => m_axi_IN1_RRESP,
        m_axi_IN1_BVALID => ap_const_logic_0,
        m_axi_IN1_BREADY => grp_Load_Input_fu_282_m_axi_IN1_BREADY,
        m_axi_IN1_BRESP => ap_const_lv2_0,
        m_axi_IN1_BID => ap_const_lv1_0,
        m_axi_IN1_BUSER => ap_const_lv1_0,
        feature_in => feature_in,
        input_buffer_address1 => grp_Load_Input_fu_282_input_buffer_address1,
        input_buffer_ce1 => grp_Load_Input_fu_282_input_buffer_ce1,
        input_buffer_we1 => grp_Load_Input_fu_282_input_buffer_we1,
        input_buffer_d1 => grp_Load_Input_fu_282_input_buffer_d1,
        In_LP_now => grp_Load_Input_fu_282_In_LP_now,
        CHin => CHin);

    grp_Load_Weight_fu_295 : component Dense_Load_Weight
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Load_Weight_fu_295_ap_start,
        ap_done => grp_Load_Weight_fu_295_ap_done,
        ap_idle => grp_Load_Weight_fu_295_ap_idle,
        ap_ready => grp_Load_Weight_fu_295_ap_ready,
        m_axi_W1_AWVALID => grp_Load_Weight_fu_295_m_axi_W1_AWVALID,
        m_axi_W1_AWREADY => ap_const_logic_0,
        m_axi_W1_AWADDR => grp_Load_Weight_fu_295_m_axi_W1_AWADDR,
        m_axi_W1_AWID => grp_Load_Weight_fu_295_m_axi_W1_AWID,
        m_axi_W1_AWLEN => grp_Load_Weight_fu_295_m_axi_W1_AWLEN,
        m_axi_W1_AWSIZE => grp_Load_Weight_fu_295_m_axi_W1_AWSIZE,
        m_axi_W1_AWBURST => grp_Load_Weight_fu_295_m_axi_W1_AWBURST,
        m_axi_W1_AWLOCK => grp_Load_Weight_fu_295_m_axi_W1_AWLOCK,
        m_axi_W1_AWCACHE => grp_Load_Weight_fu_295_m_axi_W1_AWCACHE,
        m_axi_W1_AWPROT => grp_Load_Weight_fu_295_m_axi_W1_AWPROT,
        m_axi_W1_AWQOS => grp_Load_Weight_fu_295_m_axi_W1_AWQOS,
        m_axi_W1_AWREGION => grp_Load_Weight_fu_295_m_axi_W1_AWREGION,
        m_axi_W1_AWUSER => grp_Load_Weight_fu_295_m_axi_W1_AWUSER,
        m_axi_W1_WVALID => grp_Load_Weight_fu_295_m_axi_W1_WVALID,
        m_axi_W1_WREADY => ap_const_logic_0,
        m_axi_W1_WDATA => grp_Load_Weight_fu_295_m_axi_W1_WDATA,
        m_axi_W1_WSTRB => grp_Load_Weight_fu_295_m_axi_W1_WSTRB,
        m_axi_W1_WLAST => grp_Load_Weight_fu_295_m_axi_W1_WLAST,
        m_axi_W1_WID => grp_Load_Weight_fu_295_m_axi_W1_WID,
        m_axi_W1_WUSER => grp_Load_Weight_fu_295_m_axi_W1_WUSER,
        m_axi_W1_ARVALID => grp_Load_Weight_fu_295_m_axi_W1_ARVALID,
        m_axi_W1_ARREADY => m_axi_W1_ARREADY,
        m_axi_W1_ARADDR => grp_Load_Weight_fu_295_m_axi_W1_ARADDR,
        m_axi_W1_ARID => grp_Load_Weight_fu_295_m_axi_W1_ARID,
        m_axi_W1_ARLEN => grp_Load_Weight_fu_295_m_axi_W1_ARLEN,
        m_axi_W1_ARSIZE => grp_Load_Weight_fu_295_m_axi_W1_ARSIZE,
        m_axi_W1_ARBURST => grp_Load_Weight_fu_295_m_axi_W1_ARBURST,
        m_axi_W1_ARLOCK => grp_Load_Weight_fu_295_m_axi_W1_ARLOCK,
        m_axi_W1_ARCACHE => grp_Load_Weight_fu_295_m_axi_W1_ARCACHE,
        m_axi_W1_ARPROT => grp_Load_Weight_fu_295_m_axi_W1_ARPROT,
        m_axi_W1_ARQOS => grp_Load_Weight_fu_295_m_axi_W1_ARQOS,
        m_axi_W1_ARREGION => grp_Load_Weight_fu_295_m_axi_W1_ARREGION,
        m_axi_W1_ARUSER => grp_Load_Weight_fu_295_m_axi_W1_ARUSER,
        m_axi_W1_RVALID => m_axi_W1_RVALID,
        m_axi_W1_RREADY => grp_Load_Weight_fu_295_m_axi_W1_RREADY,
        m_axi_W1_RDATA => m_axi_W1_RDATA,
        m_axi_W1_RLAST => m_axi_W1_RLAST,
        m_axi_W1_RID => m_axi_W1_RID,
        m_axi_W1_RFIFONUM => m_axi_W1_RFIFONUM,
        m_axi_W1_RUSER => m_axi_W1_RUSER,
        m_axi_W1_RRESP => m_axi_W1_RRESP,
        m_axi_W1_BVALID => ap_const_logic_0,
        m_axi_W1_BREADY => grp_Load_Weight_fu_295_m_axi_W1_BREADY,
        m_axi_W1_BRESP => ap_const_lv2_0,
        m_axi_W1_BID => ap_const_lv1_0,
        m_axi_W1_BUSER => ap_const_lv1_0,
        m_axi_W2_AWVALID => grp_Load_Weight_fu_295_m_axi_W2_AWVALID,
        m_axi_W2_AWREADY => ap_const_logic_0,
        m_axi_W2_AWADDR => grp_Load_Weight_fu_295_m_axi_W2_AWADDR,
        m_axi_W2_AWID => grp_Load_Weight_fu_295_m_axi_W2_AWID,
        m_axi_W2_AWLEN => grp_Load_Weight_fu_295_m_axi_W2_AWLEN,
        m_axi_W2_AWSIZE => grp_Load_Weight_fu_295_m_axi_W2_AWSIZE,
        m_axi_W2_AWBURST => grp_Load_Weight_fu_295_m_axi_W2_AWBURST,
        m_axi_W2_AWLOCK => grp_Load_Weight_fu_295_m_axi_W2_AWLOCK,
        m_axi_W2_AWCACHE => grp_Load_Weight_fu_295_m_axi_W2_AWCACHE,
        m_axi_W2_AWPROT => grp_Load_Weight_fu_295_m_axi_W2_AWPROT,
        m_axi_W2_AWQOS => grp_Load_Weight_fu_295_m_axi_W2_AWQOS,
        m_axi_W2_AWREGION => grp_Load_Weight_fu_295_m_axi_W2_AWREGION,
        m_axi_W2_AWUSER => grp_Load_Weight_fu_295_m_axi_W2_AWUSER,
        m_axi_W2_WVALID => grp_Load_Weight_fu_295_m_axi_W2_WVALID,
        m_axi_W2_WREADY => ap_const_logic_0,
        m_axi_W2_WDATA => grp_Load_Weight_fu_295_m_axi_W2_WDATA,
        m_axi_W2_WSTRB => grp_Load_Weight_fu_295_m_axi_W2_WSTRB,
        m_axi_W2_WLAST => grp_Load_Weight_fu_295_m_axi_W2_WLAST,
        m_axi_W2_WID => grp_Load_Weight_fu_295_m_axi_W2_WID,
        m_axi_W2_WUSER => grp_Load_Weight_fu_295_m_axi_W2_WUSER,
        m_axi_W2_ARVALID => grp_Load_Weight_fu_295_m_axi_W2_ARVALID,
        m_axi_W2_ARREADY => m_axi_W2_ARREADY,
        m_axi_W2_ARADDR => grp_Load_Weight_fu_295_m_axi_W2_ARADDR,
        m_axi_W2_ARID => grp_Load_Weight_fu_295_m_axi_W2_ARID,
        m_axi_W2_ARLEN => grp_Load_Weight_fu_295_m_axi_W2_ARLEN,
        m_axi_W2_ARSIZE => grp_Load_Weight_fu_295_m_axi_W2_ARSIZE,
        m_axi_W2_ARBURST => grp_Load_Weight_fu_295_m_axi_W2_ARBURST,
        m_axi_W2_ARLOCK => grp_Load_Weight_fu_295_m_axi_W2_ARLOCK,
        m_axi_W2_ARCACHE => grp_Load_Weight_fu_295_m_axi_W2_ARCACHE,
        m_axi_W2_ARPROT => grp_Load_Weight_fu_295_m_axi_W2_ARPROT,
        m_axi_W2_ARQOS => grp_Load_Weight_fu_295_m_axi_W2_ARQOS,
        m_axi_W2_ARREGION => grp_Load_Weight_fu_295_m_axi_W2_ARREGION,
        m_axi_W2_ARUSER => grp_Load_Weight_fu_295_m_axi_W2_ARUSER,
        m_axi_W2_RVALID => m_axi_W2_RVALID,
        m_axi_W2_RREADY => grp_Load_Weight_fu_295_m_axi_W2_RREADY,
        m_axi_W2_RDATA => m_axi_W2_RDATA,
        m_axi_W2_RLAST => m_axi_W2_RLAST,
        m_axi_W2_RID => m_axi_W2_RID,
        m_axi_W2_RFIFONUM => m_axi_W2_RFIFONUM,
        m_axi_W2_RUSER => m_axi_W2_RUSER,
        m_axi_W2_RRESP => m_axi_W2_RRESP,
        m_axi_W2_BVALID => ap_const_logic_0,
        m_axi_W2_BREADY => grp_Load_Weight_fu_295_m_axi_W2_BREADY,
        m_axi_W2_BRESP => ap_const_lv2_0,
        m_axi_W2_BID => ap_const_lv1_0,
        m_axi_W2_BUSER => ap_const_lv1_0,
        m_axi_W3_AWVALID => grp_Load_Weight_fu_295_m_axi_W3_AWVALID,
        m_axi_W3_AWREADY => ap_const_logic_0,
        m_axi_W3_AWADDR => grp_Load_Weight_fu_295_m_axi_W3_AWADDR,
        m_axi_W3_AWID => grp_Load_Weight_fu_295_m_axi_W3_AWID,
        m_axi_W3_AWLEN => grp_Load_Weight_fu_295_m_axi_W3_AWLEN,
        m_axi_W3_AWSIZE => grp_Load_Weight_fu_295_m_axi_W3_AWSIZE,
        m_axi_W3_AWBURST => grp_Load_Weight_fu_295_m_axi_W3_AWBURST,
        m_axi_W3_AWLOCK => grp_Load_Weight_fu_295_m_axi_W3_AWLOCK,
        m_axi_W3_AWCACHE => grp_Load_Weight_fu_295_m_axi_W3_AWCACHE,
        m_axi_W3_AWPROT => grp_Load_Weight_fu_295_m_axi_W3_AWPROT,
        m_axi_W3_AWQOS => grp_Load_Weight_fu_295_m_axi_W3_AWQOS,
        m_axi_W3_AWREGION => grp_Load_Weight_fu_295_m_axi_W3_AWREGION,
        m_axi_W3_AWUSER => grp_Load_Weight_fu_295_m_axi_W3_AWUSER,
        m_axi_W3_WVALID => grp_Load_Weight_fu_295_m_axi_W3_WVALID,
        m_axi_W3_WREADY => ap_const_logic_0,
        m_axi_W3_WDATA => grp_Load_Weight_fu_295_m_axi_W3_WDATA,
        m_axi_W3_WSTRB => grp_Load_Weight_fu_295_m_axi_W3_WSTRB,
        m_axi_W3_WLAST => grp_Load_Weight_fu_295_m_axi_W3_WLAST,
        m_axi_W3_WID => grp_Load_Weight_fu_295_m_axi_W3_WID,
        m_axi_W3_WUSER => grp_Load_Weight_fu_295_m_axi_W3_WUSER,
        m_axi_W3_ARVALID => grp_Load_Weight_fu_295_m_axi_W3_ARVALID,
        m_axi_W3_ARREADY => m_axi_W3_ARREADY,
        m_axi_W3_ARADDR => grp_Load_Weight_fu_295_m_axi_W3_ARADDR,
        m_axi_W3_ARID => grp_Load_Weight_fu_295_m_axi_W3_ARID,
        m_axi_W3_ARLEN => grp_Load_Weight_fu_295_m_axi_W3_ARLEN,
        m_axi_W3_ARSIZE => grp_Load_Weight_fu_295_m_axi_W3_ARSIZE,
        m_axi_W3_ARBURST => grp_Load_Weight_fu_295_m_axi_W3_ARBURST,
        m_axi_W3_ARLOCK => grp_Load_Weight_fu_295_m_axi_W3_ARLOCK,
        m_axi_W3_ARCACHE => grp_Load_Weight_fu_295_m_axi_W3_ARCACHE,
        m_axi_W3_ARPROT => grp_Load_Weight_fu_295_m_axi_W3_ARPROT,
        m_axi_W3_ARQOS => grp_Load_Weight_fu_295_m_axi_W3_ARQOS,
        m_axi_W3_ARREGION => grp_Load_Weight_fu_295_m_axi_W3_ARREGION,
        m_axi_W3_ARUSER => grp_Load_Weight_fu_295_m_axi_W3_ARUSER,
        m_axi_W3_RVALID => m_axi_W3_RVALID,
        m_axi_W3_RREADY => grp_Load_Weight_fu_295_m_axi_W3_RREADY,
        m_axi_W3_RDATA => m_axi_W3_RDATA,
        m_axi_W3_RLAST => m_axi_W3_RLAST,
        m_axi_W3_RID => m_axi_W3_RID,
        m_axi_W3_RFIFONUM => m_axi_W3_RFIFONUM,
        m_axi_W3_RUSER => m_axi_W3_RUSER,
        m_axi_W3_RRESP => m_axi_W3_RRESP,
        m_axi_W3_BVALID => ap_const_logic_0,
        m_axi_W3_BREADY => grp_Load_Weight_fu_295_m_axi_W3_BREADY,
        m_axi_W3_BRESP => ap_const_lv2_0,
        m_axi_W3_BID => ap_const_lv1_0,
        m_axi_W3_BUSER => ap_const_lv1_0,
        m_axi_W4_AWVALID => grp_Load_Weight_fu_295_m_axi_W4_AWVALID,
        m_axi_W4_AWREADY => ap_const_logic_0,
        m_axi_W4_AWADDR => grp_Load_Weight_fu_295_m_axi_W4_AWADDR,
        m_axi_W4_AWID => grp_Load_Weight_fu_295_m_axi_W4_AWID,
        m_axi_W4_AWLEN => grp_Load_Weight_fu_295_m_axi_W4_AWLEN,
        m_axi_W4_AWSIZE => grp_Load_Weight_fu_295_m_axi_W4_AWSIZE,
        m_axi_W4_AWBURST => grp_Load_Weight_fu_295_m_axi_W4_AWBURST,
        m_axi_W4_AWLOCK => grp_Load_Weight_fu_295_m_axi_W4_AWLOCK,
        m_axi_W4_AWCACHE => grp_Load_Weight_fu_295_m_axi_W4_AWCACHE,
        m_axi_W4_AWPROT => grp_Load_Weight_fu_295_m_axi_W4_AWPROT,
        m_axi_W4_AWQOS => grp_Load_Weight_fu_295_m_axi_W4_AWQOS,
        m_axi_W4_AWREGION => grp_Load_Weight_fu_295_m_axi_W4_AWREGION,
        m_axi_W4_AWUSER => grp_Load_Weight_fu_295_m_axi_W4_AWUSER,
        m_axi_W4_WVALID => grp_Load_Weight_fu_295_m_axi_W4_WVALID,
        m_axi_W4_WREADY => ap_const_logic_0,
        m_axi_W4_WDATA => grp_Load_Weight_fu_295_m_axi_W4_WDATA,
        m_axi_W4_WSTRB => grp_Load_Weight_fu_295_m_axi_W4_WSTRB,
        m_axi_W4_WLAST => grp_Load_Weight_fu_295_m_axi_W4_WLAST,
        m_axi_W4_WID => grp_Load_Weight_fu_295_m_axi_W4_WID,
        m_axi_W4_WUSER => grp_Load_Weight_fu_295_m_axi_W4_WUSER,
        m_axi_W4_ARVALID => grp_Load_Weight_fu_295_m_axi_W4_ARVALID,
        m_axi_W4_ARREADY => m_axi_W4_ARREADY,
        m_axi_W4_ARADDR => grp_Load_Weight_fu_295_m_axi_W4_ARADDR,
        m_axi_W4_ARID => grp_Load_Weight_fu_295_m_axi_W4_ARID,
        m_axi_W4_ARLEN => grp_Load_Weight_fu_295_m_axi_W4_ARLEN,
        m_axi_W4_ARSIZE => grp_Load_Weight_fu_295_m_axi_W4_ARSIZE,
        m_axi_W4_ARBURST => grp_Load_Weight_fu_295_m_axi_W4_ARBURST,
        m_axi_W4_ARLOCK => grp_Load_Weight_fu_295_m_axi_W4_ARLOCK,
        m_axi_W4_ARCACHE => grp_Load_Weight_fu_295_m_axi_W4_ARCACHE,
        m_axi_W4_ARPROT => grp_Load_Weight_fu_295_m_axi_W4_ARPROT,
        m_axi_W4_ARQOS => grp_Load_Weight_fu_295_m_axi_W4_ARQOS,
        m_axi_W4_ARREGION => grp_Load_Weight_fu_295_m_axi_W4_ARREGION,
        m_axi_W4_ARUSER => grp_Load_Weight_fu_295_m_axi_W4_ARUSER,
        m_axi_W4_RVALID => m_axi_W4_RVALID,
        m_axi_W4_RREADY => grp_Load_Weight_fu_295_m_axi_W4_RREADY,
        m_axi_W4_RDATA => m_axi_W4_RDATA,
        m_axi_W4_RLAST => m_axi_W4_RLAST,
        m_axi_W4_RID => m_axi_W4_RID,
        m_axi_W4_RFIFONUM => m_axi_W4_RFIFONUM,
        m_axi_W4_RUSER => m_axi_W4_RUSER,
        m_axi_W4_RRESP => m_axi_W4_RRESP,
        m_axi_W4_BVALID => ap_const_logic_0,
        m_axi_W4_BREADY => grp_Load_Weight_fu_295_m_axi_W4_BREADY,
        m_axi_W4_BRESP => ap_const_lv2_0,
        m_axi_W4_BID => ap_const_lv1_0,
        m_axi_W4_BUSER => ap_const_lv1_0,
        Weight1 => Weight1,
        Weight2 => Weight2,
        Weight3 => Weight3,
        Weight4 => Weight4,
        weight_buffer_address1 => grp_Load_Weight_fu_295_weight_buffer_address1,
        weight_buffer_ce1 => grp_Load_Weight_fu_295_weight_buffer_ce1,
        weight_buffer_we1 => grp_Load_Weight_fu_295_weight_buffer_we1,
        weight_buffer_d1 => grp_Load_Weight_fu_295_weight_buffer_d1,
        Out_LP_now => Out_LP_now,
        In_LP_now => grp_Load_Weight_fu_295_In_LP_now,
        CHin => CHin);

    grp_Compute_fu_318 : component Dense_Compute
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Compute_fu_318_ap_start,
        ap_done => grp_Compute_fu_318_ap_done,
        ap_idle => grp_Compute_fu_318_ap_idle,
        ap_ready => grp_Compute_fu_318_ap_ready,
        input_buffer_address0 => grp_Compute_fu_318_input_buffer_address0,
        input_buffer_ce0 => grp_Compute_fu_318_input_buffer_ce0,
        input_buffer_q0 => grp_Compute_fu_318_input_buffer_q0,
        input_buffer_address1 => grp_Compute_fu_318_input_buffer_address1,
        input_buffer_ce1 => grp_Compute_fu_318_input_buffer_ce1,
        input_buffer_q1 => grp_Compute_fu_318_input_buffer_q1,
        weight_buffer_address0 => grp_Compute_fu_318_weight_buffer_address0,
        weight_buffer_ce0 => grp_Compute_fu_318_weight_buffer_ce0,
        weight_buffer_q0 => grp_Compute_fu_318_weight_buffer_q0,
        weight_buffer_address1 => grp_Compute_fu_318_weight_buffer_address1,
        weight_buffer_ce1 => grp_Compute_fu_318_weight_buffer_ce1,
        weight_buffer_q1 => grp_Compute_fu_318_weight_buffer_q1,
        output_buffer_address0 => grp_Compute_fu_318_output_buffer_address0,
        output_buffer_ce0 => grp_Compute_fu_318_output_buffer_ce0,
        output_buffer_q0 => output_buffer_q0,
        output_buffer_address1 => grp_Compute_fu_318_output_buffer_address1,
        output_buffer_ce1 => grp_Compute_fu_318_output_buffer_ce1,
        output_buffer_we1 => grp_Compute_fu_318_output_buffer_we1,
        output_buffer_d1 => grp_Compute_fu_318_output_buffer_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Compute_fu_318_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Compute_fu_318_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_phi_mux_pp_phi_fu_261_p4 = ap_const_lv1_1) and (icmp_ln185_fu_444_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_phi_mux_pp_phi_fu_261_p4 = ap_const_lv1_0) and (icmp_ln185_fu_444_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
                    grp_Compute_fu_318_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Compute_fu_318_ap_ready = ap_const_logic_1)) then 
                    grp_Compute_fu_318_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Load_Input_fu_282_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Load_Input_fu_282_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    grp_Load_Input_fu_282_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Load_Input_fu_282_ap_ready = ap_const_logic_1)) then 
                    grp_Load_Input_fu_282_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Load_Weight_fu_295_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Load_Weight_fu_295_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    grp_Load_Weight_fu_295_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Load_Weight_fu_295_ap_ready = ap_const_logic_1)) then 
                    grp_Load_Weight_fu_295_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    In_LP_now_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                In_LP_now_fu_144 <= ap_const_lv31_0;
            elsif (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                In_LP_now_fu_144 <= In_LP_now_2_reg_571;
            end if; 
        end if;
    end process;

    loop_index_i4_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond104_fu_380_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                loop_index_i4_fu_140 <= ap_const_lv6_0;
            elsif (((exitcond93_fu_410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                loop_index_i4_fu_140 <= empty_217_fu_416_p2;
            end if; 
        end if;
    end process;

    loop_index_i_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                loop_index_i_fu_136 <= ap_const_lv6_0;
            elsif (((exitcond104_fu_380_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                loop_index_i_fu_136 <= empty_215_fu_386_p2;
            end if; 
        end if;
    end process;

    pp_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                pp_reg_257 <= ap_phi_mux_pp_1_phi_fu_273_p4;
            elsif (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                pp_reg_257 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                B1_addr_read_reg_538 <= m_axi_B1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                B1_addr_reg_481 <= sext_ln7_1_fu_358_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                In_LP_now_2_reg_571 <= In_LP_now_2_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln185_reg_563 <= add_ln185_fu_432_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_fu_444_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                add_ln187_reg_576 <= add_ln187_fu_459_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    loop_index_i4_cast_reg_543(5 downto 0) <= loop_index_i4_cast_fu_405_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    loop_index_i_cast_reg_523(5 downto 0) <= loop_index_i_cast_fu_376_p1(5 downto 0);
            end if;
        end if;
    end process;
    loop_index_i_cast_reg_523(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    loop_index_i4_cast_reg_543(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_B1_ARREADY, m_axi_B1_RVALID, ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state12, exitcond93_fu_410_p2, ap_CS_fsm_state15, ap_CS_fsm_state16, icmp_ln185_fu_444_p2, ap_phi_mux_pp_phi_fu_261_p4, ap_block_state15_on_subcall_done, ap_CS_fsm_state18, ap_block_state18_on_subcall_done, ap_CS_fsm_state20, exitcond104_fu_380_p2, ap_block_state20_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_B1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((exitcond104_fu_380_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((m_axi_B1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state12 => 
                if (((exitcond93_fu_410_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln185_fu_444_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                elsif (((ap_phi_mux_pp_phi_fu_261_p4 = ap_const_lv1_1) and (icmp_ln185_fu_444_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state20 => 
                if (((ap_const_boolean_0 = ap_block_state20_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    B1_blk_n_AR_assign_proc : process(m_axi_B1_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B1_blk_n_AR <= m_axi_B1_ARREADY;
        else 
            B1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    B1_blk_n_R_assign_proc : process(m_axi_B1_RVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            B1_blk_n_R <= m_axi_B1_RVALID;
        else 
            B1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    In_LP_now_2_fu_449_p2 <= std_logic_vector(unsigned(In_LP_now_fu_144) + unsigned(ap_const_lv31_1));

    Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_address1_assign_proc : process(ap_CS_fsm_state15, grp_Load_Weight_fu_295_weight_buffer_address1, grp_Compute_fu_318_weight_buffer_address1, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_address1 <= grp_Compute_fu_318_weight_buffer_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_address1 <= grp_Load_Weight_fu_295_weight_buffer_address1;
        else 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_ce0_assign_proc : process(grp_Compute_fu_318_weight_buffer_ce0, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_ce0 <= grp_Compute_fu_318_weight_buffer_ce0;
        else 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_ce1_assign_proc : process(ap_CS_fsm_state15, grp_Load_Weight_fu_295_weight_buffer_ce1, grp_Compute_fu_318_weight_buffer_ce1, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_ce1 <= grp_Compute_fu_318_weight_buffer_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_ce1 <= grp_Load_Weight_fu_295_weight_buffer_ce1;
        else 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_we1_assign_proc : process(ap_CS_fsm_state15, grp_Load_Weight_fu_295_weight_buffer_we1, pp_reg_257, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_we1 <= grp_Load_Weight_fu_295_weight_buffer_we1;
        else 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_address1_assign_proc : process(grp_Load_Input_fu_282_input_buffer_address1, grp_Compute_fu_318_input_buffer_address1, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_address1 <= grp_Compute_fu_318_input_buffer_address1;
        elsif (((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_address1 <= grp_Load_Input_fu_282_input_buffer_address1;
        else 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_address1 <= "XXXXX";
        end if; 
    end process;


    Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_ce0_assign_proc : process(grp_Compute_fu_318_input_buffer_ce0, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_ce0 <= grp_Compute_fu_318_input_buffer_ce0;
        else 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_ce1_assign_proc : process(grp_Load_Input_fu_282_input_buffer_ce1, grp_Compute_fu_318_input_buffer_ce1, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_ce1 <= grp_Compute_fu_318_input_buffer_ce1;
        elsif (((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_ce1 <= grp_Load_Input_fu_282_input_buffer_ce1;
        else 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_we1_assign_proc : process(grp_Load_Input_fu_282_input_buffer_we1, pp_reg_257, ap_CS_fsm_state18)
    begin
        if (((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_we1 <= grp_Load_Input_fu_282_input_buffer_we1;
        else 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_we1 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;


    Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_address1_assign_proc : process(ap_CS_fsm_state15, grp_Load_Input_fu_282_input_buffer_address1, grp_Compute_fu_318_input_buffer_address1, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_address1 <= grp_Compute_fu_318_input_buffer_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_address1 <= grp_Load_Input_fu_282_input_buffer_address1;
        else 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_address1 <= "XXXXX";
        end if; 
    end process;


    Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_ce0_assign_proc : process(grp_Compute_fu_318_input_buffer_ce0, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_ce0 <= grp_Compute_fu_318_input_buffer_ce0;
        else 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_ce1_assign_proc : process(ap_CS_fsm_state15, grp_Load_Input_fu_282_input_buffer_ce1, grp_Compute_fu_318_input_buffer_ce1, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_ce1 <= grp_Compute_fu_318_input_buffer_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_ce1 <= grp_Load_Input_fu_282_input_buffer_ce1;
        else 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_we1_assign_proc : process(ap_CS_fsm_state15, grp_Load_Input_fu_282_input_buffer_we1, pp_reg_257, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_we1 <= grp_Load_Input_fu_282_input_buffer_we1;
        else 
            Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_we1 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;


    Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_address1_assign_proc : process(grp_Load_Weight_fu_295_weight_buffer_address1, grp_Compute_fu_318_weight_buffer_address1, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_address1 <= grp_Compute_fu_318_weight_buffer_address1;
        elsif (((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_address1 <= grp_Load_Weight_fu_295_weight_buffer_address1;
        else 
            Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_ce0_assign_proc : process(grp_Compute_fu_318_weight_buffer_ce0, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_ce0 <= grp_Compute_fu_318_weight_buffer_ce0;
        else 
            Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_ce1_assign_proc : process(grp_Load_Weight_fu_295_weight_buffer_ce1, grp_Compute_fu_318_weight_buffer_ce1, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_ce1 <= grp_Compute_fu_318_weight_buffer_ce1;
        elsif (((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_ce1 <= grp_Load_Weight_fu_295_weight_buffer_ce1;
        else 
            Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_we1_assign_proc : process(grp_Load_Weight_fu_295_weight_buffer_we1, pp_reg_257, ap_CS_fsm_state18)
    begin
        if (((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_we1 <= grp_Load_Weight_fu_295_weight_buffer_we1;
        else 
            Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln185_fu_432_p2 <= std_logic_vector(unsigned(Input_Loops) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln187_fu_459_p2 <= std_logic_vector(unsigned(trunc_ln193_fu_455_p1) + unsigned(ap_const_lv25_1));
    add_ln7_fu_342_p2 <= std_logic_vector(signed(sext_ln7_fu_338_p1) + signed(bias));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(m_axi_B1_RVALID)
    begin
        if ((m_axi_B1_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state15_blk_assign_proc : process(ap_block_state15_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state15_on_subcall_done)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;

    ap_ST_fsm_state18_blk_assign_proc : process(ap_block_state18_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state18_on_subcall_done)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(ap_block_state20_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state20_on_subcall_done)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(m_axi_B1_ARREADY)
    begin
        if ((m_axi_B1_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state15_on_subcall_done_assign_proc : process(grp_Load_Input_fu_282_ap_done, grp_Load_Weight_fu_295_ap_done)
    begin
                ap_block_state15_on_subcall_done <= ((grp_Load_Weight_fu_295_ap_done = ap_const_logic_0) or (grp_Load_Input_fu_282_ap_done = ap_const_logic_0));
    end process;


    ap_block_state18_on_subcall_done_assign_proc : process(grp_Load_Input_fu_282_ap_done, grp_Load_Weight_fu_295_ap_done, grp_Compute_fu_318_ap_done, pp_reg_257)
    begin
                ap_block_state18_on_subcall_done <= (((pp_reg_257 = ap_const_lv1_1) and (grp_Compute_fu_318_ap_done = ap_const_logic_0)) or ((pp_reg_257 = ap_const_lv1_1) and (grp_Load_Weight_fu_295_ap_done = ap_const_logic_0)) or ((pp_reg_257 = ap_const_lv1_1) and (grp_Load_Input_fu_282_ap_done = ap_const_logic_0)) or ((pp_reg_257 = ap_const_lv1_0) and (grp_Compute_fu_318_ap_done = ap_const_logic_0)) or ((pp_reg_257 = ap_const_lv1_0) and (grp_Load_Weight_fu_295_ap_done = ap_const_logic_0)) or ((pp_reg_257 = ap_const_lv1_0) and (grp_Load_Input_fu_282_ap_done = ap_const_logic_0)));
    end process;


    ap_block_state20_on_subcall_done_assign_proc : process(grp_Compute_fu_318_ap_done, pp_reg_257)
    begin
                ap_block_state20_on_subcall_done <= (((pp_reg_257 = ap_const_lv1_1) and (grp_Compute_fu_318_ap_done = ap_const_logic_0)) or ((pp_reg_257 = ap_const_lv1_0) and (grp_Compute_fu_318_ap_done = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state20, ap_block_state20_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state20_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_pp_1_phi_fu_273_p4_assign_proc : process(pp_reg_257, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
            if ((pp_reg_257 = ap_const_lv1_1)) then 
                ap_phi_mux_pp_1_phi_fu_273_p4 <= ap_const_lv1_0;
            elsif ((pp_reg_257 = ap_const_lv1_0)) then 
                ap_phi_mux_pp_1_phi_fu_273_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_pp_1_phi_fu_273_p4 <= "X";
            end if;
        else 
            ap_phi_mux_pp_1_phi_fu_273_p4 <= "X";
        end if; 
    end process;

    ap_phi_mux_pp_phi_fu_261_p4 <= pp_reg_257;

    ap_ready_assign_proc : process(ap_CS_fsm_state20, ap_block_state20_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state20_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_buffer_V_address0 <= loop_index_i4_cast_fu_405_p1(5 - 1 downto 0);
    bias_buffer_V_address1 <= loop_index_i_cast_reg_523(5 - 1 downto 0);

    bias_buffer_V_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            bias_buffer_V_ce0 <= ap_const_logic_1;
        else 
            bias_buffer_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_buffer_V_ce1_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            bias_buffer_V_ce1 <= ap_const_logic_1;
        else 
            bias_buffer_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bias_buffer_V_we1_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            bias_buffer_V_we1 <= ap_const_logic_1;
        else 
            bias_buffer_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_215_fu_386_p2 <= std_logic_vector(unsigned(loop_index_i_fu_136) + unsigned(ap_const_lv6_1));
    empty_217_fu_416_p2 <= std_logic_vector(unsigned(loop_index_i4_fu_140) + unsigned(ap_const_lv6_1));
    exitcond104_fu_380_p2 <= "1" when (loop_index_i_fu_136 = ap_const_lv6_20) else "0";
    exitcond93_fu_410_p2 <= "1" when (loop_index_i4_fu_140 = ap_const_lv6_20) else "0";
    grp_Compute_fu_318_ap_start <= grp_Compute_fu_318_ap_start_reg;

    grp_Compute_fu_318_input_buffer_q0_assign_proc : process(Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_q0, Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_q0, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            grp_Compute_fu_318_input_buffer_q0 <= Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_q0;
        elsif ((((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            grp_Compute_fu_318_input_buffer_q0 <= Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_q0;
        else 
            grp_Compute_fu_318_input_buffer_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_Compute_fu_318_input_buffer_q1_assign_proc : process(Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_q1, Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_q1, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            grp_Compute_fu_318_input_buffer_q1 <= Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_2_q1;
        elsif ((((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            grp_Compute_fu_318_input_buffer_q1 <= Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_3_q1;
        else 
            grp_Compute_fu_318_input_buffer_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_Compute_fu_318_weight_buffer_q0_assign_proc : process(Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_q0, Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_q0, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            grp_Compute_fu_318_weight_buffer_q0 <= Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_q0;
        elsif ((((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            grp_Compute_fu_318_weight_buffer_q0 <= Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_q0;
        else 
            grp_Compute_fu_318_weight_buffer_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_Compute_fu_318_weight_buffer_q1_assign_proc : process(Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_q1, Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_q1, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            grp_Compute_fu_318_weight_buffer_q1 <= Load_mulmulmulmulmulmuland_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_q1;
        elsif ((((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            grp_Compute_fu_318_weight_buffer_q1 <= Load_and_Compute_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_fixed_ap_1_q1;
        else 
            grp_Compute_fu_318_weight_buffer_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_Load_Input_fu_282_In_LP_now_assign_proc : process(ap_CS_fsm_state15, add_ln187_reg_576, pp_reg_257, ap_CS_fsm_state18)
    begin
        if ((((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            grp_Load_Input_fu_282_In_LP_now <= add_ln187_reg_576;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_Load_Input_fu_282_In_LP_now <= ap_const_lv25_0;
        else 
            grp_Load_Input_fu_282_In_LP_now <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_Load_Input_fu_282_ap_start <= grp_Load_Input_fu_282_ap_start_reg;

    grp_Load_Weight_fu_295_In_LP_now_assign_proc : process(ap_CS_fsm_state15, add_ln187_reg_576, pp_reg_257, ap_CS_fsm_state18)
    begin
        if ((((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            grp_Load_Weight_fu_295_In_LP_now <= add_ln187_reg_576;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_Load_Weight_fu_295_In_LP_now <= ap_const_lv25_0;
        else 
            grp_Load_Weight_fu_295_In_LP_now <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_Load_Weight_fu_295_ap_start <= grp_Load_Weight_fu_295_ap_start_reg;
    icmp_ln185_fu_444_p2 <= "1" when (signed(zext_ln185_fu_440_p1) < signed(add_ln185_reg_563)) else "0";
    loop_index_i4_cast_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_i4_fu_140),64));
    loop_index_i_cast_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_i_fu_136),64));
    m_axi_B1_ARADDR <= B1_addr_reg_481;
    m_axi_B1_ARBURST <= ap_const_lv2_0;
    m_axi_B1_ARCACHE <= ap_const_lv4_0;
    m_axi_B1_ARID <= ap_const_lv1_0;
    m_axi_B1_ARLEN <= ap_const_lv32_20;
    m_axi_B1_ARLOCK <= ap_const_lv2_0;
    m_axi_B1_ARPROT <= ap_const_lv3_0;
    m_axi_B1_ARQOS <= ap_const_lv4_0;
    m_axi_B1_ARREGION <= ap_const_lv4_0;
    m_axi_B1_ARSIZE <= ap_const_lv3_0;
    m_axi_B1_ARUSER <= ap_const_lv1_0;

    m_axi_B1_ARVALID_assign_proc : process(m_axi_B1_ARREADY, ap_CS_fsm_state2)
    begin
        if (((m_axi_B1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_B1_ARVALID <= ap_const_logic_1;
        else 
            m_axi_B1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_B1_AWADDR <= ap_const_lv64_0;
    m_axi_B1_AWBURST <= ap_const_lv2_0;
    m_axi_B1_AWCACHE <= ap_const_lv4_0;
    m_axi_B1_AWID <= ap_const_lv1_0;
    m_axi_B1_AWLEN <= ap_const_lv32_0;
    m_axi_B1_AWLOCK <= ap_const_lv2_0;
    m_axi_B1_AWPROT <= ap_const_lv3_0;
    m_axi_B1_AWQOS <= ap_const_lv4_0;
    m_axi_B1_AWREGION <= ap_const_lv4_0;
    m_axi_B1_AWSIZE <= ap_const_lv3_0;
    m_axi_B1_AWUSER <= ap_const_lv1_0;
    m_axi_B1_AWVALID <= ap_const_logic_0;
    m_axi_B1_BREADY <= ap_const_logic_0;

    m_axi_B1_RREADY_assign_proc : process(m_axi_B1_RVALID, ap_CS_fsm_state10)
    begin
        if (((m_axi_B1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_B1_RREADY <= ap_const_logic_1;
        else 
            m_axi_B1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_B1_WDATA <= ap_const_lv16_0;
    m_axi_B1_WID <= ap_const_lv1_0;
    m_axi_B1_WLAST <= ap_const_logic_0;
    m_axi_B1_WSTRB <= ap_const_lv2_0;
    m_axi_B1_WUSER <= ap_const_lv1_0;
    m_axi_B1_WVALID <= ap_const_logic_0;
    m_axi_IN1_ARADDR <= grp_Load_Input_fu_282_m_axi_IN1_ARADDR;
    m_axi_IN1_ARBURST <= grp_Load_Input_fu_282_m_axi_IN1_ARBURST;
    m_axi_IN1_ARCACHE <= grp_Load_Input_fu_282_m_axi_IN1_ARCACHE;
    m_axi_IN1_ARID <= grp_Load_Input_fu_282_m_axi_IN1_ARID;
    m_axi_IN1_ARLEN <= grp_Load_Input_fu_282_m_axi_IN1_ARLEN;
    m_axi_IN1_ARLOCK <= grp_Load_Input_fu_282_m_axi_IN1_ARLOCK;
    m_axi_IN1_ARPROT <= grp_Load_Input_fu_282_m_axi_IN1_ARPROT;
    m_axi_IN1_ARQOS <= grp_Load_Input_fu_282_m_axi_IN1_ARQOS;
    m_axi_IN1_ARREGION <= grp_Load_Input_fu_282_m_axi_IN1_ARREGION;
    m_axi_IN1_ARSIZE <= grp_Load_Input_fu_282_m_axi_IN1_ARSIZE;
    m_axi_IN1_ARUSER <= grp_Load_Input_fu_282_m_axi_IN1_ARUSER;

    m_axi_IN1_ARVALID_assign_proc : process(ap_CS_fsm_state15, grp_Load_Input_fu_282_m_axi_IN1_ARVALID, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            m_axi_IN1_ARVALID <= grp_Load_Input_fu_282_m_axi_IN1_ARVALID;
        else 
            m_axi_IN1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_IN1_AWADDR <= ap_const_lv64_0;
    m_axi_IN1_AWBURST <= ap_const_lv2_0;
    m_axi_IN1_AWCACHE <= ap_const_lv4_0;
    m_axi_IN1_AWID <= ap_const_lv1_0;
    m_axi_IN1_AWLEN <= ap_const_lv32_0;
    m_axi_IN1_AWLOCK <= ap_const_lv2_0;
    m_axi_IN1_AWPROT <= ap_const_lv3_0;
    m_axi_IN1_AWQOS <= ap_const_lv4_0;
    m_axi_IN1_AWREGION <= ap_const_lv4_0;
    m_axi_IN1_AWSIZE <= ap_const_lv3_0;
    m_axi_IN1_AWUSER <= ap_const_lv1_0;
    m_axi_IN1_AWVALID <= ap_const_logic_0;
    m_axi_IN1_BREADY <= ap_const_logic_0;

    m_axi_IN1_RREADY_assign_proc : process(ap_CS_fsm_state15, grp_Load_Input_fu_282_m_axi_IN1_RREADY, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            m_axi_IN1_RREADY <= grp_Load_Input_fu_282_m_axi_IN1_RREADY;
        else 
            m_axi_IN1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_IN1_WDATA <= ap_const_lv16_0;
    m_axi_IN1_WID <= ap_const_lv1_0;
    m_axi_IN1_WLAST <= ap_const_logic_0;
    m_axi_IN1_WSTRB <= ap_const_lv2_0;
    m_axi_IN1_WUSER <= ap_const_lv1_0;
    m_axi_IN1_WVALID <= ap_const_logic_0;
    m_axi_W1_ARADDR <= grp_Load_Weight_fu_295_m_axi_W1_ARADDR;
    m_axi_W1_ARBURST <= grp_Load_Weight_fu_295_m_axi_W1_ARBURST;
    m_axi_W1_ARCACHE <= grp_Load_Weight_fu_295_m_axi_W1_ARCACHE;
    m_axi_W1_ARID <= grp_Load_Weight_fu_295_m_axi_W1_ARID;
    m_axi_W1_ARLEN <= grp_Load_Weight_fu_295_m_axi_W1_ARLEN;
    m_axi_W1_ARLOCK <= grp_Load_Weight_fu_295_m_axi_W1_ARLOCK;
    m_axi_W1_ARPROT <= grp_Load_Weight_fu_295_m_axi_W1_ARPROT;
    m_axi_W1_ARQOS <= grp_Load_Weight_fu_295_m_axi_W1_ARQOS;
    m_axi_W1_ARREGION <= grp_Load_Weight_fu_295_m_axi_W1_ARREGION;
    m_axi_W1_ARSIZE <= grp_Load_Weight_fu_295_m_axi_W1_ARSIZE;
    m_axi_W1_ARUSER <= grp_Load_Weight_fu_295_m_axi_W1_ARUSER;

    m_axi_W1_ARVALID_assign_proc : process(ap_CS_fsm_state15, grp_Load_Weight_fu_295_m_axi_W1_ARVALID, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            m_axi_W1_ARVALID <= grp_Load_Weight_fu_295_m_axi_W1_ARVALID;
        else 
            m_axi_W1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_W1_AWADDR <= ap_const_lv64_0;
    m_axi_W1_AWBURST <= ap_const_lv2_0;
    m_axi_W1_AWCACHE <= ap_const_lv4_0;
    m_axi_W1_AWID <= ap_const_lv1_0;
    m_axi_W1_AWLEN <= ap_const_lv32_0;
    m_axi_W1_AWLOCK <= ap_const_lv2_0;
    m_axi_W1_AWPROT <= ap_const_lv3_0;
    m_axi_W1_AWQOS <= ap_const_lv4_0;
    m_axi_W1_AWREGION <= ap_const_lv4_0;
    m_axi_W1_AWSIZE <= ap_const_lv3_0;
    m_axi_W1_AWUSER <= ap_const_lv1_0;
    m_axi_W1_AWVALID <= ap_const_logic_0;
    m_axi_W1_BREADY <= ap_const_logic_0;

    m_axi_W1_RREADY_assign_proc : process(ap_CS_fsm_state15, grp_Load_Weight_fu_295_m_axi_W1_RREADY, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            m_axi_W1_RREADY <= grp_Load_Weight_fu_295_m_axi_W1_RREADY;
        else 
            m_axi_W1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_W1_WDATA <= ap_const_lv16_0;
    m_axi_W1_WID <= ap_const_lv1_0;
    m_axi_W1_WLAST <= ap_const_logic_0;
    m_axi_W1_WSTRB <= ap_const_lv2_0;
    m_axi_W1_WUSER <= ap_const_lv1_0;
    m_axi_W1_WVALID <= ap_const_logic_0;
    m_axi_W2_ARADDR <= grp_Load_Weight_fu_295_m_axi_W2_ARADDR;
    m_axi_W2_ARBURST <= grp_Load_Weight_fu_295_m_axi_W2_ARBURST;
    m_axi_W2_ARCACHE <= grp_Load_Weight_fu_295_m_axi_W2_ARCACHE;
    m_axi_W2_ARID <= grp_Load_Weight_fu_295_m_axi_W2_ARID;
    m_axi_W2_ARLEN <= grp_Load_Weight_fu_295_m_axi_W2_ARLEN;
    m_axi_W2_ARLOCK <= grp_Load_Weight_fu_295_m_axi_W2_ARLOCK;
    m_axi_W2_ARPROT <= grp_Load_Weight_fu_295_m_axi_W2_ARPROT;
    m_axi_W2_ARQOS <= grp_Load_Weight_fu_295_m_axi_W2_ARQOS;
    m_axi_W2_ARREGION <= grp_Load_Weight_fu_295_m_axi_W2_ARREGION;
    m_axi_W2_ARSIZE <= grp_Load_Weight_fu_295_m_axi_W2_ARSIZE;
    m_axi_W2_ARUSER <= grp_Load_Weight_fu_295_m_axi_W2_ARUSER;

    m_axi_W2_ARVALID_assign_proc : process(ap_CS_fsm_state15, grp_Load_Weight_fu_295_m_axi_W2_ARVALID, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            m_axi_W2_ARVALID <= grp_Load_Weight_fu_295_m_axi_W2_ARVALID;
        else 
            m_axi_W2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_W2_AWADDR <= ap_const_lv64_0;
    m_axi_W2_AWBURST <= ap_const_lv2_0;
    m_axi_W2_AWCACHE <= ap_const_lv4_0;
    m_axi_W2_AWID <= ap_const_lv1_0;
    m_axi_W2_AWLEN <= ap_const_lv32_0;
    m_axi_W2_AWLOCK <= ap_const_lv2_0;
    m_axi_W2_AWPROT <= ap_const_lv3_0;
    m_axi_W2_AWQOS <= ap_const_lv4_0;
    m_axi_W2_AWREGION <= ap_const_lv4_0;
    m_axi_W2_AWSIZE <= ap_const_lv3_0;
    m_axi_W2_AWUSER <= ap_const_lv1_0;
    m_axi_W2_AWVALID <= ap_const_logic_0;
    m_axi_W2_BREADY <= ap_const_logic_0;

    m_axi_W2_RREADY_assign_proc : process(ap_CS_fsm_state15, grp_Load_Weight_fu_295_m_axi_W2_RREADY, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            m_axi_W2_RREADY <= grp_Load_Weight_fu_295_m_axi_W2_RREADY;
        else 
            m_axi_W2_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_W2_WDATA <= ap_const_lv16_0;
    m_axi_W2_WID <= ap_const_lv1_0;
    m_axi_W2_WLAST <= ap_const_logic_0;
    m_axi_W2_WSTRB <= ap_const_lv2_0;
    m_axi_W2_WUSER <= ap_const_lv1_0;
    m_axi_W2_WVALID <= ap_const_logic_0;
    m_axi_W3_ARADDR <= grp_Load_Weight_fu_295_m_axi_W3_ARADDR;
    m_axi_W3_ARBURST <= grp_Load_Weight_fu_295_m_axi_W3_ARBURST;
    m_axi_W3_ARCACHE <= grp_Load_Weight_fu_295_m_axi_W3_ARCACHE;
    m_axi_W3_ARID <= grp_Load_Weight_fu_295_m_axi_W3_ARID;
    m_axi_W3_ARLEN <= grp_Load_Weight_fu_295_m_axi_W3_ARLEN;
    m_axi_W3_ARLOCK <= grp_Load_Weight_fu_295_m_axi_W3_ARLOCK;
    m_axi_W3_ARPROT <= grp_Load_Weight_fu_295_m_axi_W3_ARPROT;
    m_axi_W3_ARQOS <= grp_Load_Weight_fu_295_m_axi_W3_ARQOS;
    m_axi_W3_ARREGION <= grp_Load_Weight_fu_295_m_axi_W3_ARREGION;
    m_axi_W3_ARSIZE <= grp_Load_Weight_fu_295_m_axi_W3_ARSIZE;
    m_axi_W3_ARUSER <= grp_Load_Weight_fu_295_m_axi_W3_ARUSER;

    m_axi_W3_ARVALID_assign_proc : process(ap_CS_fsm_state15, grp_Load_Weight_fu_295_m_axi_W3_ARVALID, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            m_axi_W3_ARVALID <= grp_Load_Weight_fu_295_m_axi_W3_ARVALID;
        else 
            m_axi_W3_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_W3_AWADDR <= ap_const_lv64_0;
    m_axi_W3_AWBURST <= ap_const_lv2_0;
    m_axi_W3_AWCACHE <= ap_const_lv4_0;
    m_axi_W3_AWID <= ap_const_lv1_0;
    m_axi_W3_AWLEN <= ap_const_lv32_0;
    m_axi_W3_AWLOCK <= ap_const_lv2_0;
    m_axi_W3_AWPROT <= ap_const_lv3_0;
    m_axi_W3_AWQOS <= ap_const_lv4_0;
    m_axi_W3_AWREGION <= ap_const_lv4_0;
    m_axi_W3_AWSIZE <= ap_const_lv3_0;
    m_axi_W3_AWUSER <= ap_const_lv1_0;
    m_axi_W3_AWVALID <= ap_const_logic_0;
    m_axi_W3_BREADY <= ap_const_logic_0;

    m_axi_W3_RREADY_assign_proc : process(ap_CS_fsm_state15, grp_Load_Weight_fu_295_m_axi_W3_RREADY, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            m_axi_W3_RREADY <= grp_Load_Weight_fu_295_m_axi_W3_RREADY;
        else 
            m_axi_W3_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_W3_WDATA <= ap_const_lv16_0;
    m_axi_W3_WID <= ap_const_lv1_0;
    m_axi_W3_WLAST <= ap_const_logic_0;
    m_axi_W3_WSTRB <= ap_const_lv2_0;
    m_axi_W3_WUSER <= ap_const_lv1_0;
    m_axi_W3_WVALID <= ap_const_logic_0;
    m_axi_W4_ARADDR <= grp_Load_Weight_fu_295_m_axi_W4_ARADDR;
    m_axi_W4_ARBURST <= grp_Load_Weight_fu_295_m_axi_W4_ARBURST;
    m_axi_W4_ARCACHE <= grp_Load_Weight_fu_295_m_axi_W4_ARCACHE;
    m_axi_W4_ARID <= grp_Load_Weight_fu_295_m_axi_W4_ARID;
    m_axi_W4_ARLEN <= grp_Load_Weight_fu_295_m_axi_W4_ARLEN;
    m_axi_W4_ARLOCK <= grp_Load_Weight_fu_295_m_axi_W4_ARLOCK;
    m_axi_W4_ARPROT <= grp_Load_Weight_fu_295_m_axi_W4_ARPROT;
    m_axi_W4_ARQOS <= grp_Load_Weight_fu_295_m_axi_W4_ARQOS;
    m_axi_W4_ARREGION <= grp_Load_Weight_fu_295_m_axi_W4_ARREGION;
    m_axi_W4_ARSIZE <= grp_Load_Weight_fu_295_m_axi_W4_ARSIZE;
    m_axi_W4_ARUSER <= grp_Load_Weight_fu_295_m_axi_W4_ARUSER;

    m_axi_W4_ARVALID_assign_proc : process(ap_CS_fsm_state15, grp_Load_Weight_fu_295_m_axi_W4_ARVALID, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            m_axi_W4_ARVALID <= grp_Load_Weight_fu_295_m_axi_W4_ARVALID;
        else 
            m_axi_W4_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_W4_AWADDR <= ap_const_lv64_0;
    m_axi_W4_AWBURST <= ap_const_lv2_0;
    m_axi_W4_AWCACHE <= ap_const_lv4_0;
    m_axi_W4_AWID <= ap_const_lv1_0;
    m_axi_W4_AWLEN <= ap_const_lv32_0;
    m_axi_W4_AWLOCK <= ap_const_lv2_0;
    m_axi_W4_AWPROT <= ap_const_lv3_0;
    m_axi_W4_AWQOS <= ap_const_lv4_0;
    m_axi_W4_AWREGION <= ap_const_lv4_0;
    m_axi_W4_AWSIZE <= ap_const_lv3_0;
    m_axi_W4_AWUSER <= ap_const_lv1_0;
    m_axi_W4_AWVALID <= ap_const_logic_0;
    m_axi_W4_BREADY <= ap_const_logic_0;

    m_axi_W4_RREADY_assign_proc : process(ap_CS_fsm_state15, grp_Load_Weight_fu_295_m_axi_W4_RREADY, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            m_axi_W4_RREADY <= grp_Load_Weight_fu_295_m_axi_W4_RREADY;
        else 
            m_axi_W4_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_W4_WDATA <= ap_const_lv16_0;
    m_axi_W4_WID <= ap_const_lv1_0;
    m_axi_W4_WLAST <= ap_const_logic_0;
    m_axi_W4_WSTRB <= ap_const_lv2_0;
    m_axi_W4_WUSER <= ap_const_lv1_0;
    m_axi_W4_WVALID <= ap_const_logic_0;
    output_buffer_address0 <= grp_Compute_fu_318_output_buffer_address0;

    output_buffer_address1_assign_proc : process(loop_index_i4_cast_reg_543, grp_Compute_fu_318_output_buffer_address1, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_buffer_address1 <= loop_index_i4_cast_reg_543(5 - 1 downto 0);
        elsif ((((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            output_buffer_address1 <= grp_Compute_fu_318_output_buffer_address1;
        else 
            output_buffer_address1 <= "XXXXX";
        end if; 
    end process;


    output_buffer_ce0_assign_proc : process(grp_Compute_fu_318_output_buffer_ce0, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            output_buffer_ce0 <= grp_Compute_fu_318_output_buffer_ce0;
        else 
            output_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_buffer_ce1_assign_proc : process(grp_Compute_fu_318_output_buffer_ce1, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_buffer_ce1 <= ap_const_logic_1;
        elsif ((((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            output_buffer_ce1 <= grp_Compute_fu_318_output_buffer_ce1;
        else 
            output_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_buffer_d1_assign_proc : process(bias_buffer_V_q0, grp_Compute_fu_318_output_buffer_d1, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_buffer_d1 <= bias_buffer_V_q0;
        elsif ((((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            output_buffer_d1 <= grp_Compute_fu_318_output_buffer_d1;
        else 
            output_buffer_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_buffer_we1_assign_proc : process(grp_Compute_fu_318_output_buffer_we1, pp_reg_257, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_buffer_we1 <= ap_const_logic_1;
        elsif ((((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((pp_reg_257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            output_buffer_we1 <= grp_Compute_fu_318_output_buffer_we1;
        else 
            output_buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln7_1_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_fu_348_p4),64));

        sext_ln7_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln7_fu_330_p3),64));

    shl_ln7_fu_330_p3 <= (Out_LP_now & ap_const_lv6_0);
    trunc_ln193_fu_455_p1 <= In_LP_now_fu_144(25 - 1 downto 0);
    trunc_ln7_fu_348_p4 <= add_ln7_fu_342_p2(63 downto 1);
    zext_ln185_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(In_LP_now_fu_144),32));
end behav;
