// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module My_Conv_Write_Output_F_Pipeline_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        empty_82,
        output_buffer_2_address1,
        output_buffer_2_ce1,
        output_buffer_2_we1,
        output_buffer_2_d1,
        output_buffer_6_address1,
        output_buffer_6_ce1,
        output_buffer_6_we1,
        output_buffer_6_d1,
        output_buffer_10_address1,
        output_buffer_10_ce1,
        output_buffer_10_we1,
        output_buffer_10_d1,
        output_buffer_14_address1,
        output_buffer_14_ce1,
        output_buffer_14_we1,
        output_buffer_14_d1,
        output_buffer_18_address1,
        output_buffer_18_ce1,
        output_buffer_18_we1,
        output_buffer_18_d1,
        output_buffer_22_address1,
        output_buffer_22_ce1,
        output_buffer_22_we1,
        output_buffer_22_d1,
        output_buffer_26_address1,
        output_buffer_26_ce1,
        output_buffer_26_we1,
        output_buffer_26_d1,
        output_buffer_30_address1,
        output_buffer_30_ce1,
        output_buffer_30_we1,
        output_buffer_30_d1,
        empty,
        Out_Tc_Min_cast_cast_cast
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [8:0] empty_82;
output  [8:0] output_buffer_2_address1;
output   output_buffer_2_ce1;
output  [3:0] output_buffer_2_we1;
output  [31:0] output_buffer_2_d1;
output  [8:0] output_buffer_6_address1;
output   output_buffer_6_ce1;
output  [3:0] output_buffer_6_we1;
output  [31:0] output_buffer_6_d1;
output  [8:0] output_buffer_10_address1;
output   output_buffer_10_ce1;
output  [3:0] output_buffer_10_we1;
output  [31:0] output_buffer_10_d1;
output  [8:0] output_buffer_14_address1;
output   output_buffer_14_ce1;
output  [3:0] output_buffer_14_we1;
output  [31:0] output_buffer_14_d1;
output  [8:0] output_buffer_18_address1;
output   output_buffer_18_ce1;
output  [3:0] output_buffer_18_we1;
output  [31:0] output_buffer_18_d1;
output  [8:0] output_buffer_22_address1;
output   output_buffer_22_ce1;
output  [3:0] output_buffer_22_we1;
output  [31:0] output_buffer_22_d1;
output  [8:0] output_buffer_26_address1;
output   output_buffer_26_ce1;
output  [3:0] output_buffer_26_we1;
output  [31:0] output_buffer_26_d1;
output  [8:0] output_buffer_30_address1;
output   output_buffer_30_ce1;
output  [3:0] output_buffer_30_we1;
output  [31:0] output_buffer_30_d1;
input  [2:0] empty;
input  [30:0] Out_Tc_Min_cast_cast_cast;

reg ap_idle;
reg output_buffer_2_ce1;
reg[3:0] output_buffer_2_we1;
reg output_buffer_6_ce1;
reg[3:0] output_buffer_6_we1;
reg output_buffer_10_ce1;
reg[3:0] output_buffer_10_we1;
reg output_buffer_14_ce1;
reg[3:0] output_buffer_14_we1;
reg output_buffer_18_ce1;
reg[3:0] output_buffer_18_we1;
reg output_buffer_22_ce1;
reg[3:0] output_buffer_22_we1;
reg output_buffer_26_ce1;
reg[3:0] output_buffer_26_we1;
reg output_buffer_30_ce1;
reg[3:0] output_buffer_30_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] empty_235_fu_433_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [2:0] tmp_reg_450;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] Out_Tc_Min_cast_cast_cast_cast_cast_fu_232_p1;
reg   [63:0] Out_Tc_Min_cast_cast_cast_cast_cast_reg_459;
wire   [63:0] p_cast_fu_263_p1;
wire    ap_block_pp0_stage0;
reg   [63:0] empty_231_fu_78;
wire   [63:0] empty_234_fu_275_p2;
wire    ap_loop_init;
wire   [3:0] mask708_fu_293_p2;
wire   [3:0] mask706_fu_312_p2;
wire   [3:0] mask704_fu_331_p2;
wire   [3:0] mask702_fu_350_p2;
wire   [3:0] mask700_fu_369_p2;
wire   [3:0] mask698_fu_388_p2;
wire   [3:0] mask696_fu_407_p2;
wire   [3:0] mask710_fu_426_p2;
wire  signed [62:0] Out_Tc_Min_cast_cast_cast_cast_fu_228_p1;
wire   [8:0] tmp_s_fu_248_p4;
wire   [8:0] empty_233_fu_258_p2;
wire   [0:0] empty_232_fu_244_p1;
wire   [1:0] udiv707_cast_cast_fu_281_p3;
wire   [3:0] empty_242_fu_289_p1;
wire   [1:0] udiv705_cast_cast_fu_300_p3;
wire   [3:0] empty_241_fu_308_p1;
wire   [1:0] udiv703_cast_cast_fu_319_p3;
wire   [3:0] empty_240_fu_327_p1;
wire   [1:0] udiv701_cast_cast_fu_338_p3;
wire   [3:0] empty_239_fu_346_p1;
wire   [1:0] udiv699_cast_cast_fu_357_p3;
wire   [3:0] empty_238_fu_365_p1;
wire   [1:0] udiv697_cast_cast_fu_376_p3;
wire   [3:0] empty_237_fu_384_p1;
wire   [1:0] udiv695_cast_cast_fu_395_p3;
wire   [3:0] empty_236_fu_403_p1;
wire   [1:0] udiv709_cast_cast_fu_414_p3;
wire   [3:0] empty_243_fu_422_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

My_Conv_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_231_fu_78 <= 64'd0;
        end else if (((empty_235_fu_433_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_231_fu_78 <= empty_234_fu_275_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Out_Tc_Min_cast_cast_cast_cast_cast_reg_459[62 : 0] <= Out_Tc_Min_cast_cast_cast_cast_cast_fu_232_p1[62 : 0];
    end
end

always @ (*) begin
    if (((empty_235_fu_433_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_10_ce1 = 1'b1;
    end else begin
        output_buffer_10_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_450 == 3'd6))) begin
        output_buffer_10_we1 = mask700_fu_369_p2;
    end else begin
        output_buffer_10_we1 = 4'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_14_ce1 = 1'b1;
    end else begin
        output_buffer_14_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_450 == 3'd7))) begin
        output_buffer_14_we1 = mask702_fu_350_p2;
    end else begin
        output_buffer_14_we1 = 4'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_18_ce1 = 1'b1;
    end else begin
        output_buffer_18_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_450 == 3'd0))) begin
        output_buffer_18_we1 = mask704_fu_331_p2;
    end else begin
        output_buffer_18_we1 = 4'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_22_ce1 = 1'b1;
    end else begin
        output_buffer_22_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_450 == 3'd1))) begin
        output_buffer_22_we1 = mask706_fu_312_p2;
    end else begin
        output_buffer_22_we1 = 4'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_26_ce1 = 1'b1;
    end else begin
        output_buffer_26_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_450 == 3'd2))) begin
        output_buffer_26_we1 = mask708_fu_293_p2;
    end else begin
        output_buffer_26_we1 = 4'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_2_ce1 = 1'b1;
    end else begin
        output_buffer_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_450 == 3'd4))) begin
        output_buffer_2_we1 = mask696_fu_407_p2;
    end else begin
        output_buffer_2_we1 = 4'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_30_ce1 = 1'b1;
    end else begin
        output_buffer_30_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_450 == 3'd3))) begin
        output_buffer_30_we1 = mask710_fu_426_p2;
    end else begin
        output_buffer_30_we1 = 4'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_6_ce1 = 1'b1;
    end else begin
        output_buffer_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_450 == 3'd5))) begin
        output_buffer_6_we1 = mask698_fu_388_p2;
    end else begin
        output_buffer_6_we1 = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Out_Tc_Min_cast_cast_cast_cast_cast_fu_232_p1 = $unsigned(Out_Tc_Min_cast_cast_cast_cast_fu_228_p1);

assign Out_Tc_Min_cast_cast_cast_cast_fu_228_p1 = $signed(Out_Tc_Min_cast_cast_cast);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_232_fu_244_p1 = empty_231_fu_78[0:0];

assign empty_233_fu_258_p2 = (empty_82 + tmp_s_fu_248_p4);

assign empty_234_fu_275_p2 = (empty_231_fu_78 + 64'd1);

assign empty_235_fu_433_p2 = ((empty_234_fu_275_p2 < Out_Tc_Min_cast_cast_cast_cast_cast_reg_459) ? 1'b1 : 1'b0);

assign empty_236_fu_403_p1 = udiv695_cast_cast_fu_395_p3;

assign empty_237_fu_384_p1 = udiv697_cast_cast_fu_376_p3;

assign empty_238_fu_365_p1 = udiv699_cast_cast_fu_357_p3;

assign empty_239_fu_346_p1 = udiv701_cast_cast_fu_338_p3;

assign empty_240_fu_327_p1 = udiv703_cast_cast_fu_319_p3;

assign empty_241_fu_308_p1 = udiv705_cast_cast_fu_300_p3;

assign empty_242_fu_289_p1 = udiv707_cast_cast_fu_281_p3;

assign empty_243_fu_422_p1 = udiv709_cast_cast_fu_414_p3;

assign mask696_fu_407_p2 = 4'd3 << empty_236_fu_403_p1;

assign mask698_fu_388_p2 = 4'd3 << empty_237_fu_384_p1;

assign mask700_fu_369_p2 = 4'd3 << empty_238_fu_365_p1;

assign mask702_fu_350_p2 = 4'd3 << empty_239_fu_346_p1;

assign mask704_fu_331_p2 = 4'd3 << empty_240_fu_327_p1;

assign mask706_fu_312_p2 = 4'd3 << empty_241_fu_308_p1;

assign mask708_fu_293_p2 = 4'd3 << empty_242_fu_289_p1;

assign mask710_fu_426_p2 = 4'd3 << empty_243_fu_422_p1;

assign output_buffer_10_address1 = p_cast_fu_263_p1;

assign output_buffer_10_d1 = 32'd0;

assign output_buffer_14_address1 = p_cast_fu_263_p1;

assign output_buffer_14_d1 = 32'd0;

assign output_buffer_18_address1 = p_cast_fu_263_p1;

assign output_buffer_18_d1 = 32'd0;

assign output_buffer_22_address1 = p_cast_fu_263_p1;

assign output_buffer_22_d1 = 32'd0;

assign output_buffer_26_address1 = p_cast_fu_263_p1;

assign output_buffer_26_d1 = 32'd0;

assign output_buffer_2_address1 = p_cast_fu_263_p1;

assign output_buffer_2_d1 = 32'd0;

assign output_buffer_30_address1 = p_cast_fu_263_p1;

assign output_buffer_30_d1 = 32'd0;

assign output_buffer_6_address1 = p_cast_fu_263_p1;

assign output_buffer_6_d1 = 32'd0;

assign p_cast_fu_263_p1 = empty_233_fu_258_p2;

assign tmp_reg_450 = empty;

assign tmp_s_fu_248_p4 = {{empty_231_fu_78[9:1]}};

assign udiv695_cast_cast_fu_395_p3 = {{empty_232_fu_244_p1}, {1'd0}};

assign udiv697_cast_cast_fu_376_p3 = {{empty_232_fu_244_p1}, {1'd0}};

assign udiv699_cast_cast_fu_357_p3 = {{empty_232_fu_244_p1}, {1'd0}};

assign udiv701_cast_cast_fu_338_p3 = {{empty_232_fu_244_p1}, {1'd0}};

assign udiv703_cast_cast_fu_319_p3 = {{empty_232_fu_244_p1}, {1'd0}};

assign udiv705_cast_cast_fu_300_p3 = {{empty_232_fu_244_p1}, {1'd0}};

assign udiv707_cast_cast_fu_281_p3 = {{empty_232_fu_244_p1}, {1'd0}};

assign udiv709_cast_cast_fu_414_p3 = {{empty_232_fu_244_p1}, {1'd0}};

always @ (posedge ap_clk) begin
    Out_Tc_Min_cast_cast_cast_cast_cast_reg_459[63] <= 1'b0;
end

endmodule //My_Conv_Write_Output_F_Pipeline_7
