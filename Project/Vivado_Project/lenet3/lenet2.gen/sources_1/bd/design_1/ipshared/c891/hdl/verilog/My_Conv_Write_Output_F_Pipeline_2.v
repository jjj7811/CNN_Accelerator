// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module My_Conv_Write_Output_F_Pipeline_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_OUT2_AWVALID,
        m_axi_OUT2_AWREADY,
        m_axi_OUT2_AWADDR,
        m_axi_OUT2_AWID,
        m_axi_OUT2_AWLEN,
        m_axi_OUT2_AWSIZE,
        m_axi_OUT2_AWBURST,
        m_axi_OUT2_AWLOCK,
        m_axi_OUT2_AWCACHE,
        m_axi_OUT2_AWPROT,
        m_axi_OUT2_AWQOS,
        m_axi_OUT2_AWREGION,
        m_axi_OUT2_AWUSER,
        m_axi_OUT2_WVALID,
        m_axi_OUT2_WREADY,
        m_axi_OUT2_WDATA,
        m_axi_OUT2_WSTRB,
        m_axi_OUT2_WLAST,
        m_axi_OUT2_WID,
        m_axi_OUT2_WUSER,
        m_axi_OUT2_ARVALID,
        m_axi_OUT2_ARREADY,
        m_axi_OUT2_ARADDR,
        m_axi_OUT2_ARID,
        m_axi_OUT2_ARLEN,
        m_axi_OUT2_ARSIZE,
        m_axi_OUT2_ARBURST,
        m_axi_OUT2_ARLOCK,
        m_axi_OUT2_ARCACHE,
        m_axi_OUT2_ARPROT,
        m_axi_OUT2_ARQOS,
        m_axi_OUT2_ARREGION,
        m_axi_OUT2_ARUSER,
        m_axi_OUT2_RVALID,
        m_axi_OUT2_RREADY,
        m_axi_OUT2_RDATA,
        m_axi_OUT2_RLAST,
        m_axi_OUT2_RID,
        m_axi_OUT2_RFIFONUM,
        m_axi_OUT2_RUSER,
        m_axi_OUT2_RRESP,
        m_axi_OUT2_BVALID,
        m_axi_OUT2_BREADY,
        m_axi_OUT2_BRESP,
        m_axi_OUT2_BID,
        m_axi_OUT2_BUSER,
        p_cast13_cast,
        empty,
        output_buffer_1_address0,
        output_buffer_1_ce0,
        output_buffer_1_q0,
        output_buffer_5_address0,
        output_buffer_5_ce0,
        output_buffer_5_q0,
        output_buffer_9_address0,
        output_buffer_9_ce0,
        output_buffer_9_q0,
        output_buffer_13_address0,
        output_buffer_13_ce0,
        output_buffer_13_q0,
        output_buffer_17_address0,
        output_buffer_17_ce0,
        output_buffer_17_q0,
        output_buffer_21_address0,
        output_buffer_21_ce0,
        output_buffer_21_q0,
        output_buffer_25_address0,
        output_buffer_25_ce0,
        output_buffer_25_q0,
        output_buffer_29_address0,
        output_buffer_29_ce0,
        output_buffer_29_q0,
        shl_ln3,
        Out_Tc_Min_cast_cast_cast
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_OUT2_AWVALID;
input   m_axi_OUT2_AWREADY;
output  [63:0] m_axi_OUT2_AWADDR;
output  [0:0] m_axi_OUT2_AWID;
output  [31:0] m_axi_OUT2_AWLEN;
output  [2:0] m_axi_OUT2_AWSIZE;
output  [1:0] m_axi_OUT2_AWBURST;
output  [1:0] m_axi_OUT2_AWLOCK;
output  [3:0] m_axi_OUT2_AWCACHE;
output  [2:0] m_axi_OUT2_AWPROT;
output  [3:0] m_axi_OUT2_AWQOS;
output  [3:0] m_axi_OUT2_AWREGION;
output  [0:0] m_axi_OUT2_AWUSER;
output   m_axi_OUT2_WVALID;
input   m_axi_OUT2_WREADY;
output  [15:0] m_axi_OUT2_WDATA;
output  [1:0] m_axi_OUT2_WSTRB;
output   m_axi_OUT2_WLAST;
output  [0:0] m_axi_OUT2_WID;
output  [0:0] m_axi_OUT2_WUSER;
output   m_axi_OUT2_ARVALID;
input   m_axi_OUT2_ARREADY;
output  [63:0] m_axi_OUT2_ARADDR;
output  [0:0] m_axi_OUT2_ARID;
output  [31:0] m_axi_OUT2_ARLEN;
output  [2:0] m_axi_OUT2_ARSIZE;
output  [1:0] m_axi_OUT2_ARBURST;
output  [1:0] m_axi_OUT2_ARLOCK;
output  [3:0] m_axi_OUT2_ARCACHE;
output  [2:0] m_axi_OUT2_ARPROT;
output  [3:0] m_axi_OUT2_ARQOS;
output  [3:0] m_axi_OUT2_ARREGION;
output  [0:0] m_axi_OUT2_ARUSER;
input   m_axi_OUT2_RVALID;
output   m_axi_OUT2_RREADY;
input  [15:0] m_axi_OUT2_RDATA;
input   m_axi_OUT2_RLAST;
input  [0:0] m_axi_OUT2_RID;
input  [13:0] m_axi_OUT2_RFIFONUM;
input  [0:0] m_axi_OUT2_RUSER;
input  [1:0] m_axi_OUT2_RRESP;
input   m_axi_OUT2_BVALID;
output   m_axi_OUT2_BREADY;
input  [1:0] m_axi_OUT2_BRESP;
input  [0:0] m_axi_OUT2_BID;
input  [0:0] m_axi_OUT2_BUSER;
input  [62:0] p_cast13_cast;
input  [8:0] empty;
output  [8:0] output_buffer_1_address0;
output   output_buffer_1_ce0;
input  [31:0] output_buffer_1_q0;
output  [8:0] output_buffer_5_address0;
output   output_buffer_5_ce0;
input  [31:0] output_buffer_5_q0;
output  [8:0] output_buffer_9_address0;
output   output_buffer_9_ce0;
input  [31:0] output_buffer_9_q0;
output  [8:0] output_buffer_13_address0;
output   output_buffer_13_ce0;
input  [31:0] output_buffer_13_q0;
output  [8:0] output_buffer_17_address0;
output   output_buffer_17_ce0;
input  [31:0] output_buffer_17_q0;
output  [8:0] output_buffer_21_address0;
output   output_buffer_21_ce0;
input  [31:0] output_buffer_21_q0;
output  [8:0] output_buffer_25_address0;
output   output_buffer_25_ce0;
input  [31:0] output_buffer_25_q0;
output  [8:0] output_buffer_29_address0;
output   output_buffer_29_ce0;
input  [31:0] output_buffer_29_q0;
input  [33:0] shl_ln3;
input  [30:0] Out_Tc_Min_cast_cast_cast;

reg ap_idle;
reg m_axi_OUT2_WVALID;
reg output_buffer_1_ce0;
reg output_buffer_5_ce0;
reg output_buffer_9_ce0;
reg output_buffer_13_ce0;
reg output_buffer_17_ce0;
reg output_buffer_21_ce0;
reg output_buffer_25_ce0;
reg output_buffer_29_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] exitcond27_fu_289_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    OUT2_blk_n_W;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] Out_Tc_Min_cast_cast_cast_cast_cast_fu_236_p1;
reg   [63:0] Out_Tc_Min_cast_cast_cast_cast_cast_reg_496;
wire   [0:0] empty_324_fu_252_p1;
reg   [0:0] empty_324_reg_506;
wire   [15:0] empty_328_fu_316_p1;
reg   [15:0] empty_328_reg_555;
wire   [15:0] empty_331_fu_330_p1;
reg   [15:0] empty_331_reg_560;
wire   [15:0] empty_334_fu_344_p1;
reg   [15:0] empty_334_reg_565;
wire   [15:0] empty_337_fu_358_p1;
reg   [15:0] empty_337_reg_570;
wire   [15:0] empty_340_fu_372_p1;
reg   [15:0] empty_340_reg_575;
wire   [15:0] empty_343_fu_386_p1;
reg   [15:0] empty_343_reg_580;
wire   [15:0] empty_346_fu_400_p1;
reg   [15:0] empty_346_reg_585;
wire   [15:0] empty_349_fu_414_p1;
reg   [15:0] empty_349_reg_590;
wire   [15:0] tmp_6_fu_418_p31;
reg   [15:0] tmp_6_reg_595;
wire   [63:0] p_cast_fu_271_p1;
wire    ap_block_pp0_stage0_01001;
reg   [63:0] loop_index115_fu_92;
wire   [63:0] empty_350_fu_283_p2;
wire    ap_loop_init;
wire  signed [62:0] Out_Tc_Min_cast_cast_cast_cast_fu_232_p1;
wire   [8:0] tmp_5_fu_256_p4;
wire   [8:0] empty_325_fu_266_p2;
wire   [4:0] tmp_s_fu_299_p3;
wire   [31:0] empty_326_fu_306_p1;
wire   [31:0] empty_327_fu_310_p2;
wire   [31:0] empty_329_fu_320_p1;
wire   [31:0] empty_330_fu_324_p2;
wire   [31:0] empty_332_fu_334_p1;
wire   [31:0] empty_333_fu_338_p2;
wire   [31:0] empty_335_fu_348_p1;
wire   [31:0] empty_336_fu_352_p2;
wire   [31:0] empty_338_fu_362_p1;
wire   [31:0] empty_339_fu_366_p2;
wire   [31:0] empty_341_fu_376_p1;
wire   [31:0] empty_342_fu_380_p2;
wire   [31:0] empty_344_fu_390_p1;
wire   [31:0] empty_345_fu_394_p2;
wire   [31:0] empty_347_fu_404_p1;
wire   [31:0] empty_348_fu_408_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

My_Conv_mux_2934_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 34 ),
    .dout_WIDTH( 16 ))
mux_2934_16_1_1_U890(
    .din0(empty_328_reg_555),
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(empty_331_reg_560),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(empty_334_reg_565),
    .din9(16'd0),
    .din10(16'd0),
    .din11(16'd0),
    .din12(empty_337_reg_570),
    .din13(16'd0),
    .din14(16'd0),
    .din15(16'd0),
    .din16(empty_340_reg_575),
    .din17(16'd0),
    .din18(16'd0),
    .din19(16'd0),
    .din20(empty_343_reg_580),
    .din21(16'd0),
    .din22(16'd0),
    .din23(16'd0),
    .din24(empty_346_reg_585),
    .din25(16'd0),
    .din26(16'd0),
    .din27(16'd0),
    .din28(empty_349_reg_590),
    .din29(shl_ln3),
    .dout(tmp_6_fu_418_p31)
);

My_Conv_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            loop_index115_fu_92 <= 64'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond27_fu_289_p2 == 1'd0))) begin
            loop_index115_fu_92 <= empty_350_fu_283_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Out_Tc_Min_cast_cast_cast_cast_cast_reg_496[62 : 0] <= Out_Tc_Min_cast_cast_cast_cast_cast_fu_236_p1[62 : 0];
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        empty_324_reg_506 <= empty_324_fu_252_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        empty_328_reg_555 <= empty_328_fu_316_p1;
        empty_331_reg_560 <= empty_331_fu_330_p1;
        empty_334_reg_565 <= empty_334_fu_344_p1;
        empty_337_reg_570 <= empty_337_fu_358_p1;
        empty_340_reg_575 <= empty_340_fu_372_p1;
        empty_343_reg_580 <= empty_343_fu_386_p1;
        empty_346_reg_585 <= empty_346_fu_400_p1;
        empty_349_reg_590 <= empty_349_fu_414_p1;
        tmp_6_reg_595 <= tmp_6_fu_418_p31;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        OUT2_blk_n_W = m_axi_OUT2_WREADY;
    end else begin
        OUT2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond27_fu_289_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_OUT2_WVALID = 1'b1;
    end else begin
        m_axi_OUT2_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_buffer_13_ce0 = 1'b1;
    end else begin
        output_buffer_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_buffer_17_ce0 = 1'b1;
    end else begin
        output_buffer_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_buffer_1_ce0 = 1'b1;
    end else begin
        output_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_buffer_21_ce0 = 1'b1;
    end else begin
        output_buffer_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_buffer_25_ce0 = 1'b1;
    end else begin
        output_buffer_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_buffer_29_ce0 = 1'b1;
    end else begin
        output_buffer_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_buffer_5_ce0 = 1'b1;
    end else begin
        output_buffer_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_buffer_9_ce0 = 1'b1;
    end else begin
        output_buffer_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Out_Tc_Min_cast_cast_cast_cast_cast_fu_236_p1 = $unsigned(Out_Tc_Min_cast_cast_cast_cast_fu_232_p1);

assign Out_Tc_Min_cast_cast_cast_cast_fu_232_p1 = $signed(Out_Tc_Min_cast_cast_cast);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_OUT2_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_OUT2_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_324_fu_252_p1 = loop_index115_fu_92[0:0];

assign empty_325_fu_266_p2 = (empty + tmp_5_fu_256_p4);

assign empty_326_fu_306_p1 = tmp_s_fu_299_p3;

assign empty_327_fu_310_p2 = output_buffer_1_q0 >> empty_326_fu_306_p1;

assign empty_328_fu_316_p1 = empty_327_fu_310_p2[15:0];

assign empty_329_fu_320_p1 = tmp_s_fu_299_p3;

assign empty_330_fu_324_p2 = output_buffer_5_q0 >> empty_329_fu_320_p1;

assign empty_331_fu_330_p1 = empty_330_fu_324_p2[15:0];

assign empty_332_fu_334_p1 = tmp_s_fu_299_p3;

assign empty_333_fu_338_p2 = output_buffer_9_q0 >> empty_332_fu_334_p1;

assign empty_334_fu_344_p1 = empty_333_fu_338_p2[15:0];

assign empty_335_fu_348_p1 = tmp_s_fu_299_p3;

assign empty_336_fu_352_p2 = output_buffer_13_q0 >> empty_335_fu_348_p1;

assign empty_337_fu_358_p1 = empty_336_fu_352_p2[15:0];

assign empty_338_fu_362_p1 = tmp_s_fu_299_p3;

assign empty_339_fu_366_p2 = output_buffer_17_q0 >> empty_338_fu_362_p1;

assign empty_340_fu_372_p1 = empty_339_fu_366_p2[15:0];

assign empty_341_fu_376_p1 = tmp_s_fu_299_p3;

assign empty_342_fu_380_p2 = output_buffer_21_q0 >> empty_341_fu_376_p1;

assign empty_343_fu_386_p1 = empty_342_fu_380_p2[15:0];

assign empty_344_fu_390_p1 = tmp_s_fu_299_p3;

assign empty_345_fu_394_p2 = output_buffer_25_q0 >> empty_344_fu_390_p1;

assign empty_346_fu_400_p1 = empty_345_fu_394_p2[15:0];

assign empty_347_fu_404_p1 = tmp_s_fu_299_p3;

assign empty_348_fu_408_p2 = output_buffer_29_q0 >> empty_347_fu_404_p1;

assign empty_349_fu_414_p1 = empty_348_fu_408_p2[15:0];

assign empty_350_fu_283_p2 = (loop_index115_fu_92 + 64'd1);

assign exitcond27_fu_289_p2 = ((empty_350_fu_283_p2 == Out_Tc_Min_cast_cast_cast_cast_cast_reg_496) ? 1'b1 : 1'b0);

assign m_axi_OUT2_ARADDR = 64'd0;

assign m_axi_OUT2_ARBURST = 2'd0;

assign m_axi_OUT2_ARCACHE = 4'd0;

assign m_axi_OUT2_ARID = 1'd0;

assign m_axi_OUT2_ARLEN = 32'd0;

assign m_axi_OUT2_ARLOCK = 2'd0;

assign m_axi_OUT2_ARPROT = 3'd0;

assign m_axi_OUT2_ARQOS = 4'd0;

assign m_axi_OUT2_ARREGION = 4'd0;

assign m_axi_OUT2_ARSIZE = 3'd0;

assign m_axi_OUT2_ARUSER = 1'd0;

assign m_axi_OUT2_ARVALID = 1'b0;

assign m_axi_OUT2_AWADDR = 64'd0;

assign m_axi_OUT2_AWBURST = 2'd0;

assign m_axi_OUT2_AWCACHE = 4'd0;

assign m_axi_OUT2_AWID = 1'd0;

assign m_axi_OUT2_AWLEN = 32'd0;

assign m_axi_OUT2_AWLOCK = 2'd0;

assign m_axi_OUT2_AWPROT = 3'd0;

assign m_axi_OUT2_AWQOS = 4'd0;

assign m_axi_OUT2_AWREGION = 4'd0;

assign m_axi_OUT2_AWSIZE = 3'd0;

assign m_axi_OUT2_AWUSER = 1'd0;

assign m_axi_OUT2_AWVALID = 1'b0;

assign m_axi_OUT2_BREADY = 1'b0;

assign m_axi_OUT2_RREADY = 1'b0;

assign m_axi_OUT2_WDATA = tmp_6_reg_595;

assign m_axi_OUT2_WID = 1'd0;

assign m_axi_OUT2_WLAST = 1'b0;

assign m_axi_OUT2_WSTRB = 2'd3;

assign m_axi_OUT2_WUSER = 1'd0;

assign output_buffer_13_address0 = p_cast_fu_271_p1;

assign output_buffer_17_address0 = p_cast_fu_271_p1;

assign output_buffer_1_address0 = p_cast_fu_271_p1;

assign output_buffer_21_address0 = p_cast_fu_271_p1;

assign output_buffer_25_address0 = p_cast_fu_271_p1;

assign output_buffer_29_address0 = p_cast_fu_271_p1;

assign output_buffer_5_address0 = p_cast_fu_271_p1;

assign output_buffer_9_address0 = p_cast_fu_271_p1;

assign p_cast_fu_271_p1 = empty_325_fu_266_p2;

assign tmp_5_fu_256_p4 = {{loop_index115_fu_92[9:1]}};

assign tmp_s_fu_299_p3 = {{empty_324_reg_506}, {4'd0}};

always @ (posedge ap_clk) begin
    Out_Tc_Min_cast_cast_cast_cast_cast_reg_496[63] <= 1'b0;
end

endmodule //My_Conv_Write_Output_F_Pipeline_2
